{
  "https://docs.y.uno/docs/overview": [
    "Overview",
    "Suggest Edits",
    "Welcome to the Get Started guide for Yuno. This section is designed to provide developers and businesses with a step-by-step guide to creating your first payment and making the basic configurations you need to integrate our solution into your platform.",
    "Our solution simplifies the complexity of managing multiple payment gateways and streamlines your payment process. Instead of integrating with various payment providers individually, you can integrate with Yuno once and gain access to many payment methods and gateways. If you want more information about our solution, please visit the",
    "How Yuno Works",
    "section.",
    "To complete this guide, you will need to follow these steps:",
    "Set Up Your Account",
    "Create your First Payment",
    "Then you are ready to learn more about Yuno and start your integration.",
    "As you navigate this guide, you'll uncover comprehensive details to streamline your integration. Whether you're new to payment solutions or experienced, we are ready to provide assistance. If you have any questions or roadblocks, please contact your technical account manager."
  ],
  "https://docs.y.uno/docs/step-1-set-up-your-account": [
    "Set Up Your Account",
    "Suggest Edits",
    "In this section, you will create a Yuno account and make all the necessary configurations to process a payment. We will guide you on your account creation, configuring your first connection, setting the routing, enabling the payment method in the checkout builder, and getting the API credentials.",
    "Step 1: Create a Yuno account",
    "Go to our",
    "dashboard",
    ", click on",
    "Sign Up",
    "and create a user using your company's email. Then you will receive an email to verify your identity. Once you are verified, you can log into the dashboard.",
    "Now you have access to the dashboard. Follow the next configuration steps to turn on a payment method. You will follow these steps always you add a new payment method.",
    "Step 2: Configure your first connection",
    "Go to the",
    "Connections",
    "section on the left sidebar of the dashboard. Here you can find all the available connections you can use through Yuno. In this example, we will use the",
    "Yuno Test Payment Gateway",
    ".",
    "Look for the Yuno Test Payment Gateway in the search box on the upper right section of your screen and click",
    "Connect",
    ".",
    "Give the connection a name you can remember, and click",
    "Connect",
    "again.",
    "You will see a confirmation that your new connection was added.",
    "Step 3: Set up the route for your new connection",
    "When you have a new connection, you need to add it to a route. A route defines the provider which will process a payment. You can have multiple routes and processors for a payment method. However, for this example, we will make a basic configuration in which all the payments will be processed with the Yuno Test Payment Gateway connection.",
    "Go to the",
    "Routing",
    "section on the left sidebar of the dashboard. Here you can find all your published and unpublished routes.",
    "Now you need to click in the",
    "Not Published",
    "tab, where you will find all the payment methods with available connections that don't have a route configured.",
    "Look for the",
    "Card",
    "payment method and click on",
    "Set Up",
    ".",
    "Create a new route and set a name for it.",
    "Then click the purple arrow and add a step using the Yuno Test Payment Gateway.",
    "Click the purple",
    "Publish",
    "button in the upper right corner, and you are all set.",
    "Now you can find the new route in the Published tab, which means that the Card payment method will process all the transactions through the route you previously configured.",
    "Step 4: Enable the payment method in the checkout builder",
    "Once you have created a connection and set it up in a route, you must turn on the Card payment method to show it in your checkout.",
    "Go to the",
    "Checkout Builder",
    "section on the left sidebar of the dashboard. Here you can find the payment methods with published routes.",
    "Turn on the Card toggle to show the payment method in your checkout.",
    "Click the purple",
    "Publish",
    "button in the upper right corner, and you are all set.",
    "Step 5: Get your API credentials",
    "Now everything is set, and you need to get your API credentials. Note that these credentials only work with our Sandbox environment.",
    "Go to the",
    "Developers",
    "section on the left sidebar of the dashboard. Here you can find the Developers' tools.",
    "You can find the API credentials you will need to complete this guide here.",
    "Everything is set in the dashboard. Now you can go to the",
    "Create Your First Payment",
    "section, where you will find the steps to complete this guide."
  ],
  "https://docs.y.uno/docs/step-2-your-first-payment": [
    "Create Your First Payment With SDK",
    "Suggest Edits",
    "In this section, you will create your first payment in",
    "less than 5 minutes",
    ". We will guide you on:",
    "Downloading the example project",
    "Installing the requirements for the project",
    "Setting the environment variables",
    "Running the project in your local host",
    "Making the payment",
    "Checking the dashboard for the payment response",
    "After completing the steps in this guide, you will be ready to start building your full integration.",
    "Step 1: Make sure you have Git and Node installed",
    "Before you can download our project, you need to make sure you have previously installed Git and Node on your computer.",
    "Please refer to the git",
    "Getting Started - Installing Git",
    "guide if you have never worked with Git before.",
    "Please refer to the",
    "Node download",
    "guide if you have never worked with Node before.",
    "Step 2: Download the project",
    "Now you need to",
    "download the project",
    "or clone our",
    "Github repository",
    ". This project includes Yuno's web full-SDK and a simple implementation of the front end.",
    "Shell",
    ">",
    "git",
    "clone https://github.com/yuno-payments/yuno-sdk-web.git\n>",
    "cd",
    "yuno-sdk-web",
    "SDK Integration Example",
    "Yuno provides a ready-to-use application using the Web SDK. Explore",
    "this project",
    "to understand better how fast and simple it is to integrate with Yuno.",
    "Step 3: Set environment variables",
    "Once you have downloaded the project, you need to set up your credentials to authenticate with our API. Edit the file",
    ".env",
    "in the root folder and set the",
    "ACCOUNT_CODE",
    ",",
    "PUBLIC_API_KEY",
    ", and",
    "PRIVATE_SECRET_KEY",
    "with the information you got in the dashboard in the",
    "Set Up Your Account section",
    ". Save the file.",
    "ACCOUNT_CODE=your_account_code\nPUBLIC_API_KEY=your_public_api_key\nPRIVATE_SECRET_KEY=your_private_secret_key",
    "Step 4: Run the project",
    "Go to the project folder and install Node modules using the following command:",
    "Shell",
    ">",
    "npm",
    "install",
    "Then, run the project using the following command:",
    "Shell",
    ">",
    "npm",
    "start",
    "To access the running application, open your browser and go to:",
    "Shell",
    "http://localhost:8080",
    "Step 5: Make your first payment",
    "After accessing the running project on the browser, you will see a basic checkout with the Card payment method you set up on the",
    "Set Up Your Account",
    "guide. Select the",
    "Card",
    "option, and use the following test card information to create your first successful payment.",
    "Cardholder name",
    ": Harry Potter",
    "Card Number",
    ": 4242 4242 4242 4242",
    "Expiration Date",
    ": 09/29",
    "CVV",
    ": 123",
    "Step 6: Check the response in the dashboard",
    "After you create the payment, it will be automatically processed. You can check the payment information by accessing the",
    "Payments",
    "section on the left sidebar of the dashboard. Look for the payment you created in the previous step and click on the eye icon at the right of the register. You will have access to the payment details.",
    "Congratulations!",
    "Now you have made your first payment using Yuno. Please continue with the resources below to complete your integration and add more features."
  ],
  "https://docs.y.uno/docs/what-is-yuno": [
    "What is Yuno?",
    "Suggest Edits",
    "Yuno enables any company to accept all the available payment methods and manage fraud through a single integration. It addresses the main problems associated with the suboptimal payment performance and customer experience that many platforms offer, such as low approval rates, long and broken processes, and poor fraud management.",
    "What are the benefits of using Yuno?",
    "Yuno lets you connect to several payment methods and acquirers, customizing each operation in a simple and intuitive dashboard. With Yuno, you have access to the following benefits:",
    "One single integration that connects your company to all payment ecosystems and anti-fraud solutions.",
    "Embedded checkout with full customization from our dashboard and user-based payment method tokenization.",
    "Workflows to control your payment stack with clicks and not with code.",
    "Tools to group all your transactional data in a single source of truth.",
    "Commercial team to scale partnerships.",
    "Hundreds of payment services in one integration",
    "It has never been this easy to build and manage your payments stack.  Yuno allows you to connect dozens or even hundreds of payment methods within a single integration. If there is any provider you would like to offer to your clients, just let us know. We are releasing new integrations on a monthly basis. Check out the updated",
    "Connections list",
    "."
  ],
  "https://docs.y.uno/docs/how-yuno-payment-flow-works": [
    "How Yuno Payment Process Works",
    "Suggest Edits",
    "Yuno provides several options for you at the checkout. However, the basic payment process always follows the same steps in the sequence. On this page, you find an explanation of these steps and the basic elements used. This explanation aims to make clear the process flow you'll follow when using the Yuno SDKs or API.",
    "Steps summary",
    "The Yuno basic payment process will follow the four steps listed below:",
    "Create a customer",
    "Create a checkout session",
    "Create a One-Time Token",
    "Create the payment",
    "A successful",
    "payment",
    "process will end with a successful",
    "transaction",
    ", which will depend on the payment information you provided and the fund's availability from the customer. Explore more details related to each step in the next section.",
    "Payment process",
    "Let's explore each step, detailing why they are necessary and the information required.",
    "Step 1: Create a customer",
    "Every payment in Yuno needs to be connected to a",
    "customer",
    ". Customer information includes data such as name, address, and phone, stored in Yuno's system. We use the customer information to process payments for different",
    "payment methods",
    "and processors. In addition, we can enroll payment methods in customer's profiles.",
    "When you create a customer, we provide a unique identifier, which you will use in every subsequent step.",
    "Certain information is not required when creating a customer. However, additional information can improve the user's payment experience if provided. Phone, billing, and shipping address are examples of non-mandatory data you can provide.",
    "You will need the customer's identification information for every subsequent step.",
    "Step 2: Create a checkout session",
    "To process each payment, you will need to create a new",
    "checkout session",
    "each time to connect the customer to the payment that will be created.",
    "A checkout session marks the initiation of a payment transaction. It acts as a container (session) containing relevant information about the upcoming payment. When you create the checkout session, Yuno loads all",
    "payment methods",
    "you have connected to your account, which you can then offer to your clients at the checkout.",
    "After creating the checkout session, you will provide the available payment options to your client. With the chosen payment method, you can continue to the next step.",
    "Enroll a payment method",
    "If your client wants to enroll a payment method to their profile, you will create a",
    "customer session",
    "instead of a checkout session. When your customers enrolls a payment method, they provide sensible information, such as card number and CVV, only once. Yuno receives and stores your customer payment information and preferences for future usage.",
    "Step 3: Create a one-time token",
    "A",
    "One-Time Token",
    "(OTT) is essential for safeguarding customer privacy and payment security on Yuno. To create the OTT, you will use the customer identification and the checkout session, informing the selected",
    "payment method",
    ". This unique code, generated by Yuno, protects sensitive payment information by avoiding its storage on your servers. The OTT is a temporary and secure representation of payment details, ensuring privacy while facilitating secure transactions.",
    "Customer Convenience",
    "The OTT simplifies repeat payments by securely storing payment information for future use.",
    "Step 4: Create the payment",
    "A",
    "payment",
    "is a crucial element that unifies and represents a user's payment on the Yuno platform, regardless of the processors or payment methods used. The payment entity is a comprehensive representation of a user's payment, encompassing all essential details related to the order.",
    "You will need the data you gathered during the previous steps to proceed with the payment. It is important to note that the payment must be made within the context of a checkout session and must have a customer connected, along with an OTT, to guarantee the privacy and security of your customers.",
    "The payment entity provides a single view of the transaction by consolidating all necessary information. This unified representation is essential for tracking, reconciliation, and maintaining a transparent and organized payment flow.",
    "Enhance the customer's experience",
    "When creating a payment, certain fields are optional but can enhance user experience if provided. Be aware of mandatory fields if you wish to include this information.",
    "After you create the payment, Yuno will keep you informed about the payment updates through",
    "Webhooks",
    ". In addition, Yuno integrates",
    "fraud prevention",
    "solutions you can integrate into the payment process."
  ],
  "https://docs.y.uno/docs/basic-concepts": [
    "Basic Concepts",
    "Suggest Edits",
    "In order to understand how Yuno operates, it's essential to grasp some fundamental concepts about our architecture. This section will cover the basic elements you need to know for the integration process:",
    "Sessions",
    ": The most basic element of a transaction is the Session. A Session is created when a user visits your checkout page and views the available payment methods. This component contains all the information about the specific checkout, including the available payment methods and even the tokenized payment methods for the user if they're an existing user.",
    "Payments",
    ": Payments occur when a user initiates a payment action during a checkout session.",
    "Transactions",
    ": Transactions are specific operations related to Payments, such as a purchase or a refund through one or several Connections.",
    "Concept list",
    "To get a deep understanding of each concept related to the Yuno system operation, check the respective page:",
    "Customers",
    "Sessions",
    "Payments",
    "Transactions",
    "Tokens",
    "Payment Methods",
    "Fraud Prevention",
    "3DS"
  ],
  "https://docs.y.uno/docs/customers": [
    "Customers",
    "Suggest Edits",
    "The term \"Customer\" refers to an individual who is part of a merchant's payment network in Yuno and can make payments and store payment methods. This term is closely related to phrases used in the banking and payment sectors, such as \"Cardholder\" and \"Account holder\". Each customer has their information associated with them, and we use it to process payments for different payment methods and processors.",
    "Payment methods",
    "Customers can also have enrolled payment methods, which are specific instances of payment methods, including cards or alternative payment methods. Storing payment methods for a customer enables a frictionless payment experience and allows recurring payments without asking for additional information.",
    "For more detailed information on how to use the customer endpoint, please refer to the",
    "API reference",
    "."
  ],
  "https://docs.y.uno/docs/sessions": [
    "Sessions",
    "Suggest Edits",
    "With Yuno's SDK, you can create sessions to create payments or to enroll payment methods for future purchases. For each workflow, we use two types of sessions,",
    "Customer",
    "and",
    "Checkout",
    "sessions, to ensure we get the correct information for each scenario.",
    "Customer session",
    "You can use customer sessions to enroll/store a customer's payment methods. You'll need to create a new customer session every time you want to enroll a payment method for a customer. To create a new customer session, you will need the",
    "id",
    "of the customer generated when you created the customer on the Yuno system. With a customer session, you'll have access to all available payment methods for enrollment, which you can then offer to your customers.",
    "Available payment methods",
    "When creating both sessions, customer and checkout, the Yuno system will provide you with a list of all the payment methods you have enabled in your Yuno Dashboard within the Connections and Checkout Builder section.",
    "For more detailed information on how to use the customer session endpoint, please refer to the",
    "API reference",
    ".",
    "Checkout session",
    "You can use checkout sessions to create payments. To create a new checkout session, you will need the",
    "id",
    "of the customer, generated when you created the customer on the Yuno system. You will create a new checkout session every time you make a payment. With a checkout session, you will have access to all payment methods available for that customer (both previously enrolled or not) to make a purchase, which you can then offer to your customers.",
    "Create a payment without a checkout session",
    "By utilizing Direct integration, which does not require Yuno's SDK, you can create a payment without needing a checkout session.",
    "For more detailed information on how to use the checkout session endpoint, please refer to the",
    "API reference",
    "."
  ],
  "https://docs.y.uno/docs/payments-1": [
    "Payments",
    "Suggest Edits",
    "What is a Payment?",
    "A Payment is a primary entity that combines the depiction of a user's payment, regardless of the processors or payment approaches employed.",
    "Payments gather all crucial details regarding the order, encompassing customer specifics, total sum, currency, products, shipping details, and more. You can refer to the",
    "Transactions",
    "page for a deeper insight into the order and payment exchanges.",
    "Payment workflow",
    "In the following workflow, you will discover the various possible payment statuses and their connections. A payment  will always have a payment status. Yuno payments follow a standardized payment lifecycle, guaranteeing consistent functionality for all payment methods. Each payment will move through a sequence of statuses until it is completed. Below, you can find the explanation of the possible outcomes of a payment depending on its transaction statuses.",
    "Refer to the",
    "Payments API reference",
    "section for more detailed information on status codes and messages.",
    "Payments and transactions",
    "As mentioned before, a payment consists in or many transactions that determine the final outcome of the payment itself. If you enable different connections for you payment method route, such as fraud prevention, three d secure or provider fallbacks, you are going to see those transactions as part of the payment lifecycle.",
    "On the",
    "Payments",
    "section in your Yuno dashboard you will be able to see and export all the information regarding your payments and transactions with Yuno.",
    "For more detailed information about how transactions impact on payment outcomes, please refer to the",
    "Transactions",
    "section."
  ],
  "https://docs.y.uno/docs/transactions": [
    "Transactions",
    "Suggest Edits",
    "What is a Transaction?",
    "Each payment has one or more associated transactions. A payment on Yuno can go through multiple processors via fallbacks, retries, or split routing, containing multiple transactions. You can check all transactions related to a payment on the payment timeline on your Yuno Dashboard.",
    "On Yuno, transactions are divided into",
    "Primary",
    "and",
    "Secondary",
    "transactions. In addition, each transaction can have different status depending on its processing stage.",
    "Transaction types and statuses",
    "Primary transactions are related to a new initiating transaction and can be one of three types:",
    "Purchase",
    ": A standard sale transaction.",
    "Authorize",
    ": A transaction used to authorize a payment amount for capture at a later time.",
    "Verify",
    ": A transaction to verify if the customer is using a valid credit card.",
    "Secondary transaction refers to additional transactions that affect the final outcome of the payment and primary transaction. The secondary transactions can be:",
    "Refund",
    ": A refund made to the initial transaction, which can be full or partial.",
    "Cancel",
    ": A cancellation of an initial authorization.",
    "Capture",
    ": A capture of funds from an initial authorization transaction, which can be full or partial.",
    "Chargeback",
    ": A dispute made by the customer for the initial transaction.",
    "3DS",
    ": A 3DS verification of an initial transaction.",
    "Fraud Screening",
    ": A fraud screening verification of an initial transaction. These are represented as",
    "FRAUD_SCREENING",
    "in your Payments response.",
    "All possible statuses for each transaction type are presented below.",
    "Refer to the",
    "Transactions API reference",
    "section for more detailed information on transaction status codes and messages.",
    "On the",
    "Payments",
    "section in your Yuno dashboard you will be able to see and export all the information regarding your payments and transactions with Yuno."
  ],
  "https://docs.y.uno/docs/tokens": [
    "Tokens",
    "Suggest Edits",
    "With Yuno's SDK, you can securely capture payment method data on your site or app. A payment method token is a string that represents sensitive payment method credentials and customer data. By communicating directly with Yuno's PCI-L1 tokenization service, we gather sensitive customer data.",
    "One-Time Use Token vs. Vaulted Token",
    "Yuno uses two different concepts of tokens to process payments depending on the integration.",
    "One-time Use Token",
    ": While using Yuno's SDK, we gather all the necessary information to process the payment and store it in a One Time Use Token, regardless of the customer's chosen payment method. You will use the token when creating the payment. Note that this token only works one time. You will need to generate a new one-time token for each checkout session created.",
    "Vaulted Token",
    ": A Vaulted Token is created once a payment method is enrolled and stored with the customer information. You can use the created Vaulted Token to identify the payment method in future payments.",
    "Yuno tokenization service and centralized vault enable you to handle recurring payments, fallbacks, and retries across processors without compromising UX."
  ],
  "https://docs.y.uno/docs/payment-methods": [
    "Payment methods",
    "Suggest Edits",
    "Yuno offers numerous connections with various processors and payment methods, and this collection is consistently expanding monthly. Please refer to the",
    "Payment methods",
    "section for more detailed information about which payment methods are available in Yuno and their capabilities. In addition, you can use the",
    "Coverage",
    "page to check which connections are available in each country.",
    "What is a Payment Method?",
    "To understand the payment process better, it's essential to differentiate between payment methods and processors.",
    "Payment Method",
    ": Payment methods acquire customer information and forward it to the processor for payment processing. Although credit/debit cards are commonly used, there are other alternative payment methods like Apple Pay, Google Pay, PSE, Webpay, Mercado Pago, PIX, etc.",
    "Processors",
    ": Processors act as intermediaries between the merchant's and customer's banks, managing refunds and cancellations and facilitating payment processing. They handle the actual processing of the information obtained by the payment method.",
    "Differences between payment methods",
    "Payment methods may differ significantly regarding their processing. In addition, some may support enrollment, while others don't. Thus payment methods can be divided regarding the enrolment characteristics and user interaction.",
    "User interaction",
    "When it comes to payment methods, the workflow can vary depending on the capabilities of each processor and the actions required by the customer to complete the payment. There are two main types, synchronous and asynchronous.",
    "Synchronous",
    ": Synchronous payment methods provide an instant final result once the customer clicks",
    "Pay",
    "and the payment is created by the merchant in the background. In these cases, you do not need webhooks to know the outcome, as it will be given in the payment response.",
    "Asynchronous",
    ":  Asynchronous payment methods, on the other hand, require an additional step by the customer to finalize the payment. These payments will have an intermediate status",
    "PENDING",
    "until the customer completes the payment or the processor notifies Yuno of the final outcome. To stay up to date on these statuses, it is important to configure Webhooks in your Yuno account for instant updates.",
    "Enrollment",
    "In Yuno, \"enrollment\" refers to the process of storing a customer's payment method information for future purchases. This allows for seamless transactions initiated either by the customer or the merchant without requiring any additional input from the customer.",
    "Available",
    ": Yuno offers various payment methods for enrollment. The most popular one is Credit/Debit Cards, but we also offer alternative payment methods, mainly wallets, which allow customers to provide their account information for future payments.",
    "Not available",
    ": Payment methods that cannot be enrolled. These are typically alternative methods that rely on bank transfers or cash payments, which may require the customer to take action for each payment."
  ],
  "https://docs.y.uno/docs/webhooks-1": [
    "Webhooks",
    "Suggest Edits",
    "Webhooks enable apps to provide real-time information whenever an event happens without needing constant requests. They are a passive method to receive data between two systems through an HTTP POST. After configuring the Yuno webhooks, you will receive event notifications every time an activity or a function is generated within the Yuno flow.",
    "Why do we recommend you use webhooks?",
    "Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno. You will process the payment information on demand.",
    "What do you need to know before start using webhooks?",
    "To start using Yuno’s webhooks, you need to build a public REST API to receive event notifications (POST request). That means the REST API you will build should not require any authentication or access restriction through a header. Despite using a public API, the communication system is very safe since Yuno event notifications will not be available to the public and will use a unique URL to communicate only to your REST API."
  ],
  "https://docs.y.uno/docs/fraud": [
    "Fraud prevention",
    "Suggest Edits",
    "Overview",
    "Yuno is connected with external fraud detection services, allowing you to conveniently set up pre-authorization and/or post-authorization fraud screening verifications through your chosen",
    "fraud detection provider",
    "as an integral part of your payment process.",
    "Fraud prevention with Yuno",
    "While using Yuno's SDK, you don't need to develop any additional features. The only action required is to add the fraud detection provider to the payment route, and we will take care of the rest.",
    "As seen in the",
    "Transaction section",
    ", different transactions are generated depending on certain aspects defined in the payment method route when you create a payment. For a payment with a fraud verification service set up in the route, a",
    "FRAUD_SCREENING",
    "transaction will be created and associated with that payment, letting you know the final outcome of the fraud verification and all the related details. The same information will also be available in the corresponding payment information on the Yuno Dashboard."
  ],
  "https://docs.y.uno/docs/3ds-1": [
    "3DS",
    "Suggest Edits",
    "What is 3D Secure 2",
    "3D Secure, or 3DS, is a security protocol for online payments to prevent the fraudulent use of credit cards in card-not-present (CNP) transactions. The protocol, developed in 1999, requires additional verification steps for customers during the purchase process to authenticate themselves and reduce the risk of fraud. The flux below presents a payment process using 3DS:",
    "Where:",
    "Merchant Plugin Interface (MPI) initiates the verification process by facilitating the secure exchange of information between (the merchant, scheme Directory server, and the cardholder’s issuing bank).",
    "Scheme Directory Server (DS) acts as a centralized database and facilitates the identification of the appropriate cardholder’s issuing bank and the corresponding authentication method to be used.",
    "Issuer Access Control Server (ACS) is responsible for verifying and validating the cardholder’s identity during a 3DS transaction. The Issuer ACS receives authentication requests and performs risk assessments and authentication checks based on the bank’s predefined rules and policies.",
    "3D Secure 2, or 3DS2, published in 2016, is an updated version of the original 3DS protocol and uses dynamic authentication methods such as biometrics and token-based authentication, whereas the original 3DS protocol relies on static passwords. 3DS2 aims to provide a better user experience with a more fluid flow for end users during authentication. EMVCo, an organization owned by major card brands, developed and managed both protocols. All major card brands stopped supporting the first version of 3DS on October 2022. Therefore, integrating the 3DS2 verification step is essential to ensure your customers' experience and security. Yuno already provides an easy 3DS2 integration for your business.",
    "Benefits of 3D Secure 2",
    "As mentioned, 3DS2 was developed to enhance the user experience and adapt the 3DS protocol to the modern payment landscape.",
    "Prepared for new technologies",
    "3DS2 was designed with the rise of smartphones in mind and allowed banks to offer innovative authentication experiences through their mobile banking apps, such as biometric authentication using fingerprints or facial recognition. Therefore, merchants can offer several authentication methods that align with consumer preferences and technological advancements, resulting in a more convenient and secure authentication process.",
    "Integration capabilities",
    "Regarding integration, 3DS2 includes an SDK component that enables native integration into mobile apps. As a result, merchants can authenticate transactions within their own apps. Now, the challenge flow happens directly within the mobile checkout flows, eliminating the need for full-page redirects and providing a more seamless user experience.",
    "Amount of data available for authentication",
    "3DS2 allows businesses to exchange ten times more data on each transaction to the cardholder's bank. This includes payment-specific data, such as shipping address, and contextual data, such as the customer's device ID or previous transaction history. This allows the bank to assess the transaction's risk level and potentially authenticate the payment without additional input from the cardholder. Therefore, a payment using 3DS2 protocols can face a",
    "frictionless flow",
    "or a",
    "challenge flow",
    "to complete the payment.",
    "Frictionless flow",
    "In a frictionless flow, the customer's data is confirmed without any manual data entry. It happens when the system recognizes and verifies the customer’s device, and the data is exchanged in the background. As the customer is identified and validated with this information, no additional requests are necessary from the payment systems.",
    "Challenge flow",
    "The challenge flow happens when the stored information isn't enough to validate the customer. As the customer's identity is not confirmed, the system requires an additional step to validate the customer, using a one-time password or biometric verification. Depending on the validation system, the customer may be redirected to a card issuer’s page to enter the necessary information.",
    "The use of 3DS2 results in a smoother and more frictionless user experience. The improved data flows and decision-making capabilities enabled by 3DS2 reduce the cart abandonment rate and improve the conversion rates."
  ],
  "https://docs.y.uno/docs/build-your-integration": [
    "Step by Step Integration Process",
    "Suggest Edits",
    "In this section, you are going to follow a few steps to complete your integration with Yuno. After",
    "setting up your Yuno account",
    ", we will guide you on using the right SDK for you, reference the correct endpoints and integrate additional services. After these steps, you are ready to start using Yuno!",
    "Before starting this section, you will need to decide the type of integration you are going to work on. For a better understanding of the features and capabilities that each integration brings, please refer to the",
    "Choose The Right Integration section",
    ".",
    "Step 1: Integrate basic payment workflow",
    "First things first. You need to integrate the basic workflow that allows you to create payments. This step will vary depending on which integration you decide to use. In this section you are going to find the links to the workflow explanation depending on the integration you chose, but as a summary, the general steps consists in:",
    "Create a customer",
    "Create a checkout session",
    "Show the payment methods available for the customer to chose from.",
    "Ask for the required information depending on the payment method.",
    "Create the payment",
    "Full SDK",
    "Lite SDK",
    "Secure Fields",
    "Direct Workflow",
    "Step 2: Implement refunds",
    "[Optional] - Once you have your basic integration all set up, we recommend implementing refunds to  take advantage of everything Yuno has to offer. By implementing the",
    "refunds",
    "endpoint to your system you will be able to refund total or partial transaction without leaving your environment. Remember that you can also execute refunds from the Yuno dashboard and that not all payment methods support refunds (to see each payment method capability refer to the",
    "Payment methods",
    "section)",
    "Step 3: Implement captures and cancels",
    "[Optional] - To keep integrating Yuno's full capabilities into your system, we recommend implementing the",
    "cancel",
    "and",
    "capture",
    "endpoints. The Cancelations let you end on going transactions with a pending status (usually alternative payment methods with an asynchronous behaviour) and the Capture endpoint lets you capture pending/authorize payments made by a customer (usually credit card authorizations).",
    "Step 4: Set up webhooks",
    "[Optional] - Finally, we recommend configuring",
    "Webhooks",
    "in your Yuno Dashboard to keep up to date with your payment updates. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno. You will process the payment information on demand.",
    "Step 5: Test and go live!",
    "Once you have integrated Yuno's SDK and implemented the basic features for a complete payment experience, all that is left is to test the integration (For example with",
    "Yuno Test Gateway",
    "for Credit cards), check that everything is working fine and start using your",
    "production Credentials",
    "after",
    "enabling you account for production",
    "."
  ],
  "https://docs.y.uno/docs/full-sdk-workflow": [
    "Full SDK",
    "Suggest Edits",
    "Overview",
    "Using our Full SDK, you can integrate Yuno, minimizing integration, maintenance, and operational efforts without any need for compliance.",
    "With the Full SDK, Yuno handles the user experience and allows you to customize the checkout and payment methods you are showing to your users from our dashboard. This gives you a lot of flexibility and reduces the need to write more code in the future when you add new payment methods and features to your payment stack.",
    "One of the main advantages of the full SDK integration is that we take care of every scenario for your customer regardless of the payment method chosen. You can handle all of them with a single integration.",
    "Payment Workflow",
    "Render all the available payment methods with a single integration",
    "Step 1: Create a customer",
    "The first step of the payment flow is to create a customer. A customer will have payment methods associated, this is why it is important. You can create a customer using the",
    "Create Customer Endpoint",
    ". As a result, you will receive the id of the customer that was created in the Yuno DB.",
    "If you have created a customer that is going to pay previously you can skip this step.",
    "Step 2: Create a checkout session",
    "You use checkout sessions to create payments. You will create a new checkout session every time you make a payment. With a checkout session, you will have access to all payment methods available for that customer (both previously enrolled or not) to make a purchase, which you can then offer to your customers.",
    "You can create it using",
    "Checkout Session Endpoint",
    ". To create a new checkout session, you will need the customer id, generated when you created the customer on the Yuno system. This endpoint will provide the checkout session id that you can use for your payment.",
    "Once you have performed the first two steps, you will need to implement one of our  SDKs to continue the payment flow.",
    "Step 3: Implement the SDK and obtain the One Time Token",
    "By using the Full SDK, we will show the customer all the payment methods they have available (including previously enrolled payment methods) and ask for any additional information necessary to make the payment so you do not have to worry about it.",
    "In this step, you will have to initialize Yuno's SDK with your API credentials and the checkout session previously created in step two. Below you will find a checklist to initialize the Yuno SDK:",
    "Checklist",
    "Include the library in your project.",
    "Initialize SDK with the public key.",
    "Start the checkout process. Configure SDK by calling the function",
    "yuno.startCheckout()",
    "with the desired configuration.",
    "Mount the SDK in Web or add the view in Mobile to display the checkout to your user. Once your user selects a payment method, proceed with step 5.",
    "You must create a payment button on your front end. When the user clicks the payment button, begin the payment process by calling the function",
    "yuno.startPayment()",
    ".",
    "If needed the SDK will collect the additional payment information. This can include, card information or the customer payer information, required by the provider. (email, phone number, document, etc).",
    "Once this process is completed, the SDK will provide a One-Time Token in the callback function",
    "yunoCreatePayment()",
    ". This function must be defined when you configure the SDK in the function",
    "yuno.startCheckout()",
    ".",
    "For more detailed information on how to initiate Yuno's SDK please refer to one of the following sections according to the corresponding platform:",
    "Web",
    "iOS",
    "Android",
    "Step 4: Create the payment",
    "Once you have completed the first three steps, you can create a payment. A payment gathers all crucial details regarding the order, customer specifics, total amount, currency, products, shipping details, and more. You can create it using",
    "Create Payment endpoint",
    ", please consider that you will have to send the one_time_token obtained in the previous step in order for the payment to work.",
    "Note:",
    "The response of the payment endpoint will provide an important parameter called",
    "sdk_action_required",
    ".",
    "When the selected payment method is synchronous, the API response will provide the final payment status. In this scenario, the field",
    "sdk_action_required",
    "in the API response will be",
    "false",
    ". The payment process concludes at this step.",
    "For asynchronous payment methods, additional action via the SDK will be necessary. This will be indicated by the API through the field",
    "sdk_action_required",
    "in the response, which will be set to",
    "true",
    ".",
    "Status",
    "During integration, we advise using the payment",
    "status",
    "and",
    "sub_status",
    "as your primary reference for the payment's state. Since a payment might\n            have multiple associated transactions, concentrating on the payment",
    "status",
    "/",
    "sub_status",
    "ensures you're informed of the most recent state. This provides a clear basis for\n              decision-making regardless of the number of transactions involved.",
    "Step 5: Continue Payment",
    "If in the response of the create payment you receive the parameter",
    "sdk_action_required",
    "set to",
    "true",
    ", you will need to invoke the Full SDK again, you can do this using the function",
    "continuePayment",
    ". Calling this function will display the additional screens or steps the customer needs to perform in order to complete the payment.",
    "We recommend incorporating the method",
    "continuePayment",
    "from the SDK after creating the payment. This is because certain asynchronous payment methods demand additional action from the customer for completion.",
    "Step 6: Get Payment Status",
    "Call the",
    "yunoPaymentResult()",
    "function to obtain the payment status. Once you have this status you can use it to show your user the corresponding screen depending on the final result of the payment.",
    "Step 7: Receive the payment result through a webhook",
    "We also recommend configuring",
    "Webhooks",
    "in your Yuno dashboard. Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno.",
    "Enroll a credit card with a payment",
    "Yuno enables you to save a credit/debit card for future purchases with the same payment request without having to integrate the",
    "enrollment",
    "integration. There are several ways to obtain a",
    "vaulted token",
    ":",
    "Set the parameter",
    "vault_on_sucess = true",
    "in the Create Payment Endpoint. In the payment response, you will receive the",
    "vaulted_token",
    "that corresponds to the card used by the customer payer.",
    "You can also set the function",
    "cardSaveEnable = true",
    "in the SDK to display a checkbox for the user to select if he wants to save the card for future purchases. If the user checks the box in the response of the payment you will receive the",
    "vaulted_token",
    "that corresponds to the card used by the customer payer.",
    "Note:",
    "Please only use one of the two options to enroll a card.",
    "For alternative payment methods please refer to the following",
    "link",
    ".",
    "After the payment is made, the user will have the credit card available for future purchases and you can see the detailed information by using one of the following services:",
    "Get payment methods by checkout session",
    "Get payment methods by customer",
    "Using a vaulted token",
    "Even though the user selects an enrolled payment method to create the payment, \n          we recommend using the SDK to tokenize the information and continue with the payment \n          instead of just using the vaulted token directly to Yuno's API. This allows us to:",
    "Support 3DS",
    "Support fraud screening",
    "Ask for missing information for the enrolled payment method in case the selected provider in the CARD route needs some additional fields.",
    "You just need to send the vaultedToken in the mountCheckoutLite method and we'll take care of the rest. \n          Remember that if the payment method you are using requires an additional step for the user to complete \n          (such as a 3DS challenge), you can use the yuno.continuePayment() method so we can take care of the corresponding redirection. \n          The continue method not only works for enrolled payment methods, but it is necessary for regular payment methods \n          that require an action from the customer in general, such as PSE for example.",
    "Payment workflow with vaulted token",
    "Once the user has enrolled in one of the available payment methods, the payment can be made back to back using the",
    "Vaulted Token",
    ", obtained in the enrollment process, without having to request the user any more information.",
    "Step 1: Create a checkout session",
    "You use checkout sessions to create payments. You will create a new checkout session every time you make a payment. With a checkout session, you will have access to all payment methods available for that customer (both previously enrolled or not) to make a purchase, which you can then offer to your customers.",
    "You can create it using",
    "Checkout Session Endpoint",
    ". To create a new checkout session, you will need the customer id, generated when you created the customer on the Yuno system. This endpoint will provide the checkout session id that you can use for your payment.",
    "After this step, you will need to implement one of our  SDKs to continue the payment flow.",
    "Step 2: Implement the SDK and obtain the One Time Token",
    "By using the Full SDK, we will show the customer all the enrolled payment methods they have available and ask for any additional information necessary to make the payment so you do not have to worry about it.",
    "In this step, you will have to initialize Yuno's SDK with your API credentials and the checkout session previously created in step two. Below you will find a checklist to initialize the Yuno SDK:",
    "Checklist",
    "Include the library in your project.",
    "Initialize SDK with the public key.",
    "Start the checkout process. Configure SDK by calling the function",
    "yuno.startCheckout()",
    "with the desired configuration.",
    "Mount the SDK in Web or add the view in Mobile to display the checkout to your user. Once your user selects a payment method, proceed with step 5.",
    "You must create a payment button on your front end. When the user clicks the payment button, begin the payment process by calling the function",
    "yuno.startPayment()",
    ".",
    "If needed the SDK will collect the additional payment information. This can include, card information or the customer payer information, required by the provider. (email, phone number, document, etc).",
    "Once this process is completed, the SDK will provide a One-Time Token in the callback function",
    "yunoCreatePayment()",
    ". This function must be defined when you configure the SDK in the function",
    "yuno.startCheckout()",
    ".",
    "For more detailed information on how to initiate Yuno's SDK please refer to one of the following sections according to the corresponding platform:",
    "Web",
    "iOS",
    "Android",
    "Step 3: Create the payment",
    "Once you have completed the first two steps, you can create a payment. A payment gathers all crucial details regarding the order, customer specifics, total amount, currency, products, shipping details, and more. You can create it using",
    "Create Payment endpoint",
    ", please consider that you will have to send the one_time_token obtained in the previous step in order for the payment to work.",
    "Note:",
    "The response of the payment endpoint will provide an important parameter called",
    "sdk_action_required",
    ".",
    "When the selected payment method is synchronous, the API response will provide the final payment status. In this scenario, the field",
    "sdk_action_required",
    "in the API response will be",
    "false",
    ". The payment process concludes at this step.",
    "For asynchronous payment methods, additional action via the SDK will be necessary. This will be indicated by the API through the field",
    "sdk_action_required",
    "in the response, which will be set to",
    "true",
    ".",
    "Status",
    "During integration, we advise using the payment",
    "status",
    "and",
    "sub_status",
    "as your primary reference for the payment's state. Since a payment might\n            have multiple associated transactions, concentrating on the payment",
    "status",
    "/",
    "sub_status",
    "ensures you're informed of the most recent state. This provides a clear basis for\n              decision-making regardless of the number of transactions involved.",
    "Step 4: Continue Payment",
    "If in the response of the create payment you receive the parameter",
    "sdk_action_required",
    "set to",
    "true",
    ", you will need to invoke the Full SDK again, you can do this using the function",
    "continuePayment",
    ". Calling this function will display the additional screens or steps the customer needs to perform in order to complete the payment.",
    "We recommend incorporating the method",
    "continuePayment",
    "from the SDK after creating the payment. This is because certain asynchronous payment methods demand additional action from the customer for completion.",
    "Step 5: Get Payment Status",
    "Call the",
    "yunoPaymentResult()",
    "function to obtain the payment status. Once you have this status you can use it to show your user the corresponding screen depending on the final result of the payment.",
    "Step 6: Receive the payment result through a webhook",
    "We also recommend configuring",
    "Webhooks",
    "in your Yuno dashboard. Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno."
  ],
  "https://docs.y.uno/docs/the-ultimate-checkout-lite": [
    "Lite SDK (Payment)",
    "Suggest Edits",
    "Overview",
    "With the Lite version of the Yuno SDK, you have full control of your own payment experience. The main difference with the full SDK integration is that this version allows merchants to consult a service that will provide a list of the payment methods they have available for payment and enrollment. With this information, the merchants have control of which payment methods they want to show to the user in the checkout and enroll to their platform, but after a payment method is selected, the workflow remains the same for both SDK implementations. This particular implementation of the SDK allows you to:",
    "Create Payments",
    "Enrollment payment methods",
    "for future payments",
    "Payment Workflow",
    "Step 1: Create a customer",
    "The first step of the payment flow is to create a customer. A customer will have payment methods associated, this is why it is important. You can create a customer using the",
    "Create Customer Endpoint",
    ". As a result, you will receive the id of the customer that was created in the Yuno DB.",
    "If you have created a customer that is going to pay previously you can skip this step.",
    "Step 2: Create a checkout session",
    "You use checkout sessions to create payments. You will create a new checkout session every time you make a payment. With a checkout session, you will have access to all payment methods available for that customer (both previously enrolled or not) to make a purchase, which you can then offer to your customers.",
    "You can create it using",
    "Checkout Session Endpoint",
    ". To create a new checkout session, you will need the customer id, generated when you created the customer on the Yuno system. This endpoint will provide the checkout session id that you can use for your payment.",
    "Once you have performed the first two steps, you will need to implement one of our  SDKs to continue the payment flow.",
    "Step 3: Display payment methods",
    "Query the available payment methods you have enabled via the Yuno integration by making a GET call to the",
    "Retrieve Payment Methods endpoint",
    "using the",
    "checkout_session",
    "created in the previous step.",
    "Display the available payment methods retrieved in the last step to the customer. Here the users will select the payment method they want to pay within your platform. By using SDK Lite, the merchant is responsible for displaying the payment methods and capturing the customer's selection.",
    "Step 4: Implement the SDK and obtain the One Time Token",
    "In this step, you will have to initialize Yuno's SDK with your API credentials and the checkout session previously created in step two. Below you will find a checklist to initialize the Yuno SDK:",
    "Checklist",
    "Include the library in your project.",
    "Initialize SDK with the public key.",
    "Start the checkout process. Configure SDK by calling the function",
    "yuno.startCheckout()",
    "with the desired configuration.",
    "Mount the SDK in Web or add the view in Mobile to display the checkout to your user. Once your user selects a payment method, proceed with step 5.",
    "You must create a payment button on your front end. When the user clicks the payment button, begin the payment process by calling the function",
    "yuno.startPayment()",
    ".",
    "If needed, the SDK will collect the additional payment information. This can include, card information or the customer payer information, required by the provider. (email, phone number, document, etc).",
    "Once this process is completed, the SDK will provide a One-Time-Token in the callback function",
    "yunoCreatePayment()",
    ". This function must be defined when you configure the SDK in the function",
    "yuno.startCheckout()",
    ".",
    "For more detailed information on how to initiate Yuno's SDK please refer to one of the following sections according to the corresponding platform:",
    "Web",
    "iOS",
    "Android",
    "Step 5: Create the payment",
    "Once you have completed the first three steps, you can create a payment. A payment gathers all crucial details regarding the order, customer specifics, total amount, currency, products, shipping details, and more. You can create it using",
    "Create Payment endpoint",
    ", please consider that you will have to send the one_time_token obtained in the previous step in order for the payment to work.",
    "Note:",
    "The response of the payment endpoint will provide an important parameter called",
    "sdk_action_required",
    ".",
    "When the selected payment method is synchronous, the API response will provide the final payment status. In this scenario, the field",
    "sdk_action_required",
    "in the API response will be",
    "false",
    ". The payment process concludes at this step.",
    "For asynchronous payment methods, additional action via the SDK will be necessary. This will be indicated by the API through the field",
    "sdk_action_required",
    "in the response, which will be set to",
    "true",
    ".",
    "Status",
    "During integration, we advise using the payment",
    "status",
    "and",
    "sub_status",
    "as your primary reference for the payment's state. Since a payment might\n            have multiple associated transactions, concentrating on the payment",
    "status",
    "/",
    "sub_status",
    "ensures you're informed of the most recent state. This provides a clear basis for\n              decision-making regardless of the number of transactions involved.",
    "Step 6: Continue Payment",
    "If in the response of the create payment you receive the parameter",
    "sdk_action_required",
    "set to",
    "true",
    ", you will need to invoke the Full SDK again, you can do this using the function",
    "continuePayment",
    ". Calling this function will display the additional screens or steps the customer needs to perform in order to complete the payment.",
    "We recommend incorporating the method",
    "continuePayment",
    "from the SDK after creating the payment. This is because certain asynchronous payment methods demand additional action from the customer for completion.",
    "Step 7: Get Payment Status",
    "Call the function",
    "yunoPaymentResult()",
    "to obtain the payment status. Once you have this status you can use it to show your user the corresponding screen depending on the final result of the payment.",
    "Step 8: Receive the payment result through a webhook",
    "We also recommend configuring",
    "Webhooks",
    "in your Yuno dashboard. Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno.",
    "For more detailed information on how to initiate Yuno's SDK please refer to one of the following sections according to the corresponding platform:",
    "Web",
    "iOS",
    "Android",
    "Enroll a credit card with a payment",
    "Yuno enables you to save a credit/debit card for future purchases with the same payment request without having to integrate the",
    "enrollment",
    "integration. There are several ways to obtain a",
    "vaulted token",
    ":",
    "Set the parameter",
    "vault_on_sucess = true",
    "in the Create Payment Endpoint. In the payment response, you will receive the",
    "vaulted_token",
    "that corresponds to the card used by the customer payer.",
    "You can also set the function",
    "cardSaveEnable = true",
    "in the SDK to display a checkbox for the user to select if he wants to save the card for future purchases. If the user checks the box in the response of the payment you will receive the",
    "vaulted_token",
    "that corresponds to the card used by the customer payer.",
    "Note:",
    "Please only use one of the two options to enroll a card.",
    "For alternative payment methods please refer to the following",
    "link",
    ".",
    "After the payment is made, the user will have the credit card available for future purchases and you can see the detailed information by using one of the following services:",
    "Get payment methods by checkout session",
    "Get payment methods by customer",
    "Using a vaulted token",
    "Even though the user selects an enrolled payment method to create the payment, \n          we recommend using the SDK to tokenize the information and continue with the payment \n          instead of just using the vaulted token directly to Yuno's API. This allows us to:",
    "Support 3DS",
    "Support fraud screening",
    "Ask for missing information for the enrolled payment method in case the selected provider in the CARD route needs some additional fields.",
    "You just need to send the vaultedToken in the mountCheckoutLite method and we'll take care of the rest. \n          Remember that if the payment method you are using requires an additional step for the user to complete \n          (such as a 3DS challenge), you can use the yuno.continuePayment() method so we can take care of the corresponding redirection. \n          The continue method not only works for enrolled payment methods, but it is necessary for regular payment methods \n          that require an action from the customer in general, such as PSE for example.",
    "Payment workflow with Vaulted Token",
    "After the user has enrolled in one of the available payment methods, a payment can be processed back-to-back using the",
    "vaulted_token",
    "obtained during",
    "enrollment",
    ". This eliminates the need to request further information from the user.",
    "Step 1: Create a checkout session",
    "Use the customer ID of an existing customer to create a",
    "Checkout Session",
    ". To create a new checkout session, you will need the customer id, generated when you created the customer on the Yuno system. This endpoint will provide the checkout session id that you can use for your payment.",
    "Step 2: Display enrolled payment methods",
    "Query the available payment methods you have enabled via the Yuno integration by making a GET call to the",
    "Retrieve Payment Methods endpoint",
    "using the",
    "checkout_session",
    "created in the previous step.",
    "Display the available payment methods retrieved in the last step to the customer. Here the users will select the payment method they want to pay within your platform. By using SDK Lite, the merchant is responsible for displaying the payment methods and capturing the customer's selection.",
    "Once you have performed the first two steps, you will need to implement one of our  SDKs to continue the payment flow.",
    "Step 3: Create the payment",
    "Once you have completed the first three steps, you can create a payment. A payment gathers all crucial details regarding the order, customer specifics, total amount, currency, products, shipping details, and more. You can create it using",
    "Create Payment endpoint",
    ", please consider that you will have to send the one_time_token obtained in the previous step in order for the payment to work.",
    "Step 4: Receive the payment result through a webhook",
    "We also recommend configuring",
    "Webhooks",
    "in your Yuno dashboard. Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno.",
    "Step 5: Payment status (Optional)",
    "Use the",
    "Status Function",
    ", which is an SDK function, to display the payment result to the customer."
  ],
  "https://docs.y.uno/docs/enrollment-lite": [
    "Lite SDK (Enrollment)",
    "Suggest Edits",
    "Overview",
    "Similarly to what we have in the Full Payment Implementation, if you want to enroll/save the customer's payment method for a frictionless purchase experience using our",
    "payment_method_token",
    ", you have to follow the next steps:",
    "Step 1: Create a customer",
    "The first step of the payment flow is to create a customer. A customer will have payment methods associated, this is why it is important. You can create it using the",
    "Customer endpoint",
    ". As a result, you will receive the id of the customer that was created in the Yuno DB.",
    "If you have created a customer that is going to pay previously you can skip this step.",
    "Step 2: Create a customer session",
    "To create enrollments, utilize the",
    "customer_session",
    ". Each enrollment requires a new",
    "Customer Session",
    ". By initializing a",
    "customer_session",
    ", you gain access to all available payment methods for enrollment, allowing you to extend these options to your customers.",
    "Initiate a",
    "customer_session",
    "via this endpoint. For its creation, you'll need the customer ID, which was generated when you registered the customer in the Yuno system. This endpoint will then furnish you with a customer session ID, essential for enrolling payment methods.",
    "After completing the above steps, proceed by implementing one of our SDKs to advance the enrollment process.",
    "Step 3: Display payment methods",
    "Query the available payment methods you have enabled via the Yuno integration by making a GET call to the",
    "Retrieve Payment Methods endpoint",
    "using the",
    "customer_session",
    "created in the previous step.",
    "Display the available payment methods retrieved in the last step to the customer. Here the users will select the payment method they want to enroll within your platform and you should create a payment method by making an API request to the",
    "Enroll Payment Method endpoint",
    ", passing in the selected payment method and the customer_session.",
    "By using SDK Lite, the merchant is responsible for displaying the payment methods and capturing the customer's selection.",
    "Step 4: Implement Enrollment Lite SDK",
    "In this step, you will have to initialize Yuno's Enrollment SDK with your API credentials and the checkout session previously created in step two. Below you will find a checklist to initialize the Yuno SDK:",
    "Checklist",
    "Include the library in your project.",
    "Initialize SDK with the public key.",
    "Configure SDK by calling the function",
    "yuno.mountEnrollmentLite",
    "with the desired configuration.",
    "The configuration and mounting are done in the same step for the Enrollment Lite. To do it, use the",
    "yuno.mountEnrollmentLite",
    "Step 5: Vaulted token",
    "After the customer has completed the payment enrollment process, you can receive enrollment result with the",
    "vaulted_token",
    "via a",
    "webhook",
    ". This token can be saved and used for future payments.",
    "On the other hand, if you want to render all the available payment methods regardless of the user, you can just follow the steps in the SDK Lite Payment Experience guideline.",
    "For more detailed information on how to initiate Yuno's SDK please refer to one of the following sections according to the corresponding platform:",
    "Web",
    "iOS",
    "Android"
  ],
  "https://docs.y.uno/docs/secure-fields": [
    "Secure Fields",
    "Suggest Edits",
    "Secure Fields creates a seamless and secure checkout flow on your website or app. With a set of prebuilt UI components available for Web, Android, and iOS, Secure Fields simplifies the process of collecting and tokenizing sensitive payment details.",
    "Streamlined payment process",
    "Secure Fields provides prebuilt UI components for collecting client card information.",
    "The optimized payment form includes fields with automatic formatting and validation as customers type.",
    "Customization and branding",
    "Secure Fields allows you to customize the UI to match your website or app's design.",
    "Custom styling rules give you complete control over the visual appearance.",
    "Maintaining a consistent visual identity reinforces your brand presence and provides a cohesive user interface.",
    "Tailored checkout experience",
    "You can choose which fields to present to customers, creating a tailored payment experience.",
    "Incomplete fields and potential filling errors are highlighted to ensure efficient information submission.",
    "Integration",
    "The integration workflow for the secure fields implementation of the SDK is the same as in the",
    "Lite SDK implementation",
    ". The only difference is that instead of listing cards as another payment method option in a list, before generating the",
    "one_time_token",
    ", you should display the credit card form with the secure fields for the customer to insert the credit card data.",
    "Payment Security",
    "Secure Fields strictly adheres to PCI security standards, eliminating your need to handle sensitive data.",
    "Payment details are tokenized, preventing card information from touching your server.",
    "Tokenization protects against potential data breaches and ensures the security of customers' payment information.",
    "Secure Fields and Yuno UI Components can elevate your checkout experience. Simplify payment collection, enhance security, and create a seamless process that delights your customers.",
    "Choose a platform below to start building your integration",
    "Web",
    "iOS",
    "Android",
    "For more detailed information on initiating Yuno's Secure Fields please refer to our step-by-step guide according to the intengration required,",
    "Payment",
    "or",
    "Enrollment",
    "."
  ],
  "https://docs.y.uno/docs/direct-flow": [
    "Direct Flow",
    "Suggest Edits",
    "How it works",
    "If you are a developer, you can use our Direct Flow to keep using your checkout and connect to our services using only a server-to-server connection.",
    "Your company must be PCI certified to use our server-to-server card payments service. Please forward your AOC certification to your account manager prior to beginning the implementation.",
    "For every implementation, we recommend taking the payment",
    "status",
    "and",
    "sub_status",
    "as the main reference for the",
    "payment's state",
    ". A payment could have different",
    "transactions",
    "associated to it, so by focusing on the payment status/sub_status, you can have the latest state regardless of how many transactions were made, giving you a clear input for decision making. With this integration you can also",
    "enroll credit cards",
    "for future purchases (also only available for PCI compliant merchants).",
    "Payment",
    "Step 1: Create a customer",
    "[Optional] - The fist step of the payment flow is to create a customer. A customer will have payment methods associated, this is why it is important. You can create a customer using the following",
    "endpoint",
    ". As a result you will receive the id of the customer that was created in the Yuno DB. If you have created the customer that is going to pay previously you can skip this step.",
    "This step is optional because you can send the customer information directly in the payment without creating a customer object in Yuno.",
    "Step 2: Create the payment",
    "As you take care of the whole payment experience with this integration, you will need to display the payment methods enabled in your Yuno account, and once the user has selected the payment method you will be able to create a payment. A payment gathers all crucial details regarding the order, customer specifics, total amount, currency, products, shipping details, and more. You can create a Payment using the following",
    "endpoint",
    ".",
    "You can use the",
    "examples section",
    "in the API reference as a reference and in case the user selects a previously enrolled payment method, you can use the vaulted_token returned by the get payment methods service to create the payment.",
    "During the integration, we recommend taking the payment",
    "status",
    "and",
    "sub_status",
    "as the main reference for the payment's state. A payment could have different transactions associated to it, so by focusing on the payment status/sub_status, you can have the latest state regardless of how many transactions were made, giving you a clear input for decision making.",
    "Complementary features",
    "Webhooks",
    ": We also recommend configuring",
    "Webhooks",
    "in your Yuno dashboard. Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno",
    "Enrollment",
    "Step 1: Create a customer",
    "The fist step of the payment flow is to create a customer. A customer will have payment methods associated, this is why it is important. You can create a customer using the following",
    "endpoint",
    ". As a result you will receive the id of the customer that was created in the Yuno DB.",
    "If you have created a customer that will pay previously, you can skip this step.",
    "Step 2: Enroll payment method",
    "This feature is only available for enrolling Cards for PCI compliant merchants",
    "Once you have your customer, you can enroll the payment method by just using the",
    "Enroll Payment Method endpoint",
    ". With the information provided by Yuno after the customer selects the payment method to enroll, you will be able to save that information for future purchases using the",
    "vaulted_token",
    "that represents the payment method object created."
  ],
  "https://docs.y.uno/docs/environments": [
    "Environments",
    "Suggest Edits",
    "Yuno offers a powerful dual environment feature - Test Mode and Live Mode. Test Mode, also known as the Sandbox environment, is designed for testing and experimentation. Live Mode, on the other hand, represents the production environment where your customers will engage with your offerings.",
    "Transitioning to Live Mode within Yuno's dual environment structure empowers your business to thrive in both testing and real-world scenarios. Seamlessly switch between Test Mode and Live Mode using a single set of credentials, all while ensuring the highest level of security and functionality.",
    "This guide will walk you through the process of transitioning from Test Mode to Live Mode, ensuring a seamless and secure experience for your business and customers.",
    "Test Mode vs Live Mode",
    "Yuno has two working environments:",
    "Test Mode (Sandbox):",
    "Upon registration, your organization is assigned an \"Inactive\" status. This status provides access exclusively to Test Mode. It allows you to explore the dashboard's features, learn about its functionalities, and experiment without affecting your live operations.",
    "Live Mode (Production Environment):",
    "To access Live Mode, where real customer interactions occur, you need to initiate a request for activation. Live Mode represents the true production environment where your customers will interact with your business. This environment ensures the utmost security and performance for your operations.",
    "Transitioning to Live Mode",
    "Requesting Activation",
    ": To access Live Mode, submit a request for activation. This request triggers the transition process, and your organization's status will change from \"Inactive\" to \"Under Verification.\"",
    "Verification Process:",
    "Yuno's verification process typically takes only a few hours. During this time, we review the provided information and ensure its accuracy. If any additional information is required, our team will promptly reach out to you.",
    "Access Granted",
    ": Once the verification is complete and Live Mode access is granted, you will enjoy the benefits of both Test and Live Modes within your dashboard account.",
    "Seamlessly Switching Environments",
    "One of the remarkable features of Yuno's dual environment system is the seamless switching between Test Mode and Live Mode:",
    "One single username and password",
    ": You do not need to manage separate usernames or passwords for each environment. With just one set of credentials, you can effortlessly move between Test Mode and Live Mode.",
    "Efficient Navigation:",
    "Within the same session, a single click allows you to switch from one environment to the other, ensuring smooth navigation and ease of access.",
    "Expanding Capabilities with Accounts Management",
    "It is important to note that each account created within your organization enjoys its own separate test environment. For detailed insights into managing accounts and maximizing their potential within Yuno's ecosystem, refer to our comprehensive Accounts Management guide."
  ],
  "https://docs.y.uno/docs/your-payment-operative-system": [
    "Home",
    "Suggest Edits",
    "Yuno’s dashboard offers a user interface that allows you to operate and configure your Yuno accounts. From the dashboard, you can visualize all your payment information, build your checkout, activate smart routing, and more.",
    "You will be able to understand the dashboard architecture, collections, and endpoints with their respective attributes for each of the features that will be exposed.",
    "With a completely unified checkout and payments integration, Yuno lets you consolidate your payments stack and add APIs and tools from across the web to build dynamic end-to-end payment flows."
  ],
  "https://docs.y.uno/docs/developers-credentials": [
    "Developers (Credentials)",
    "Suggest Edits",
    "In the Developers section, you will find your authentication credentials to integrate Yuno. Authentication lies at the heart of every interaction within the Yuno ecosystem. By understanding the structure, distinguishing between Test Mode and Live Mode credentials, and upholding their security, you ensure the smooth and secure flow of operations.",
    "To ensure the utmost security and integrity of your operations, this guide will explain the functionality of authentication credentials and their allocation and offer insights into their significance.",
    "For additional insights and queries, consult our comprehensive documentation or contact our dedicated support team. Your journey with Yuno is fortified by our commitment to security and excellence.",
    "Credential structure",
    "Yuno employs a hierarchical structure of authentication credentials comprising two tiers: Organization Credentials and Account Credentials.",
    "Organization Credentials:",
    "When you register with Yuno, your organization is assigned a set of unique credentials. These credentials serve as the gateway to your overarching operations and grant access to all accounts associated with your organization.",
    "Account Credentials:",
    "Each account within your organization has a distinct set of authentication credentials. These credentials govern access to individual accounts and operate independently between Test Mode and Live Mode.",
    "Accessing your credentials",
    "You can access your authentication credentials in two ways:",
    "Account Management Section",
    ": Within the Yuno dashboard's",
    "Account Management",
    "section, you will find both your organization and account credentials. This centralized location streamlines the management and retrieval process.",
    "Developers Section",
    ":  You can also access your authentication credentials from the",
    "Developers",
    "Section. This area is particularly valuable for integrating Yuno functionalities into your applications or systems.",
    "Safeguarding your credentials",
    "The security of your authentication credentials is paramount. Therefore, treat your credentials as confidential information and safeguard them diligently to prevent unauthorized access.",
    "Immediate Action",
    "If you suspect or detect any exposure of your credentials, please reach out to our support team promptly. Rapid response ensures the integrity of your operations."
  ],
  "https://docs.y.uno/docs/connections": [
    "Connections",
    "Suggest Edits",
    "The Connections section within the dashboard enables users to integrate and manage various providers, including payment methods, payment processors, and anti-fraud solutions. This guide will walk you through the process of adding, creating, and managing connections to enhance your payment processing and routing capabilities.",
    "Adding a Connection",
    "Browse through the list of available providers and select the one you wish to connect to. Providers may include payment methods, processors, and anti-fraud solutions.",
    "After selecting a provider, you will be prompted to provide the required credentials. These credentials are necessary to establish a secure connection. Follow the on-screen instructions to input the relevant information.",
    "A connection will be created once the required credentials are provided and verified. This connection forms the bridge between your Yuno account and the chosen provider.",
    "Move on to the",
    "Routing",
    "section to explore the capabilities that the newly established connection brings. For instance, if you have connected to a provider offering specific payment methods, these methods will be visible in the Routing section. This allows you to configure payment processing routes tailored to those methods.",
    "Managing Connections",
    "Connections can be managed to suit your evolving business needs. These are some actions you can take with your connections:",
    "Editing Connections",
    ": If you need to update the credentials or change a connection's settings, you can easily do so by selecting the",
    "Edit",
    "option. This ensures your information is up-to-date and accurate.",
    "Pausing and Unpausing Connections",
    ": To temporarily halt the interaction with a specific provider, you can choose to",
    "Pause",
    "a connection. When ready to resume, simply",
    "Unpause",
    "it. This flexibility allows you to adapt to changing circumstances.",
    "Deleting Connections",
    ": If a connection is no longer needed, you can delete it. Exercise caution when deleting connections, as this action is irreversible."
  ],
  "https://docs.y.uno/docs/checkout-builder": [
    "Checkout Builder",
    "Suggest Edits",
    "The Checkout Builder feature in the dashboard empowers users to shape their payment checkout process to suit their brand and business needs. This guide will walk you through the process of configuring payment methods, defining their display conditions, and customizing the styling of your checkout and resolution screens.",
    "How Checkout Builder Works",
    "Checkout Builder is designed to offer a seamless and intuitive experience, comprising two main components: Setting Conditions and Setting Styling.",
    "Setting Conditions",
    "In this section, users can explore a variety of payment methods, each with a pre-configured processing route. By enabling or turning on specific payment methods, you can make them available for display at your checkout. In addition, Yuno allows you to take full control over the arrangement of payment methods in your checkout. Through a user-friendly interface, you can easily rearrange the order in which these payment methods appear, ensuring a user-friendly and logical presentation.",
    "You can tailor the display of each enabled payment method to specific conditions and also decide when and how each method appears based on your business requirements. Additionally, you can customize the name, description, and logo of each payment method, enhancing brand consistency.",
    "Setting Styling",
    "With Checkout Builder, you can infuse your brand's identity into the checkout process. Customize the appearance of your checkout and resolution screens effortlessly. Yuno provides step-by-step instructions on how to achieve the desired look without requiring any coding skills.",
    "Exploring your checkout",
    "Use our demo site that allows you to interact with your defined settings and observe how they manifest in the checkout experience. This ensures that you have a clear understanding of how your configurations will be presented to your customers.",
    "Advantages of using Checkout Builder",
    "Customization with no code",
    ": Enjoy the flexibility of tailoring your checkout experience without the need for complex coding. This empowers you to create a checkout process that aligns seamlessly with your brand and business objectives.",
    "Payment method flexibility",
    ": Easily enable, organize, and display the payment methods that best cater to your customer base and market.",
    "Intuitive user interface",
    ": Yuno's interface ensures that configuring payment methods, setting display conditions, and customizing styling are straightforward and efficient tasks.",
    "With Yuno's Checkout Builder, you have the tools at your disposal to shape a checkout experience that mirrors your brand's identity and accommodates your customers' preferences. Empower your business by providing a tailored payment process that reflects your unique offering and style."
  ],
  "https://docs.y.uno/docs/routing": [
    "Routing",
    "Suggest Edits",
    "In case you have selected our Embedded or Semi-lite checkout integrations, once you have set the conditions for when to display a payment method, you can configure the routing of the already enabled payment methods. However, if you have selected our Lite version, you will have all the available payment methods at your disposal to start configuring how to process the payment.",
    "What is dynamic routing?",
    "Dynamic routing is a payment orchestration technique that enhances the payment experience for users while automating the process of increasing approval rates. It involves directing payment transactions to the most suitable payment service provider or acquiring bank based on various factors such as card type, transaction amount, currency, and payment origin.",
    "Why use dynamic routing?",
    "Yuno, through its user-friendly",
    "Merchant Dashboard",
    ", offers a graphical interface for you to configure business rules for payments. Yuno's dynamic routing feature allows you to create personalized payment flows by defining validation and processing services according to your specific requirements. As a result, you can prioritize services that align with your needs, such as those with lower fees or higher approval rates.",
    "By leveraging dynamic routing, you will enjoy several advantages.",
    "Optimization",
    "You can optimize your payment processing strategy in response to market changes, regulatory demands, or other factors. With the ability to quickly adjust routing rules, you can seamlessly switch between PSPs or services, ensuring you will always use the best options for processing transactions.",
    "Reduce costs",
    "Dynamic routing allows you to reduce payment processing fees significantly. By routing transactions through the most cost-effective PSP or service, you can take advantage of lower fees or better exchange rates offered by different providers for specific currencies or transaction types.",
    "Mitigate frauds",
    "You can direct high-risk transactions to specialized fraud prevention providers or PSPs with advanced fraud detection capabilities, minimizing your exposure to fraudulent activities.",
    "Processing speed",
    "Dynamic routing ensures efficient and speedy transaction processing. Directing transactions to the most suitable PSP or service based on transaction volume, processing capacity, or response times can enhance the overall customer experience while reducing the likelihood of transaction failures or delays.",
    "Configuring the dynamic routing",
    "First, access your",
    "Yuno Merchant Dashboard",
    "account and select the option",
    "Routing",
    ". The Routing page separates the payment by",
    "Not published",
    "and",
    "Published",
    ". In the",
    "Not published",
    "tab, you will find the payment methods connected to your account that don’t have a published route.",
    "Choose a payment method and click on",
    "Set up",
    ". Then, the right panel will show up, and you can click on the",
    "Create new route",
    "to start configuring routes.",
    "Name the route you will build.",
    "Use the",
    "Add new condition",
    "button to define the condition that will trigger the payment processing route. You can combine several conditions to narrow the payment usage.",
    "Select and define one or more conditions to narrow the route usage. The conditions available vary depending on the selected payment method.",
    "Add connections to the condition created. You can integrate fraud solutions, processors, and acquirers depending on the payment method.",
    "For each new connection, you can define paths for each possible case (",
    "Succeeded",
    ",",
    "Declined",
    ", and",
    "Error",
    "). New steps can be connected to each case to build a complete routing that meets your demands.",
    "After adding all steps of the payment process route, you can publish it using the",
    "Publish",
    "button, making it available for the respective payment method."
  ],
  "https://docs.y.uno/docs/insights": [
    "Insights",
    "Suggest Edits",
    "With Insights solution, on the Yuno dashboard's solution, you get a unified view of all your payment performance. Insights is a strategic tool that empowers merchants with actionable knowledge for enhanced decision-making. In addition, our platform is easy to use and can be customized to fit your specific needs.",
    "Comprehensive payment overview:",
    "You can have a comprehensive view of your payment landscape, usage patterns, and emerging trends through our insightful analytics. Access all your payment data seamlessly on a single interface. This consolidated platform showcases payment volume, transaction types, payment methods, and customer demographics, giving you a deep understanding of your payments ecosystem.",
    "Using historical data, you can monitor payment performance trends over time, identifying strengths and pinpoint areas for optimization to refine your payment strategies.",
    "Informed decision-making",
    "The available data on insights are divided into two core facets. The volume is aligned with business metrics, and performance addresses operational efficiency. As a result, you can extract valuable data, including:",
    "Overall conversion rates or segmented by payment methods/providers, aiding visualization of top performers.",
    "Detailed insights into declined transactions, uncovering reasons for non-conversion.",
    "Volume checks for a clear grasp of transaction trends.",
    "Empower your choices by utilizing insights to determine optimal payment methods and providers for your business. Rapidly identify anomalies and deviations from established patterns using existing data."
  ],
  "https://docs.y.uno/docs/payments-2": [
    "Payments",
    "Suggest Edits",
    "On the Payments tab on the dashboard, you have access to all payments, transactions, and fraud screenings data from your payments. You can use this section to review any information related to them. In addition, you can use filters to refine your searches and configure and export reports.",
    "The Payments tab is your central hub for all things payments.",
    "Here's a breakdown of what you can do in the Payments tab:",
    "View all of your payments",
    ": This is the default view, showing all your payments, regardless of their status.",
    "Filter your payments",
    ": You can use filters to narrow your search results. For example, you can filter by status, amount, date, or payment method.",
    "Export reports",
    ": Export your payment or transaction data to a CSV file. This is a great way to share your data with others or to use it for analysis.",
    "Review payment information",
    ": You can view detailed information about each payment, including the customer payer's information, payment method, and the transaction timeline associated with the payment.",
    "Track each transaction",
    ": Change to the transactions view to access all transaction information related to your payments.",
    "Check fraud screenings",
    ": Verify potential fraudulent transactions through the dedicated fraud screenings view.",
    "The Payments tab is a powerful tool to help you manage your payments more effectively. Your payment-related tasks are now simplified and more efficient than ever. Take some time to explore the tab and see how it can help you."
  ],
  "https://docs.y.uno/docs/export-data": [
    "Export Data",
    "Suggest Edits",
    "Within the Yuno dashboard's payment section, you can access a robust reporting solution designed to empower merchants with insightful data analysis.",
    "Here's how the Yuno reporting feature benefits you:",
    "Streamlined setup",
    ": Crafting customized reports is effortless, follow these steps:",
    "Set tailored filters to focus on specific payment or transaction data.",
    "Specify the desired date range or utilize the one from your filters.",
    "Select columns for the report. You can opt for defaults, include all, or customize as needed.",
    "Export the report.",
    "Tailored data extraction",
    ": Your reports mirror the filters you've set, ensuring the data aligns precisely with your requirements. Preview the report structure on your dashboard before downloading the associated data.",
    "Time-efficient operation",
    ": Processing might take a moment for larger reports. Yuno keeps you informed, notifying you when your report is ready for download. Meanwhile, you can continue your dashboard activities uninterrupted.",
    "Seamless access",
    ": All generated reports are conveniently listed under the download tab. This means easy reuse and access for future reference.",
    "Using Yuno reports, you can enhance your comprehension of payments and transactions. Boost your ability to make informed decisions by delving into the wealth of data-rich reports readily accessible to you."
  ],
  "https://docs.y.uno/docs/accounts-management": [
    "Accounts Management",
    "Suggest Edits",
    "The Account Management section within the dashboard empowers users with the ability to create, edit, and conveniently organize organizational accounts. It equips you with the agility to manage access, streamline business operations, and uphold security. By creating, customizing, and navigating through multiple accounts, you gain control over your dashboard administration while fostering a seamless and secure environment.",
    "This guide offers a comprehensive overview of how Yuno's account management system operates, showcasing the advantages and functionalities it brings to streamline your business operations.",
    "Yuno Dashboard's account hierarchy",
    "Upon your initial registration with Yuno, you establish your business organization. Each organization is accompanied by a default account. However, Yuno allows you to create multiple accounts within your organization, tailored to your specific requirements.",
    "Advantages of creating multiple accounts",
    "Granular Access Management",
    ": The creation of multiple accounts permits the fine-tuning of access permissions. Each account can represent countries, franchises, business units, or any segmentation you require. This enhances the security and management of your dashboard administration.",
    "Enhanced Security and Privacy",
    ": Each account is equipped with its own distinct team, ensuring that information and administration remain secure and isolated within the boundaries of each account.",
    "Diverse User Roles",
    ": Users can access and engage with multiple accounts, even holding different roles within each. For a deeper understanding of role allocation and management, refer to our dedicated Team and Role Management guides.",
    "Streamlining Your Experience",
    "Bookmarking Favorites",
    ": Users have the ability to mark specific accounts as favorites. This convenient feature ensures that, among multiple accounts, a preferred account is pre-selected by default. This optimized experience enhances navigation and accessibility.",
    "Seamless Switching",
    ": The dashboard's flexibility shines through as users can effortlessly switch between different accounts. This is achieved with just a few clicks, eliminating the need for separate credentials.",
    "Credentials and Account Security",
    "It is crucial to note the following aspects related to credentials and account security:",
    "Organization Credentials",
    ": The same set of organization credentials remains consistent across all accounts within the organization.",
    "Account Authentication Credentials",
    ": Each account possesses its own authentication credentials. Additionally, account authentication credentials differ between test and live modes. For an in-depth exploration, delve into our Authentication Credentials guide."
  ],
  "https://docs.y.uno/docs/teams-and-roles": [
    "Teams and Roles",
    "Suggest Edits",
    "The Teams and Roles Management section within the dashboard unlocks the power of collaborative synergy, enabling you to assemble teams, define roles, and allocate permissions with precision. Yuno's Teams and Roles Management epitomizes the essence of collaborative prowess. By constructing teams, refining roles, and optimizing permissions, you cultivate a dynamic environment primed for seamless teamwork and fortified security.",
    "This guide will navigate you through the intricacies of crafting effective teams, delineating roles, and harnessing the inherent flexibility to enhance your operational efficiency.",
    "Harnessing the power of teams",
    "Building Dynamic Teams",
    ": Yuno empowers you to curate teams with utmost flexibility. These teams can comprise of diverse accounts, offering a holistic approach to collaboration. Notably, a user can participate in multiple account teams, each with distinct roles.",
    "Cross-Account Participation",
    ": The essence of Yuno's Teams Management lies in its cross-account functionality. Users can seamlessly contribute to teams across different accounts, fostering a unified collaborative ecosystem.",
    "Customizable Roles",
    ": Each team member's role is pivotal in defining their scope of influence. Yuno provides a collection of default roles, each delineating specific permissions. This ensures that team members are equipped with the right tools to fulfill their responsibilities.",
    "Constructing your team",
    "Crafting teams is intuitive within Yuno. Follow the on-screen instructions, and send invitations to relevant accounts. Your ability to extend invitations depends on your permissions within the respective accounts. With the requisite permissions, you can effortlessly manage your team. Modify a team member's permissions or revoke their membership to a specific account, ensuring alignment with your evolving objectives.",
    "Team for each account",
    "Please, take into consideration that you will have to create a team for each account you have created.",
    "The dynamics of roles",
    "The division of roles and permissions bolsters the security of your operations. Each team member operates within a defined scope, minimizing the risk of inadvertent breaches. By harnessing Yuno's Teams and Roles Management, your teams are poised to excel. Roles empower individuals with the authority to fulfill their tasks while ensuring a streamlined workflow.",
    "There are two types of roles in Yuno:",
    "Default Roles",
    ": Yuno offers a set of predefined roles, each encapsulating a distinct array of permissions. These default roles serve as a foundation for streamlined team functioning.",
    "Custom Role Creation",
    ": Yuno's prowess extends to crafting custom roles. Tailor permissions to suit your precise requirements, allowing your teams to function optimally while adhering to the principle of least privilege.",
    "There are 5 types of default roles:",
    "Roles",
    "Description",
    "Admin",
    "An Admin user has access to all features in the dashboard.",
    "Agent",
    "An Agent user can view and take actions on payments.",
    "Developer",
    "A Developer user can view and take actions on integrations and webhooks.",
    "Read only",
    "A Read-only user can view all features in the dashboard.",
    "Custodian",
    "Assign this role when you invite Yuno team experts to join your team."
  ],
  "https://docs.y.uno/docs/reconciliations": [
    "Reconciliations",
    "Suggest Edits",
    "Reconciliation is the process of comparing transactions with the documents issued by different providers. It provides information to resolve any discrepancies that have been discovered. In addition, a proper reconciliation process ensures that all processed transactions have been properly settled.",
    "By consuming settlement files from each provider, the reconciliation process constantly compares the intakes with the transactions processed by Yuno. The transactional reconciliation process is executed between the universe of transactions and settlements. This operational process checks account balances with your acquirers to ensure that all sets of records are true, consistent, and up-to-date.",
    "Why reconciliation matters",
    "Discrepancies are not unusual, and many are harmless, but payment time, deposits, and pending transactions can affect the results of all bank accounts. Therefore, businesses can use the reconciliation process to detect and prevent balance errors, identify fraud, and track failed payments.",
    "The main goals of reconciliation are:",
    "Ensure that the merchant will receive all the payments coming from successful transactions processed by Yuno;",
    "Compliance with the payment term agreed between the merchants and the acquirers;",
    "Control of acquisition processing costs and effective processors vs. agreed between the merchant and the previous intervening actors;",
    "Control of transactional integrity and states in the Yuno dashboard;",
    "It's ideal to do it as often as you can (daily), but if that's not possible, you should try to do it weekly or monthly at the very least.",
    "How Yuno facilitates reconciliation",
    "Yuno offers its clients a comprehensive transaction reconciliation process to ensure accreditation, compliance with payment terms, and processing costs associated with their operations. We take care of the orchestration and management of all the data from Yuno, its partners, and merchants to subsequently execute conciliation processes.",
    "Reconciliation status",
    "A transaction can have different classifications according to the reconciliation process. The table below lists and describes the possible status.",
    "Reconciliation Status",
    "Description",
    "RECONCILED",
    "A RECONCILED transaction indicates that it was identified in a settlement from the provider that processed it and will be credited to your bank account.",
    "NOT RECONCILED",
    "A NOT RECONCILED transaction indicates that the transaction is still being identified in a settlement. The sub-status of said reconciliation will indicate whether it is still in the payment term.",
    "CONFLICT",
    "A transaction in CONFLICT in reconciliation indicates that although a counterpart transaction was identified in the settlement, it has some discrepancy with the processed record.",
    "State machine",
    "Deliveries",
    "Yuno provides two types of reports related to reconciliation:",
    "Transaction reconciliation report",
    ": Provides reconciliation status and sub-status columns and reconciliation ID for each transaction processed by Yuno.",
    "Settlement report",
    ":  The settlement report contains all transactions in each bank transfer executed to the merchant’s account by the acquirer, adding reconciliation information."
  ],
  "https://docs.y.uno/docs/reports": [
    "Reports",
    "Suggest Edits",
    "With Yuno reports, you can find entries from transactions in different stages of the Payments lifecycle. The reports service allows you to request and download different reports associated with your operations with Yuno.",
    "To understand all report content with descriptions for all available fields, check the",
    "Reports Fields",
    "section. Below you will find a description of each report type provided by Yuno.",
    "Payment report",
    "The payment report will give you an overview of the payments you processed with Yuno. Information such as the collection status, refunds, or chargebacks associated with a payment will be available in a row.",
    "Transaction report",
    "The transaction report is a detailed file where you can find the breakdown of all your transactions with Yuno. They will be related to a specific payment in a period selected in the report request.",
    "Transaction reconciliation report",
    "The transaction reconciliation report is a comprehensive document that provides a breakdown of all your transactions with Yuno and the result of the reconciliation process against the settlements. This report may be generated with information on transactions processed until the day before the request.",
    "Settlement report",
    "The settlement report will let you know the transactional composition and the fees incurred by each acquirer's payout in your bank accounts. Your financial team can use this report to recognize the composition of each settlement (gross amount, fees, and net amount) but also to perform reconciliation on a transaction level.",
    "Reports relationships",
    "The reports provided by Yuno are related. Below you will find a description of these relations:",
    "Payments and Transactions reports are linked through",
    "payment_id",
    ".",
    "Transactions and settlements are linked via",
    "transaction_id field",
    ".",
    "The transaction reconciliation report has no direct connection with the other three."
  ],
  "https://docs.y.uno/docs/payment-links": [
    "Payment Links",
    "Suggest Edits",
    "The Payment Links section within the dashboard serves as your gateway to effortless and efficient payment collection. This guide walks you through Yuno's payment links solution, highlighting both simplicity and advanced features.",
    "A code-less experience",
    "Craft Payment Links Easily",
    ": You can create payment links tailored to customer preferences without coding.",
    "Simple Setup",
    ": Construct a payment link in a few intuitive steps. Choose a subject for reference, and specify a country, currency, amount, and at least one payment method for rapid link creation.",
    "Start and Expiration Dates",
    ": Enhance payment link utility by setting start and expiration dates. Increase your control by defining the payment window.",
    "Create a payment link",
    "If you are using the dashboard, use the following steps to create a payment link.",
    "Access the",
    "Yuno Merchant Dashboard",
    ".",
    "Navigate to the",
    "Payment links",
    "section.",
    "Click",
    "Create payment link",
    ".",
    "Fill in the necessary payment information.",
    "Share the payment link with your customer.",
    "On the other hand, if you are using the API integration, use the steps below:",
    "(Optional) Create a customer using the",
    "Create Customer",
    "endpoint.",
    "Create the payment link using the",
    "Create Payment Link",
    "endpoint.",
    "Share the payment link with your customer.",
    "The future of payment links",
    "Multiple Payments or One-Time Payment",
    ": Yuno's payment links will allow you to determine whether a link should accept multiple payments or a single transaction.",
    "Enhancing User Experience",
    ": Delight your customers by adding items, services, or causes. This enhanced detail elevates the customer experience by providing a comprehensive view of the order within the payment link checkout.",
    "Airline Ticket Information",
    ": Specifically beneficial for airline businesses, this feature allows the integration of airline ticket information within the payment link checkout, offering a seamless and convenient payment experience.",
    "The advantages of payment links",
    "Yuno's Payment Links bring numerous benefits to the table. They ensure effortless usability by eliminating the need for coding and offering an intuitive interface. The links are highly customizable, aligning with business needs and enhancing customer engagement. Moreover, they provide enhanced control, allowing for the cancellation of links when required. Transaction insights are also crucial, delivering deep visibility into payment activity, successful transactions, and valuable analytics.",
    "Yuno's Payment Links redefine payment collection, streamlining the process while offering advanced features that cater to diverse business scenarios. From swift creation to customizable experiences, Payment Links empower you to enhance customer engagement and streamline your operations.",
    "For detailed insights and inquiries, consult our comprehensive documentation or connect with our dedicated support team."
  ],
  "https://docs.y.uno/docs/security": [
    "Security",
    "Suggest Edits",
    "Within the dashboard, the Security section allows users to ensure the safety of their accounts. This section is dedicated to safeguarding your account and enhancing your overall security. You can explore the tools and features to secure your Yuno journey here.",
    "Yuno's Security solution is your digital defense hub. The tools and features enable you to create a shield against security threats.",
    "Empowering your security",
    "Password management",
    ": Your first line of defense is effective password management. Within the password management page, you can easily update your password, a crucial step in maintaining account security, since regular password changes play a vital role in safeguarding your account.",
    "Multi-factor authentication (MFA)",
    ": This feature adds an extra layer of verification not only during login but also for important actions within the dashboard. MFA ensures your account remains fortified against unauthorized access.",
    "Unlocking Future Enhancements",
    "Yuno is committed to enhancing your security measures beyond password management and MFA by offering advanced security solutions:",
    "Session Management",
    ": Soon, you'll monitor and control active login sessions. Easily log out of any open sessions to ensure utmost security and oversight.",
    "Password Expiration Policies",
    ": Designated team members can set password expiration policies, ensuring ongoing privacy and security.",
    "SAML Group Mappings",
    ": Seamlessly integrate Single Sign-On (SSO) with SAML group mappings, streamlining your login experience.",
    "Login Methods Customization",
    ": Define user access methods like passwords, social sign-ins (Google, Microsoft), and SSO (SAML). Align user entry with your organization's preferences.",
    "Security Best Practices",
    "Ensuring the highest level of security for your Yuno account involves adopting a set of recommended actions. By following these practices, you'll significantly enhance your protection against potential threats.",
    "Regular Audits",
    ": Regularly review and update your password to minimize risks.",
    "Multi-Factor Authentication",
    ": Enable MFA to prevent unauthorized access even if your password is compromised."
  ],
  "https://docs.y.uno/docs/create-payment-basic": [
    "Create Payments",
    "Suggest Edits",
    "On this page, you will find a walk-through guide on creating a payment and the necessary information to accomplish such a task.",
    "Requirements",
    "Before starting following the steps described in this guide, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which are composed by:",
    "public-api-key",
    "private-secrete-key",
    "account_id",
    "Set up your connections",
    "on your Yuno Dashboard account.",
    "Build a route",
    "for the payment method to define how it will be processed.",
    "Configure the checkout builder",
    "to make your connected payments available.",
    "Make sure to complete these requirements before following the create payment guide.",
    "Explore Yuno Postman Collections",
    "Yuno provides",
    "Postman Collections",
    "that you can use to replicate the use cases locally.",
    "Steps summary",
    "The create payment process normally requires finishing the four steps listed below.",
    "Create a customer",
    "Create a checkout session",
    "Create a One-Time Token",
    "Create the payment",
    "Additional steps",
    "Different payment methods, such as with specific wallets or BNPL, \n          or functionalites, such as split payments, may require aditional \n          steps before creating the payment. Yuno provides complementary guides for these situations. \n          Check the",
    "Create payments",
    "page to find them all.",
    "Create a payment",
    "Step 1: Create a customer",
    "Use the",
    "Create Customer",
    "to register the customer info. You will need to provide personal customer information. In addition, you also need to supply the",
    "merchant_customer_id",
    ", a unique identifier for the customer used on your system.",
    "Customer complementary information",
    "When creating a",
    "Customer",
    ", certain information is not required but can improve the user's payment experience if provided. Phone, billing address, and shipping address are examples of not mandatory data you can provide.",
    "If you add optional information, be aware of the required mandatory fields.",
    "At the end of the create a customer process, you will receive an",
    "id",
    ", which identifies the user within the Yuno system. Use the",
    "id",
    "to initialize the checkout.",
    "If you are creating a payment for an existing user who was previously created and already had an",
    "id",
    "you can skip this step.",
    "Step 2: Create a checkout session",
    "With a customer registered, you can create a checkout session. The checkout is when the customer finalizes their order and proceeds to pay for the products or services they wish to acquire. Therefore, at this stage, you will provide information regarding the payment amount and the location where it is being created.",
    "Use the",
    "Create Checkout Session",
    "endpoint. Notice that the",
    "customer_id",
    "required to perform the request is the",
    "id",
    "you received when creating the customer in",
    "Step 1",
    ".",
    "From the request response to the",
    "Create Checkout Session",
    "endpoint, you will receive the",
    "checkout_session",
    "information. It will be used to create the one-time token (OTT) and the payment on the next steps.",
    "Step 3: Create a one-time token (OTT)",
    "An OTT is a unique identifier Yuno generates to protect your customer privacy and security. It serves as an identifier for payments detail and prevents sensitive data from being stored on your servers. Therefore, you can use OTTs to make it simple for your customers to repeat payments without re-entering their payment information, making the process more secure and convenient.",
    "You will always get the OTT from the Yuno SDK on your application. By using Yuno's SDK we take care of every particular scenario that different payment methods could have. This allows us to:",
    "Ask for missing information for the enrolled payment method in case the selected provider in the CARD route needs some additional fields.",
    "Support fraud screening",
    "Support 3DS",
    "You can always use the list",
    "Payment type",
    "to check all available payment types. In the response of the SDK, you will receive the",
    "one-time-token",
    ", which you will use to create the payment.",
    "Testing",
    "Remember that for testing Credit card payments you can set the \"",
    "Yuno Test Payment Gateway",
    "\" as a provider in your Card route.",
    "Step 4: Create a payment",
    "You will create a payment using the endpoint",
    "Create Payment",
    ". With Yuno, you can create payments with several payment methods, using 3DS or split payments. However, this guide focuses on a simple payment without additional authentication, validation, or enrollment requirements. To check guides for each of the mentioned situations, go to the",
    "Create Payments",
    "pages,  where you will find specialized guides.",
    "Below you find a deeper description of how to create a payment.",
    "4.1 Provide the required attributes",
    "Provide customer-related information, including the",
    "checkout_session",
    "from Step 2 through",
    "checkout.session",
    "and",
    "customer_payer",
    "object that contains the",
    "id",
    "from Step 1.",
    "Certain objects are not mandatory when creating a payment. However, if you provide this information, the user’s payment experience will be enhanced. Be aware of the mandatory fields if you wish to provide this information.",
    "4.2 Choose the capture type",
    "Yuno provides two options for payment capture:",
    "Single-step: Authorization and capture are performed simultaneously. You only need to create the payment. The authorization and capture are performed automatically. For the single-step option, you need to send the attribute",
    "capture",
    "as",
    "true",
    "on the request.",
    "Two steps: Authorization and capture are performed at different moments. After creating the payment, you will need to perform an authorization request and a capture request.  if you wish to process the payment in Two Steps, send",
    "capture",
    "as",
    "false",
    "and after creating the payment, use the",
    "Authorize Payment",
    "and the",
    "Capture Authorization",
    "to complete the process.",
    "4.3 Additional features",
    "Yuno also lets you use some additional features that are supported in the basic payment creation process:",
    "vault_on_success",
    ": If your customer uses a credit card to make the payment, we let you enroll that payment method for the customer for future purchase in the same step.",
    "installments",
    ": In case you offer your clients installments for their payments and your chosen processor accepts them, you can send us the amount of installments to create the payment with.",
    "Both fields can be found in the payment_method detail section of the payment.",
    "Step 5: Check the payment status",
    "After performing the request to the",
    "Create Payment",
    ", you can check the payment status by analyzing the",
    "status",
    "and",
    "sub_status",
    "from the response. Check the page",
    "Payment Status",
    "to see all options you can receive in response to the payment creation request.",
    "Depending on the processor and payment method, the status may take some time to update. Therefore, you may need to use endpoints to recover the payment status. To perform this task, you can use the",
    "Retrieve Payment by ID",
    "or",
    "Retrieve Payment by merchant_order_id",
    ". Another option is to use webhooks to receive notifications after each event. Yuno recommends you use webhooks to monitor asynchronous payments better. Check the",
    "Webhooks",
    "guide to learn how to configure the webhooks solution provided by Yuno.",
    "Test Card payments",
    "If you need to test Card payments in general, Yuno provides the Yuno Test Payment Gateway. It works as a connection, however, it is available only in the sandbox environment.",
    "Check the",
    "Yuno Test Payment Gateway page",
    "to learn all functionalities, or go directly to the guide on",
    "how to test card payments",
    "."
  ],
  "https://docs.y.uno/docs/refund-payments": [
    "Refund Payments",
    "Suggest Edits",
    "The payment refund process is the procedure by which you will reimburse a customer for a previous payment. In this guide, you will find instructions on refunding a previously created payment on Yuno.",
    "Requirements",
    "To refund a payment, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which consist of:",
    "public-api-key",
    "private-secrete-key",
    "Have the payment identification data received after creating the payment using the",
    "Create Payment",
    "endpoint and the capture data the capture operation was executed using the",
    "Capture Payment",
    ":",
    "id",
    ": The unique identifier of the payment, obtained from the parameter",
    "id",
    "after creating the payment.",
    "transaction_id",
    ": The unique identifier of the transaction. You will use a different source for this information, depending on how you captured the payment.",
    "If you created and captured the payment using only one operation, you obtain the",
    "transaction_id",
    "from the  parameter",
    "transaction.id",
    "after creating the payment with the",
    "Create Payment",
    "endpoint.",
    "If you performed the authorization and then the payment capture, you will use the",
    "transaction_id",
    "from the  parameter",
    "id",
    "received after capturing the payment using the",
    "Capture Payment",
    "endpoint.",
    "Explore Yuno Postman Collections",
    "Yuno provides",
    "Postman Collections",
    "that you can use to replicate the use cases locally.",
    "Refund a Payment",
    "If you initiate a refund, it will reimburse a charge created earlier but not yet refunded. The amount will be credited back to the original payment method that was charged.",
    "Use the",
    "Refund Payment endpoint",
    "to perform the refund. To identify the payment to be refunded, you need to provide its",
    "id",
    "and the",
    "transaction_id",
    ". In addition, you need to inform the amount to be refunded using the object",
    "amount",
    "on the body request:",
    "Complete refund: Leave the",
    "amount",
    "empty.",
    "Partial refund: Provide the refund value using the parameter",
    "amount",
    ".",
    "To confirm you have successfully refunded the payment, check if the parameters from the",
    "Refund Payment endpoint",
    "response contain the following values:",
    "status = REFUNDED",
    "sub_status = REFUNDED",
    "transaction.type = REFUND",
    "transaction.status = SUCCEEDED",
    "If the response contains the above values, the refund was successful.",
    "How long it takes to process the refund?",
    "Refunds processing time varies depending on the payment type. While in test mode, refunds are processed instantly in the Sandbox environment.",
    "Check the payment status",
    "If, for some reason, you need to confirm the payment refund:",
    "Use the",
    "Retrieve Payment by ID",
    "or",
    "Retrieve Payment by merchant_order_id",
    "to get detailed information about the payment.",
    "Alternatively, set up webhooks to receive notifications for each event. Refer to the",
    "Webhooks",
    "guide to learn how to configure webhooks in Yuno."
  ],
  "https://docs.y.uno/docs/cancel-payments": [
    "Cancel Payments",
    "Suggest Edits",
    "In this guide, you will find step-by-step instructions on canceling a previously created payment on Yuno.",
    "Which payments can you cancel?",
    "Only payments with",
    "PENDING",
    "status can be canceled. Check the",
    "Payment status",
    "page for further details regarding the possible payment status.",
    "Requirements",
    "To cancel a payment, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which consist of:",
    "public-api-key",
    "private-secrete-key",
    "Have the payment identification data received after creating the payment using the",
    "Create Payment endpoint",
    ":",
    "id",
    ": The unique identifier of the payment, obtained from the parameter",
    "id",
    "after creating the payment.",
    "transaction_id",
    ": The unique identifier of the transaction obtained from the parameter",
    "transaction.id",
    "after creating the payment.",
    "Explore Yuno Postman Collections",
    "Yuno provides",
    "Postman Collections",
    "that you can use to replicate the use cases locally.",
    "Cancel a Payment",
    "You can cancel a payment only if it has the PENDING status. Use the",
    "Cancel Payment endpoint",
    "to cancel the payment. To identify the payment to be canceled, you need to provide its",
    "id",
    "and the",
    "transaction_id",
    ".",
    "To confirm you have successfully canceled the payment, check if the parameters from the",
    "Cancel Payment endpoint",
    "response contain the following values:",
    "type = CANCEL",
    "status = SUCCEEDED",
    "payment.status = CANCELED",
    "payment.sub_status = CANCELED",
    "If the response contains the above values, the cancellation was successful.",
    "Check the payment status",
    "If, for some reason, you need to confirm the payment cancelation:",
    "Use the",
    "Retrieve Payment by ID",
    "or",
    "Retrieve Payment by merchant_order_id",
    "to get detailed information about the payment.",
    "Alternatively, set up webhooks to receive notifications for each event. Refer to the",
    "Webhooks",
    "guide to learn how to configure webhooks in Yuno."
  ],
  "https://docs.y.uno/docs/capture-payments": [
    "Capture Payments",
    "Suggest Edits",
    "In this guide, you will find step-by-step instructions on capturing a previously created payment on Yuno.",
    "Which payments can you capture?",
    "Only payments with",
    "PENDING",
    "status can be captured. Check the",
    "Payment status",
    "page for further details regarding the possible payment status.",
    "Requirements",
    "To capture a payment, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which consist of:",
    "public-api-key",
    "private-secrete-key",
    "Have the payment identification data received after creating the payment using the",
    "Create Payment endpoint",
    ":",
    "id",
    ": The unique identifier of the payment, obtained from the parameter",
    "id",
    "after creating the payment.",
    "transaction_id",
    ": The unique identifier of the transaction obtained from the parameter",
    "transaction.id",
    "after creating the payment.",
    "Explore Yuno Postman Collections",
    "Yuno provides",
    "Postman Collections",
    "that you can use to replicate the use cases locally.",
    "Capture a Payment",
    "You can capture a payment only if it has the PENDING status. Use the",
    "Capture Payment endpoint",
    "to capture the payment. To identify the payment to be captured, you need to provide its",
    "id",
    "and the",
    "transaction_id",
    ". In addition, you need to inform the amount to be captured using the object",
    "amount",
    "on the body request:",
    "Complete refund: Leave the amount empty.",
    "Partial refund: Provide the refund value using the parameter",
    "amount",
    ".",
    "To confirm you have successfully captured the payment, check if the parameters from the",
    "Capture Payment",
    "endpoint response contain the following values:",
    "type = CAPTURE",
    "status = SUCCEEDED",
    "payment.status = SUCCEEDED",
    "payment.sub_status = CAPTURED/PARTIALLY_CAPTURED",
    "If the response contains the above values, the capture was successful.",
    "Check the payment status",
    "If, for some reason, you need to confirm the payment cancelation:",
    "Use the",
    "Retrieve Payment by ID",
    "or",
    "Retrieve Payment by merchant_order_id",
    "to get detailed information about the payment.",
    "Alternatively, set up webhooks to receive notifications for each event. Refer to the",
    "Webhooks",
    "guide to learn how to configure webhooks in Yuno."
  ],
  "https://docs.y.uno/docs/build-reports": [
    "Build Reports",
    "Suggest Edits",
    "Yuno reports provides a practical way to acquire information regarding different stages of payments. You can effortlessly request and download various reports associated with your Yuno operations. Yuno provides four types of reports:",
    "Payment",
    "Transaction",
    "Transaction Reconciliation",
    "Settlement",
    "You can check the detailed description for each one by accessing the",
    "Reports page",
    ". The Transaction Reconciliation and Settlement reports provide information related to reconciliation. To examine all fields available on each report and their description, access the",
    "Reports Fields page",
    ".",
    "Requirements",
    "To request a report, you will need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which consist of:",
    "public-api-key",
    "private-secrete-key",
    "Explore Yuno Postman Collections",
    "Yuno provides",
    "Postman Collections",
    "that you can use to replicate the use cases locally.",
    "Steps summary",
    "The process to receive a report when using Yuno is composed of two steps:",
    "Create a Report",
    "Download a Report",
    "Access a report",
    "As shown in the summary of the steps, you need to complete two steps before accessing your report.",
    "Step 1: Create a report",
    "To initiate the report generation process, request Yuno to create the report using the",
    "Create a Report endpoint",
    ". First, select the desired report type (",
    "type",
    "), which will determine the content of the generated report. Secondly, define the date range you wish to incorporate data into the report by setting the parameters",
    "start_date",
    "and",
    "end_date",
    ".",
    "When creating the report, you can filter the added data by specifying the values for some fields. For example, you may want to receive data only related to transactions performed in Argentina and Brazil. In this case, you would provide the",
    "AR,BR",
    "content for the parameter",
    "country",
    ".",
    "You have the option to filter the following fields when creating the report:",
    "payment_status",
    "payment_sub_status",
    "payment_method",
    "currency",
    "country",
    "transaction_type",
    "transaction_status",
    "updated_at_start",
    "updated_at_end",
    "Filter values format",
    "When defining the filter values, provide them in a string value list, such as in the example below:",
    "\"payment_status\": \"CREATED,READY_TO_PAY,DECLINED\"",
    "For Payment or Transaction reports, you also have the option to select the fields included in the final report using the parameter",
    "columns",
    ".",
    "When you use the",
    "Create a Report endpoint",
    "to request a report creation, on the response, you will receive the report",
    "id",
    "and",
    "status",
    ". You will use the",
    "id",
    "when requesting the report download on",
    "Step 3",
    ". The",
    "status",
    "informs if it is ready to download.",
    "Step 2: Check if the report is ready",
    "After requesting the report creation, you can use endpoints",
    "Retrieve a Report",
    "or",
    "List All Reports",
    "to check if it is ready for download. When using the",
    "Retrieve a Report endpoint",
    ", you need to provide the report",
    "id",
    ". On the other hand, with the",
    "List All Reports endpoint",
    ", you need to inform your",
    "account_id",
    "to receive a list of all existing reports and their status.",
    "When the report has the status",
    "SUCCEEDED",
    ", you can request its download. Access the",
    "Report status page",
    "to check all possible report status.",
    "Step 3: Download your report",
    "Use the",
    "Download a Report",
    "to receive your report providing its",
    "id",
    ". You will receive the report in a .zip file. However, for Settlement reports, the API will return a .csv file."
  ],
  "https://docs.y.uno/docs/yuno-sdks": [
    "Yuno SDKs",
    "Suggest Edits",
    "This section introduces Yuno's Software Development Kits (SDKs) and explores their benefits. Whether you're a developer or a business owner, Yuno's SDKs offer powerful tools to enhance your payment processing capabilities and provide a seamless checkout experience for your customers.",
    "What are SDKs?",
    "SDKs are software tools and libraries that enable developers to build applications for specific platforms or systems. In the case of Yuno, our SDKs are designed to streamline payment integrations, making it easier for you to implement secure and efficient checkout solutions into your applications.",
    "Benefits of Yuno's SDKs:",
    "Yuno's SDKs provide a range of benefits that can significantly enhance your payment processing workflows. Some key advantages include:",
    "Simplified Integration",
    ": Our SDKs offer a user-friendly interface and clear documentation, making the integration process quick and straightforward.",
    "Enhanced Security",
    ": Yuno's SDKs incorporate robust security measures to protect sensitive customer data during payment, ensuring a secure transaction environment.",
    "Customizability",
    ": You can customize the SDKs to match your branding and design requirements, providing your customers with a seamless and consistent checkout experience.",
    "Wide Platform Support",
    ": Yuno's SDKs are designed to work across various platforms, including Web, Android, and IOs applications, allowing you to reach a broader audience.",
    "Comprehensive Features",
    ": Each SDK in Yuno's suite offers specific features tailored to different use cases, ensuring you have the right tools to meet your business needs.",
    "Start using Yuno SDKs",
    "Yuno provides customized SDKs for Web, Android, and IOs applications. To check the available solutions available and how to use them, first choose the desired platform:",
    "Web",
    "iOS",
    "Android",
    "Explore the SDK Project Example",
    "Yuno provides an example project of a running application using an SDK. You can access the",
    "project repository",
    "or",
    "download the project",
    ". In addition, you can access the",
    "Create Your First Payment With SDK",
    "guide available in the documentation."
  ],
  "https://docs.y.uno/docs/web-sdk-integrations": [
    "Web SDK Integrations",
    "Suggest Edits",
    "Yuno's Web SDKs provide several features designed to enhance your payment processing capabilities and provide a seamless checkout experience for your customers. In addition, the Web SDKs enable you to customize the user interface.",
    "Integration options",
    "Select one of the user-friendly Web integration options available and kickstart your journey toward efficient payment processing:",
    "Full SDK",
    "Render the payment methods your company has available in the checkout and for user enrollment.",
    "Lite SDK (Payment)",
    "With this option, you control which payment methods will be shown to the user during checkout and\n            enrollment.",
    "Secure Fields (Payment - Enrollment)",
    "Create and customize your own checkout with prebuilt UI components.",
    "Lite SDK (Enrollment)",
    "Simplify the user enrollment of payment methods.",
    "Yuno Web SDK does not support the IE browser.",
    "If you are using Typescript, access the",
    "Yuno repository",
    "to use all interfaces and types available for the Web SDK.",
    "Explore the SDK Project Example",
    "Yuno provides an example project of a running application using an SDK. You can access the",
    "project repository",
    "or",
    "download the project",
    ". In addition, you can access the",
    "Create Your First Payment With SDK",
    "guide available in the documentation."
  ],
  "https://docs.y.uno/docs/full-checkout-sdk": [
    "Full SDK",
    "Suggest Edits",
    "Below, we outline the step-by-step process to enable the full SDK functionalities in your system:",
    "Step 1: Include the library in your project.",
    "Ensure the Yuno SDK file is included in your webpage before closing the  tag. Refer to the example below:",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize SDK with the public key",
    "In your JavaScript application, create an instance of the",
    "Yuno",
    "class by providing a valid",
    "PUBLIC_API_KEY",
    ". Check the",
    "Get your API credentials",
    "guide.",
    "Like the example below, use the initialized class that is attributed to the",
    "yuno",
    "constant.",
    "JavaScript",
    "const",
    "yuno",
    "=",
    "Yuno",
    ".",
    "initialize",
    "(",
    "PUBLIC_API_KEY",
    ")",
    "Step 3: Start the checkout process",
    "You will start the checkout process. To do it, use the function",
    "yuno.startCheckout",
    "and provide the necessary parameters.",
    "The following table lists all required parameters and their descriptions. For optional parameters go to",
    "Complementary Features",
    ".",
    "Parameter",
    "Description",
    "checkoutSession",
    "Refers to the current payment's",
    "checkout session",
    ".",
    "Example: '438413b7-4921-41e4-b8f3-28a5a0141638'",
    "elementSelector",
    "Specifies the HTML element where you want to mount the Yuno SDK. The SDK will be rendered within this element.",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "onLoading",
    "Required to receive notifications about server calls or loading events during the payment process.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "checkoutSession",
    ":",
    "'438413b7-4921-41e4-b8f3-28a5a0141638'",
    ",",
    "elementSelector",
    ":",
    "'#root'",
    ",",
    "countryCode",
    ":",
    "'CO'",
    ",",
    "language",
    ":",
    "'es'",
    ",",
    "onLoading",
    ": (",
    "args",
    ")",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "args",
    ");\n  }",
    "async",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ") {",
    "await",
    "createPayment",
    "({",
    "oneTimeToken",
    ",",
    "checkoutSession",
    "})",
    "yuno",
    ".",
    "continuePayment",
    "()\n  },\n})",
    "Step 4: Mount the SDK",
    "Display the payment methods by using the function",
    "yuno.mountCheckout()",
    "by selecting an HTML element and using a valid CSS selector (",
    "#",
    ",",
    ".",
    ",",
    "[data-*]",
    ")",
    "JavaScript",
    "/**",
    "* Mount checkout in browser DOM",
    "*/",
    "yuno",
    ".",
    "mountCheckout",
    "()",
    "If you want to set a default payment method, use the following code to mount it:",
    "JavaScript",
    "/**",
    "* Mount checkout in browser DOM with a payment method selected by default",
    "* @optional",
    "*/",
    "yuno",
    ".",
    "mountCheckout",
    "({",
    "/**",
    "* Optional, only needed if you would like this method type selected by default",
    "* Can be one of 'BANCOLOMBIA_TRANSFER' | 'PIX' | 'ADDI' | 'NU_PAY' | 'MERCADO_PAGO_CHECKOUT_PRO",
    "*/",
    "paymentMethodType",
    ":",
    "PAYMENT_METHOD_TYPE",
    ",",
    "/**",
    "* Optional",
    "* Vaulted token related to payment method type",
    "*/",
    "vaultedToken",
    ":",
    "VAULTED_TOKEN",
    ",\n})",
    "Step 5: Initiate the payment process",
    "After the user has selected a payment method remember to call",
    "yuno.startPayment()",
    "to initiate the payment flow. Below you will find an example where",
    "yuno.startPayment()",
    "is called when the user clicks on",
    "button-pay",
    ":",
    "JavaScript",
    "const",
    "PayButton",
    "=",
    "document",
    ".",
    "querySelector",
    "(",
    "'#button-pay'",
    ")",
    "PayButton",
    ".",
    "addEventListener",
    "(",
    "'click'",
    ", ()",
    "=>",
    "{",
    "yuno",
    ".",
    "startPayment",
    "()\n})",
    "Step 6: Get the OTT (One Time Token)",
    "Once the customer fills out the requested data in Yuno's payment forms, the SDK provides the OTT. The configuration function",
    "yuno.CreatePayment(oneTimeToken)",
    "is then triggered with the OTT (One Time Token).",
    "JavaScript",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ")",
    "You can also use tokenWithInformation to receive any additional info given by the customer in the checkout such as installments or document type/number.",
    "JavaScript",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ",",
    "tokenWithInformation",
    ")",
    "Important",
    "The merchant is responsible for handling the loader. Yuno offers an option to use our loader; however, the merchant can use their own loader and must make the corresponding configurations.",
    "Step 7: Create the Payment",
    "Once you have completed the steps described before, you can create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue",
    ": We recommend integrating the method",
    "continuePayment",
    "of the SDK after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The API will inform you of this scenario via the field",
    "sdk_action_required",
    "of the response, which will be returned as true. The function",
    "yuno.continuePayment()",
    "will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary.",
    "After this step, you can complete the end-to-end integration by referencing back to the",
    "Step by Step integration of the Full SDK",
    "Complementary Features",
    "In addition to the code examples provided, you can access the",
    "Demo App",
    "for a complete implementation of Yuno SDKs or go directly to the",
    "HTML",
    "and",
    "JavaScript",
    "checkout demos available on GitHub.",
    "Yuno Web SDK provides additional services and configurations you can use to improve customers' experience:",
    "Form loader",
    "Render mode",
    "Card form configurations",
    "Save Card for future payments",
    "Render mode",
    "Text payment form buttons",
    "External Payment Buttons",
    "Persist credit card form to retry payments",
    "Bank Issuer List",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand.",
    "Payment Status",
    ": Update the user about the payment process.",
    "3DS Setup SDK",
    ": Integrate 3DS into your payment flow.",
    "Loader",
    "Control the use of the loader.",
    "Parameter",
    "Description",
    "keepLoader",
    "You can choose whether to hide or show the Yuno loading/spinner page. Enabling this option ensures that the loading component remains displayed until either the hideLoader() or continuePayment() function is called.",
    "The default value is true.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "showLoading",
    ":",
    "true",
    ",\n})",
    "Issuer´s form (bank list)",
    "Parameter",
    "Description",
    "issuersFormEnable",
    "Through this parameter, you can configure the SDK to enable the issuer's form (bank list)",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "issuersFormEnable",
    ":",
    "true",
    ",\n})",
    "Mode of form rendering",
    "Parameter",
    "Description",
    "renderMode",
    "Determine the mode in which the payment forms will be displayed.",
    "-",
    "type",
    ": can be one of",
    "modal",
    "or",
    "element",
    ".",
    "-",
    "elementSelector",
    ": Element where the form will be rendered",
    "* Only needed if",
    "type",
    "is",
    "element",
    ".",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "renderMode",
    ": {",
    "type",
    ":",
    "'modal'",
    ",",
    "elementSelector",
    ":",
    "'#form-element'",
    ",\n  },\n})",
    "Card form configurations",
    "Parameter",
    "Description",
    "card",
    "Define specific settings for the credit card form",
    "-",
    "type",
    ":",
    "step",
    "o",
    "extends",
    "-",
    "styles",
    ": You can edit card form styles. Only you should write css, then it will be injected into the iframe.",
    "-",
    "cardSaveEnable",
    ": Show checkbox for save/enroll card. Default value is false.",
    "-",
    "texts",
    ": Custom texts in Card forms buttons.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "card",
    ": {",
    "type",
    ":",
    "\"extends\"",
    ",",
    "styles",
    ":",
    "''",
    ",",
    "cardSaveEnable",
    ":",
    "false",
    ",",
    "texts",
    ": {}\n  },\n})",
    "Save card for future payments:",
    "In addition, you can display a checkbox for save or enroll cards using",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "Rendering modes",
    "Below you find screenshots presenting the difference between the:",
    "Render modes",
    "modal",
    "and",
    "elements",
    "for the payment method list.",
    "Render modes",
    "step",
    "and",
    "extends",
    "for the credit card form.",
    "Element",
    "Modal",
    "You also can choose one of the render options for the card form,",
    "step",
    "and",
    "extends",
    ":",
    "Extends",
    "Step",
    "Text payment form buttons",
    "Parameter",
    "Description",
    "texts",
    "Provide custom text for payment form buttons to match your application's language or branding.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "texts",
    ": {",
    "customerForm",
    "?",
    ": {",
    "submitButton",
    "?",
    ":",
    "string",
    ";\n    }",
    "paymentOtp",
    "?",
    ": {",
    "sendOtpButton",
    "?",
    ":",
    "string",
    ";\n    }\n  }\n})",
    "External Payment Buttons",
    "Parameter",
    "Description",
    "externalPaymentButtons",
    "Configure external payment buttons, such as  Paypal, Google Pay, or Apple Pay.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "externalPaymentButtons",
    ": {",
    "paypal",
    ": {",
    "elementSelector",
    ":",
    "'#paypal'",
    ",\n    },\n  },\n})",
    "Persist credit card form to retry payments",
    "In case a a transaction is rejected, you can persist the credit card form to retry a payment after the customer has entered the credit card details. In order to do that, you will need to:",
    "Add the following parameter while initializing the SDK to persist the credit card form after the one time use token is created:",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "automaticallyUnmount",
    ":",
    "false",
    ",\n})",
    "In case the transaction is rejected, you will need to:",
    "Execute the method",
    "yuno.notifyError()",
    "to delete the previously entered CVV for the first transaction.",
    "Create a new checkout session and update the SDK with the new one by executing",
    "yuno.updateCheckoutSession(checkoutsession)",
    "Continue with the new checkout and one time use token with the regular payment flow."
  ],
  "https://docs.y.uno/docs/lite-checkout-sdk": [
    "Lite SDK (Payment)",
    "Suggest Edits",
    "This page outlines the step-by-step process to enable the Lite SDK functionalities in your system.",
    "Step 1: Include the library in your project.",
    "Ensure the Yuno SDK file is included in your webpage before closing the",
    "<body>",
    "tag. Refer to the example below:",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize SDK with the public key",
    "In your JavaScript application, create an instance of the",
    "Yuno",
    "class by providing a valid",
    "PUBLIC_API_KEY",
    ". Check the",
    "Get your API credentials",
    "guide.",
    "Like the example below, use the initialized class that is attributed to the",
    "yuno",
    "constant.",
    "JavaScript",
    "const",
    "yuno",
    "=",
    "Yuno",
    ".",
    "initialize",
    "(",
    "PUBLIC_API_KEY",
    ")",
    "Step 3: Start the checkout process",
    "You will start the checkout process. To do it, use the",
    "yuno.startCheckout",
    "function and provide the necessary parameters.",
    "The following table lists all required parameters and their descriptions. For optional parameters, go to",
    "Complementary Features",
    ".",
    "Parameter",
    "Description",
    "checkoutSession",
    "Refers to the current payment's",
    "checkout session",
    ".",
    "Example: '438413b7-4921-41e4-b8f3-28a5a0141638'",
    "elementSelector",
    "Specifies the HTML element where you want to mount the Yuno SDK. The SDK will be rendered within this element.",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "onLoading",
    "Required to receive notifications about server calls or loading events during the payment process.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "checkoutSession",
    ":",
    "'438413b7-4921-41e4-b8f3-28a5a0141638'",
    ",",
    "elementSelector",
    ":",
    "'#root'",
    ",",
    "countryCode",
    ":",
    "'CO'",
    ",",
    "language",
    ":",
    "'es'",
    ",",
    "onLoading",
    ": (",
    "args",
    ")",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "args",
    ");\n  }",
    "async",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ") {",
    "await",
    "createPayment",
    "({",
    "oneTimeToken",
    ",",
    "checkoutSession",
    "})",
    "yuno",
    ".",
    "continuePayment",
    "()\n  },\n})",
    "Customer and merchant-initiated transactions",
    "Payments can be initiated by the customer (CIT) or by the merchant (MIT). You find more information about their characteristics in",
    "Stored credentials",
    ".",
    "The step-by-step presented on this page refers to a customer-initiated transaction without the recurrence option. Typically, it's used in one-time online purchases, in-store purchases, ATM withdrawals, etc.",
    "To learn how to use the Lite SDK to perform MIT operations, access the",
    "Merchant-initiated transactions",
    "page.",
    "Step 4: Mount the SDK",
    "Display the payment methods by using the",
    "yuno.mountCheckoutLite()",
    "function by selecting an HTML element and using a valid CSS selector (",
    "#",
    ",",
    ".",
    ",",
    "[data-*]",
    ").",
    "JavaScript",
    "yuno",
    ".",
    "mountCheckoutLite",
    "({",
    "/**",
    "* can be one of 'BANCOLOMBIA_TRANSFER' | 'PIX' | 'ADDI' | 'NU_PAY' | 'MERCADO_PAGO_CHECKOUT_PRO | CARD",
    "*/",
    "paymentMethodType",
    ":",
    "PAYMENT_METHOD_TYPE",
    ",",
    "/**",
    "* Vaulted token related to payment method type.",
    "* Only if you already have it",
    "* @optional",
    "*/",
    "vaultedToken",
    ":",
    "VAULTED_TOKEN",
    ",\n})",
    "After mounting the SDK, the selected payment method flow will start automatically.",
    "Step 5: Initiate the payment process",
    "After the user has selected a payment method, remember to call",
    "yuno.startPayment()",
    "to initiate the payment flow. Below you will find an example where",
    "yuno.startPayment()",
    "is called when the user clicks on",
    "button-pay",
    ":",
    "JavaScript",
    "const",
    "PayButton",
    "=",
    "document",
    ".",
    "querySelector",
    "(",
    "'#button-pay'",
    ")",
    "PayButton",
    ".",
    "addEventListener",
    "(",
    "'click'",
    ", ()",
    "=>",
    "{",
    "yuno",
    ".",
    "startPayment",
    "()\n})",
    "Step 6: Get the OTT (One Time Token)",
    "Once the customer fills out the requested data in Yuno's payment forms, the SDK provides the OTT. The configuration function",
    "yunoCreatePayment(oneTimeToken)",
    "is then triggered with the OTT (One Time Token).",
    "JavaScript",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ")",
    "You can also use",
    "tokenWithInformation",
    "to receive any additional info the customer gives in the checkout, such as installments or document type/number.",
    "JavaScript",
    "yunoCreatePayment",
    "(",
    "oneTimeToken",
    ",",
    "tokenWithInformation",
    ")",
    "Important",
    "The merchant is responsible for handling the loader. Yuno offers an option to use our loader; however, the merchant can use their own loader and must make the corresponding configurations.",
    "Step 7: Create the Payment",
    "Once you have completed the steps described before, you will be able to create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue method",
    "Yuno recommends you integrate the",
    "continuePayment",
    "method of the SDK after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The API will inform you of this scenario via the",
    "sdk_action_required",
    "field of the response, which will be returned as true. The",
    "yuno.continuePayment()",
    "function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary.",
    "Demo App",
    "In addition to the code examples provided, you can access the",
    "Demo App",
    "for a complete implementation of Yuno SDKs or go directly to the",
    "HTML",
    "and",
    "JavaScript",
    "checkout demos available on GitHub.",
    "What's next?",
    "Learn how to execute",
    "MIT using the Lite SDK",
    ", or for additional configurations from the Lite SDK, access",
    "Complementary Features",
    ". You can also access other functions available on the Yuno Web SDK:",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand.",
    "Payment Status",
    ": Update the user about the payment process.",
    "3DS Setup SDK",
    ": Integrate 3DS into your payment flow."
  ],
  "https://docs.y.uno/docs/lite-sdk-merchant-initiated-transactions": [
    "Merchant-initiated transactions",
    "Suggest Edits",
    "You can perform MIT using the Lite SDK. The steps to execute the payment depend on two factors:",
    "Whether you are dealing with a",
    "subscription",
    "or an",
    "unscheduled payment",
    ".",
    "Whether it's the first time the payment method, such as the card, is being used or it was used before.",
    "Subscription",
    "If you need to create payments for a subscription, first, you need to create a subscription plan using the",
    "Create Subscription",
    "endpoint. When you create the subscription plan, you define characteristics such as the frequency and the amount of payments.",
    "First payment",
    "After creating the subscription, you must collect your client's payment information data to execute the first payment. In this case, you will follow the step-by-step process previously presented in",
    "Lite SDK (Payment)",
    ". In Step 7, you will save the card data using the",
    "vault_on_success",
    "feature. In this scenario, when",
    "creating the payment",
    "in Step 7, you need to inform",
    "reason = SUBSCRIPTION",
    "and",
    "usage = FIRST",
    ". Access",
    "stored credentials",
    "for more information.",
    "However, if you have enrolled in a payment method previously using the",
    "Lite SDK (Enrollment)",
    ", you can skip the collection of payment method information. In this scenario, after finishing Step 3 of",
    "Lite SDK (Payment)",
    "and creating the subscription plan, you need to retrieve the payment method information using the",
    "Retrieve Enrolled Payment Methods",
    "to get the",
    "vaulted_token",
    "from the chosen payment method. Then, you can jump to Step 7 to create the payment. When",
    "creating the payment",
    "in Step 7, you need to inform",
    "reason = SUBSCRIPTION",
    "and",
    "usage = FIRST",
    ", if it's the first time using the payment method, or",
    "usage = USED",
    "if it was used before. Access",
    "stored credentials",
    "for more information.",
    "Subsequent payments",
    "From the second payment onwards, you don't need to follow all the steps presented in",
    "Lite SDK (Payment)",
    ". Since it's an operation that only depends on the backend execution, you can skip Steps 1 and 2 and execute all operations using Yuno API endpoints. To execute the payment, you will need to follow the steps:",
    "Create checkout session",
    ".",
    "Retrieve the enrolled payment method",
    "to get the",
    "vaulted_token",
    "from the chosen payment method.",
    "Create the payment",
    ". In this step, you need to inform",
    "reason = SUBSCRIPTION",
    "and",
    "usage = USED",
    ". For more information, access",
    "stored credentials",
    ".",
    "Unscheduled payment",
    "In unscheduled payments, no subscription plans are required. The merchant initiates the transaction without the client's interference using a card token created in previous operations.",
    "If you have the card token (",
    "vaulted_token",
    "), you can execute the payment without interaction with the client and using only the Yuno API endpoints. To execute the payment, follow the steps below:",
    "Create checkout session",
    ".",
    "Retrieve the enrolled payment method",
    "to get the",
    "vaulted_token",
    "from the chosen payment method.",
    "Create the payment",
    ". In this step, you need to inform",
    "reason = UNSCHEDULED_CARD_ON_FILE",
    "and",
    "usage = FIRST",
    ", if it's the first time using the payment method, or",
    "usage = USED",
    "if it was used before. Access",
    "stored credentials",
    "for more information.",
    "If you don't have access to the card token, you can:",
    "Follow the step-by-step presented in",
    "Lite SDK (Payment)",
    ", but you need to inform",
    "reason = UNSCHEDULED_CARD_ON_FILE",
    "in Step 7.",
    "First, execute the payment method enrollment using the",
    "Lite SDK (Enrollment)",
    ", and then execute the three steps described for the unscheduled payment."
  ],
  "https://docs.y.uno/docs/lite-sdk-complementary-features": [
    "Complementary features",
    "Suggest Edits",
    "Yuno Web SDK provides additional services and configurations you can use to improve customers' experience:",
    "Form loader",
    "Bank Issuer List",
    "Render mode",
    "Card form configurations",
    "Save Card for future payments",
    "Render mode",
    "Text payment form buttons",
    "Persist credit card form to retry payments",
    "Loader",
    "Control the use of the",
    "loader",
    ".",
    "Parameter",
    "Description",
    "keepLoader",
    "You can hide or show the Yuno loading/spinner page. Enabling this option ensures that the loading component remains displayed until either the",
    "hideLoader()",
    "or",
    "continuePayment()",
    "function is called.",
    "The default value is true.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "showLoading",
    ":",
    "true",
    ",\n})",
    "Form of the issuer",
    "Parameter",
    "Description",
    "issuersFormEnable",
    "Through this parameter, you can configure the SDK to enable the issuer's form (bank list)",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "issuersFormEnable",
    ":",
    "true",
    ",\n})",
    "Mode of form rendering",
    "Parameter",
    "Description",
    "renderMode",
    "Determine the mode in which the payment forms will be displayed.",
    "-",
    "type",
    ": can be one of",
    "modal",
    "or",
    "element",
    ".",
    "-",
    "elementSelector",
    ": Element where the form will be rendered",
    "* Only needed if",
    "type",
    "is",
    "element",
    ".",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "renderMode",
    ": {",
    "type",
    ":",
    "'modal'",
    ",",
    "elementSelector",
    ":",
    "'#form-element'",
    ",\n  },\n})",
    "Card form configurations",
    "Parameter",
    "Description",
    "card",
    "Define specific settings for the credit card form",
    "-",
    "type",
    ":",
    "step",
    "o",
    "extends",
    "-",
    "styles",
    ": You can edit card form styles. Only you should write css, then it will be injected into the iframe.",
    "-",
    "cardSaveEnable",
    ": Show checkbox for save/enroll card. The default value is false.",
    "-",
    "texts",
    ": Custom texts in Card forms buttons.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "card",
    ": {",
    "type",
    ":",
    "\"extends\"",
    ",",
    "styles",
    ":",
    "''",
    ",",
    "cardSaveEnable",
    ":",
    "false",
    ",",
    "texts",
    ": {}\n  },\n})",
    "Save card for future payments",
    "In addition, you can display a checkbox for saving or enrolling cards using the",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "Rendering modes",
    "Below you find screenshots presenting the difference between the following:",
    "Render modes",
    "modal",
    "and",
    "elements",
    "for the payment method list.",
    "Render modes",
    "step",
    "and",
    "extends",
    "for the credit card form.",
    "Element",
    "Modal",
    "You also can choose one of the render options for the card form,",
    "step",
    "and",
    "extends",
    ":",
    "Extends",
    "Step",
    "Text payment form buttons",
    "Parameter",
    "Description",
    "texts",
    "Provide custom text for payment form buttons to match your application's language or branding.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "texts",
    ": {",
    "customerForm",
    "?",
    ": {",
    "submitButton",
    "?",
    ":",
    "string",
    ";\n    }",
    "paymentOtp",
    "?",
    ": {",
    "sendOtpButton",
    "?",
    ":",
    "string",
    ";\n    }\n  }\n})",
    "Persist credit card form to retry payments",
    "If a transaction is rejected, you can use the credit card form to retry a payment after the customer has entered the credit card details. To do that, you will need to:",
    "Add the following parameter while initializing the SDK to persist the credit card form after the one-time use token is created:",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "automaticallyUnmount",
    ":",
    "false",
    ",\n})",
    "In case the transaction is rejected, you will need to:",
    "Execute the method",
    "yuno.notifyError()",
    "to delete the previously entered CVV for the first transaction.",
    "Create a new checkout session and update the SDK with the new one by executing",
    "yuno.updateCheckoutSession(checkoutsession)",
    "Continue with the new checkout and one-time use token with the regular payment flow."
  ],
  "https://docs.y.uno/docs/enrollment-lite-sdk": [
    "Lite SDK (Enrollment)",
    "Suggest Edits",
    "To enable Enrollment Lite functionality, the first step is to make sure to include the Yuno SDK file in your webpage before closing the",
    "<body>",
    ". See an example below:",
    "Step 1: Include the library in your project.",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize secure fields with the public key",
    "In your JavaScript application, create an instance of the",
    "Yuno",
    "class by providing a valid",
    "PUBLIC_API_KEY",
    ". Check the",
    "Get your API credentials",
    "guide if you do not have your credentials. In the example below, the initialized class is attributed to the",
    "yuno",
    "constant.",
    "JavaScript",
    "const",
    "yuno",
    "=",
    "Yuno",
    ".",
    "initialize",
    "(",
    "PUBLIC_API_KEY",
    ")",
    "Step 3: Create a customer session and an enrollment payment method object",
    "Before continuing with the process, you will need to create a",
    "customer session",
    "and a",
    "payment method object",
    "to use in the setup of your SDK Lite integration for enrollment. While creating the payment method object, you will need to define which one is going to be available for your customer to enroll (in the case of SDK Lite, only CARD is available).",
    "Verify",
    "In case you want to verify cards (zero value authorization) before the enrollment,\n          you can complete the",
    "verify",
    "struct while defining the\n          payment method object for the customer session.",
    "Step 4: Mount the enrollment lite",
    "The configuration and mounting are done in the same step for the Enrollment Lite. To do it, use the",
    "yuno.mountEnrollmentLite",
    "function and provide the necessary parameters. The following table lists all parameters and their descriptions.",
    "Parameter",
    "Description",
    "customerSession",
    "Refers to the current payment's",
    "customer session",
    ".",
    "Example: 'e15648b0-fcd5-4799-a14c-cc463ae8a133'",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "showLoading",
    "Control the visibility of the Yuno loading/spinner page during the payment process.",
    "onLoading",
    "Required to receive notifications about server calls or loading events during the payment process.",
    "renderMode",
    "Determine the mode in which the payment forms will be displayed.",
    "elementSelector",
    "Specifies the HTML element where you want to mount the Yuno SDK. The SDK will be rendered within this element.",
    "card",
    "Define specific settings for the credit card form.",
    "yunoEnrollmentStatus",
    "Define a call back to run after the enrollment process ends. It is called with",
    "vaultedToken",
    "and",
    "status",
    "parameters. The",
    "status",
    "returned can be one of:",
    "▪️",
    "CREATED",
    ": It is an initial and transitory state, only indicating that it is created and updated to another state.",
    "▪️",
    "EXPIRED",
    ": For asynchronous enrollments, such as MercadoPago, where the user has to take an action externally, and may never do so.",
    "▪️",
    "REJECTED",
    ": We reject it from our side. It may be because they entered incorrect Yuno credentials or are sending some data incorrectly.",
    "▪️",
    "READY_TO_ENROLL",
    ": It follows",
    "CREATED",
    "if everything is okay, indicating that the enrollment has started.",
    "▪️",
    "ENROLL_IN_PROCESS",
    ": For asynchronous enrollments, like MercadoPago, where the user has to take an action externally. It indicates that the user is performing the action.",
    "▪️",
    "UNENROLL_IN_PROCESS",
    ": For asynchronous unenrollments, in case the provider has an asynchronous response. Currently, there are none.",
    "▪️",
    "ENROLLED",
    ": Successfully enrolled.",
    "▪️",
    "DECLINED",
    ": The provider declined the enrollment. Does not include cards.",
    "▪️",
    "CANCELED",
    ": The enrollment flow is canceled halfway.",
    "▪️",
    "ERROR",
    ": There was an ERROR in the service or credentials.",
    "▪️",
    "UNENROLLED",
    ": The previously enrolled payment method has been unenrolled.",
    "issuersFormEnable",
    "Enable the issuer's form (bank list).",
    "texts",
    "Provide custom text for payment form buttons to match your application's language or branding.",
    "externalPaymentButtons",
    "Configure external payment buttons like Paypal, Google Pay, or Apple Pay.",
    "The next code block presents an example of the Enrollment Lite parameter configuration and mounting.",
    "JavaScript",
    "yuno",
    ".",
    "mountEnrollmentLite",
    "({",
    "customerSession",
    ":",
    "'e15648b0-fcd5-4799-a14c-cc463ae8a133'",
    ",",
    "/**",
    "* country can be one of CO, BR, CL, PE, EC, UR, MX",
    "*/",
    "countryCode",
    ":",
    "country",
    ",",
    "/**",
    "* Language can be one of es, en, pt",
    "* Default is browser language",
    "*/",
    "language",
    ":",
    "'es'",
    ",",
    "/**",
    "* Hide or show the Yuno loading/spinner page",
    "* Default is true",
    "* @optional",
    "*/",
    "showLoading",
    ":",
    "true",
    ",",
    "/**",
    "* Required if you'd like to be informed if there is a server call",
    "* @param { isLoading: boolean, type: 'DOCUMENT' | 'ONE_TIME_TOKEN'  } data",
    "* @optional",
    "*/",
    "onLoading",
    ": (",
    "args",
    ")",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "args",
    ");\n  }",
    "/**",
    "* Where the forms will be shown",
    "* Default { type: 'modal' }",
    "* @optional",
    "*/",
    "renderMode",
    ": {",
    "/**",
    "* Type can be one of `modal` or `element`",
    "* Default modal",
    "*/",
    "type",
    ":",
    "'modal'",
    ",",
    "/**",
    "* Element where the form will be rendered",
    "* Only needed if type is element",
    "*/",
    "elementSelector",
    ":",
    "'#form-element'",
    ",\n  },",
    "/**",
    "*  API card",
    "*  @optional",
    "*/",
    "card",
    ": {",
    "/**",
    "* Mode render card can be step or extends",
    "* Default extends",
    "*/",
    "type",
    ":",
    "\"extends\"",
    ",",
    "/**",
    "* You can edit card form styles",
    "* Only you should write css, then it will be injected into the iframe",
    "* Example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-front-side-card__name-label {",
    "*    color: red !important;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "''",
    ",",
    "/**",
    "* Show checkbox for save/enroll card",
    "* Default is false",
    "*/",
    "cardSaveEnable",
    ":",
    "false",
    ",",
    "/**",
    "* Custom texts in Card forms buttons",
    "* Example:",
    "*",
    "*  texts: {",
    "*    cardForm?: {",
    "*      enrollmentSubmitButton?: string;",
    "*       paymentSubmitButton?: string;",
    "*     }",
    "*     cardStepper?: {",
    "*       numberCardStep?: {",
    "*         nextButton?: string;",
    "*       },",
    "*       cardHolderNameStep?: {",
    "*         prevButton?: string;",
    "*         nextButton?: string;",
    "*       },",
    "*       expirationDateStep?: {",
    "*         prevButton?: string;",
    "*         nextButton?: string;",
    "*       },",
    "*       cvvStep?: {",
    "*         prevButton?: string;",
    "*         nextButton?: string;",
    "*       }",
    "*     }",
    "*  }",
    "*/",
    "texts",
    ": {},",
    "/**",
    "* Hide or show the document fields into card form",
    "* Default is true",
    "* @optional",
    "*/",
    "documentEnable",
    ":",
    "true",
    ",\n  },",
    "/**",
    "* Call back is called with the following object",
    "* @param {{",
    "*  status: 'CREATED'",
    "*    | 'EXPIRED',",
    "*    | 'REJECTED',",
    "*    | 'READY_TO_ENROLL',",
    "*    | 'ENROLL_IN_PROCESS',",
    "*    | 'UNENROLL_IN_PROCESS',",
    "*    | 'ENROLLED',",
    "*    | 'DECLINED',",
    "*    | 'CANCELED',",
    "*    | 'ERROR',",
    "*    | 'UNENROLLED',",
    "*  vaultedToken: string,",
    "* }}",
    "*/",
    "yunoEnrollmentStatus",
    ": ({",
    "status",
    ",",
    "vaultedToken",
    "})",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'status'",
    ", {",
    "status",
    ",",
    "vaultedToken",
    "})\n  },",
    "/**",
    "* If this is called the SDK should be mounted again",
    "* @param { error: 'CANCELED_BY_USER' | any }",
    "* @optional",
    "*/",
    "yunoError",
    ": (",
    "error",
    ")",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'There was an error'",
    ",",
    "error",
    ")\n  },\n});",
    "Complementary Features",
    "In addition to the code examples provided, you can access the",
    "Demo App",
    "for a complete implementation of Yuno SDKs or go directly to the",
    "HTML",
    "and",
    "JavaScript",
    "checkout demos available on GitHub.",
    "Yuno Web SDK provides additional services and configurations you can use to improve customers' experience:",
    "Loader",
    ": Control the use of the loader.",
    "Parameter",
    "Description",
    "keepLoader",
    "You can choose whether to hide or show the Yuno loading/spinner page. Enabling this option ensures that the loading component remains displayed until either the hideLoader() or continuePayment() function is called.",
    "The default value is true.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "showLoading",
    ":",
    "true",
    ",\n})",
    "Mode of form rendering",
    "Parameter",
    "Description",
    "renderMode",
    "Determine the mode in which the payment forms will be displayed.",
    "-",
    "type",
    ": can be one of",
    "modal",
    "or",
    "element",
    ".",
    "-",
    "elementSelector",
    ": Element where the form will be rendered",
    "* Only needed if",
    "type",
    "is",
    "element",
    ".",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "renderMode",
    ": {",
    "type",
    ":",
    "'modal'",
    ",",
    "elementSelector",
    ":",
    "'#form-element'",
    ",\n  },\n})",
    "Card form configurations",
    "Parameter",
    "Description",
    "card",
    "Define specific settings for the credit card form",
    "-",
    "type",
    ":",
    "step",
    "o",
    "extends",
    "-",
    "styles",
    ": You can edit card form styles. Only you should write css, then it will be injected into the iframe.",
    "-",
    "texts",
    ": Custom texts in Card forms buttons.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "card",
    ": {",
    "type",
    ":",
    "\"extends\"",
    ",",
    "styles",
    ":",
    "''",
    ",",
    "cardSaveEnable",
    ":",
    "false",
    ",",
    "texts",
    ": {}\n  },\n})",
    "Rendering modes",
    ": Below you find screenshots presenting the difference between the:",
    "Render modes",
    "modal",
    "and",
    "elements",
    "for the payment method list.",
    "Render modes",
    "step",
    "and",
    "extends",
    "for the credit card form.",
    "Element",
    "Modal",
    "You also can choose one of the render options for the card form,",
    "step",
    "and",
    "extends",
    ":",
    "Extends",
    "Step",
    "Text payment form buttons",
    "Parameter",
    "Description",
    "texts",
    "Provide custom text for payment form buttons to match your application's language or branding.",
    "JavaScript",
    "yuno",
    ".",
    "startCheckout",
    "({",
    "texts",
    ": {",
    "customerForm",
    "?",
    ": {",
    "submitButton",
    "?",
    ":",
    "string",
    ";\n    }",
    "paymentOtp",
    "?",
    ": {",
    "sendOtpButton",
    "?",
    ":",
    "string",
    ";\n    }\n  }\n})",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/secure-fields-payment": [
    "Secure Fields (Payment)",
    "Suggest Edits",
    "Below, we outline the step-by-step process to enable the Secure Fields checkout functionalities in your system:",
    "Step 1: Include the library in your project.",
    "The first step is to make sure to include the Yuno SDK file in your webpage before closing the",
    "<body>",
    "tag. See the example below:",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize secure fields with the public key",
    "In your JavaScript application, create an instance of the",
    "Yuno",
    "class by providing a valid",
    "PUBLIC_API_KEY",
    ". Check the",
    "Get your API credentials",
    "guide.",
    "Like the example below, use the initialized class that is attributed to the",
    "yuno",
    "constant.",
    "JavaScript",
    "const",
    "yuno",
    "=",
    "Yuno",
    ".",
    "initialize",
    "(",
    "PUBLIC_API_KEY",
    ")",
    "Step 3: Start the checkout process",
    "You will start the checkout process. To do it, use the",
    "secureFields",
    "function and provide the necessary configuration parameters.",
    "The essential parameters are the",
    "countryCode",
    ", which determines the country for which the payment process is configured, and",
    "checkoutSession",
    ", which refers to the current payment's checkout session.  The next code block presents an example of the parameter configuration.",
    "The following table lists all required parameters and their descriptions.",
    "Parameter",
    "Description",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "checkoutSession",
    "Refers to the current payment's",
    "checkout session",
    ".",
    "Example: '438413b7-4921-41e4-b8f3-28a5a0141638'",
    "installmentsEnable",
    "This parameter is optional and is set false by default. If set True, the installments set for the account will be shown as a secure field.",
    "JavaScript",
    "const",
    "secureFields",
    "=",
    "yuno",
    ".",
    "secureFields",
    "({",
    "/**",
    "* country can be one of CO, BR, CL, PE, EC, UR, MX",
    "*/",
    "countryCode",
    ":",
    "country",
    ",",
    "/**",
    "* Should be added her or in the token generation",
    "* @optional",
    "*/",
    "checkoutSession",
    ",",
    "installmentEnable",
    ":",
    "false",
    ",\n  })",
    "Step 4: Mount the Secure Fields",
    "After defining the parameters, you will define, configure, and mount the Secure Fields. For each Secure Field, you need to define the",
    "name",
    "and",
    "options",
    "when creating it with the",
    "secureFields.create",
    "function.",
    "The table below presents all configurations available:",
    "Parameters",
    "Description",
    "name",
    "The available names for field names are",
    "cvv",
    ",",
    "pan",
    ", or",
    "expiration",
    ".",
    "options.placeholder",
    "Default placeholder for the field.",
    "options.styles",
    "Additional CSS styles for the current field.",
    "options.label",
    "Field visible label.",
    "options.showError",
    "Defines if errors will be shown. Available options are",
    "true",
    "and",
    "false",
    ".",
    "options.onChange",
    "An auxiliary function that can be configured and will run when the field content changes. Indicates if the fields have errors or additional data.",
    "options.onBlur",
    "An auxiliary function that can be configured and will run when blurring from the input.",
    "options.onFocus",
    "An auxiliary function that can be configured and will run when focussing on the input.",
    "options.errorMessage",
    "This allows for the definition of the field's error message.",
    "Once you have set the parameter, you will render the created Secure Field with the",
    "render",
    "function by selecting an HTML element using a valid CSS selector (",
    "#",
    ",",
    ".",
    ",",
    "[data-*]",
    ").",
    "The next code block presents an example of the parameter configuration for three Secure Fields, and as they are mounted, the fields are presented to the user.",
    "JavaScript",
    "/**",
    "* interface SecureField {",
    "*  render(elementSelector: string): void",
    "*",
    "*  clearValue(): void",
    "*",
    "*  setError(errorMessage: string): void",
    "*",
    "*  updateProps(args: Record<string, unknown>): void",
    "*",
    "*  focus(): void",
    "*",
    "*  validate(): void",
    "*",
    "*  unmountSync(): Promise<void>",
    "* }",
    "*/",
    "const",
    "secureNumber",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "name",
    ":",
    "'pan'",
    ",",
    "options",
    ": {",
    "placeholder",
    ":",
    "'0000 0000 0000 0000'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'Card Number'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "errorMessage",
    ":",
    "\"Custom Error\"",
    ",",
    "onChange",
    ": ({",
    "error",
    ",",
    "data",
    "})",
    "=>",
    "{",
    "/**",
    "* in data.installments you could receive an installments plan list information",
    "regarding the installments plan set for your account and chosen by the customer",
    "[{",
    "installmentId: string;",
    "installment: number;",
    "amount: {",
    "currency: string;",
    "value: string;",
    "total_value: string;",
    "} | undefined;",
    "}]",
    "*/",
    "/**",
    "* in data.cardIIN you can receive card_data",
    "[{",
    "\"id\": \"436c457c-1234-4e5e-b51d-1814e67d696a\",",
    "\"iin\": \"411111\",",
    "\"scheme\": \"VISA\",",
    "\"issuer_name\": \"JPMORGAN CHASE BANK N A\",",
    "\"issuer_code\": null,",
    "\"brand\": \"VISA\",",
    "\"type\": \"CREDIT\",",
    "\"category\": \"CREDIT\",",
    "\"country_code\": \"US\",",
    "\"country_name\": \"United States of America\",",
    "\"website\": \"https://www.chase.com\",",
    "\"phone\": {",
    "\"country_code\": null,",
    "\"number\": \"+ (1) 212-270-6000\"",
    "},",
    "\"address\": {",
    "\"address_line_1\": null,",
    "\"address_line_2\": null,",
    "\"city\": null,",
    "\"country\": null,",
    "\"state\": null,",
    "\"zip_code\": null",
    "}",
    "}]",
    "*/",
    "/**",
    "* in data.isCardIINLoading you can receive a true or false indicating if the card iin search is being excecuted.",
    "*/",
    "/**",
    "* in data.isInstallmentLoading you can receive a true or false indicating if the installments search is being excecuted.",
    "*/",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_pan'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_pan'",
    ")\n        }\n      },",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_pan'",
    ")\n      },",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_pan'",
    ")\n      }\n    },\n  })",
    "secureNumber",
    ".",
    "render",
    "(",
    "'#pan'",
    ")",
    "const",
    "secureExpiration",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "/**",
    "* Fields name, can be 'cvv' | 'pan' | 'expiration'",
    "*/",
    "name",
    ":",
    "'expiration'",
    ",",
    "// All options are optional",
    "options",
    ": {",
    "placeholder",
    ":",
    "'MM / YY'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'Card Expiration'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "// Indicates if the fields has error",
    "onChange",
    ": ({",
    "error",
    "})",
    "=>",
    "{",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_expiration'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_expiration'",
    ")\n        }\n      },",
    "// Trigger when blurring from input",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_expiration'",
    ")\n      },",
    "// Trigger when focussing on input",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_expiration'",
    ")\n      }\n    },\n  })",
    "secureExpiration",
    ".",
    "render",
    "(",
    "'#expiration'",
    ")",
    "const",
    "secureCvv",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "name",
    ":",
    "'cvv'",
    ",",
    "options",
    ": {",
    "placeholder",
    ":",
    "'CVV'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'CVV'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "onChange",
    ": ({",
    "error",
    "})",
    "=>",
    "{",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_cvv'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_cvv'",
    ")\n        }\n      },",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_cvv'",
    ")\n      },",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_cvv'",
    ")\n      }\n    },\n  })",
    "secureCvv",
    ".",
    "render",
    "(",
    "'#cvv'",
    ")",
    "Below you find a GIF showing how you can configure the Secure Fields:",
    "Step 5: Generate an OTT (one-time token)",
    "With all user information in hand, you can start the payment. First, you need to create a One-Time Token using the function",
    "secureFields.generateToken",
    ". As it is an asynchronous function, you can use try/catch to ensure you will correctly handle triggered errors. Below, you will find an example of creating a One-Time Token:",
    "JavaScript",
    "// Create One Time Token",
    "// This will trigger an error if there are missing data",
    "// You can catch it using a try/catch",
    "const",
    "oneTimeToken",
    "=",
    "await",
    "secureFields",
    ".",
    "generateToken",
    "({",
    "// Optional: This parameter is used to indicate that a different checkout session is desired,",
    "//rather than the one initially generated.",
    "//A use case is for the persistence of card data after a payment error.",
    "checkoutSession",
    ":",
    "'{{the checkout session id}}'",
    ",",
    "// Required: You can create an input to get this formation",
    "cardHolderName",
    ":",
    "'John Deer'",
    ",",
    "// Optional: You can create an input to get this formation",
    "saveCard",
    ":",
    "true",
    ",",
    "/**",
    "* @optional",
    "*/",
    "// Optional: only neccessary if an installments plan is created for the account",
    "installment",
    ": {",
    "id",
    ":",
    "string",
    ",",
    "value",
    ":",
    "number",
    ",",
    "amount",
    ": {",
    "currency",
    ":",
    "string",
    ",",
    "value",
    ":",
    "string",
    ",",
    "total_value",
    ":",
    "string",
    ",\n            },\n        },",
    "// Check your card processor to know if you need to send",
    "// customer information",
    "// full object here https://docs.y.uno/reference/the-customer-object",
    "customer",
    ": {",
    "document",
    ": {",
    "document_number",
    ":",
    "'1090209924'",
    ",",
    "document_type",
    ":",
    "'CC'",
    ",\n    },\n  },",
    "// This is useful for dual cards where the same card can be either used as credit or debit",
    "cardType",
    ":",
    "'DEBIT'",
    "or",
    "'CREDIT'",
    "})",
    "You can also use",
    "secureFields.generateTokenWithInformation",
    "to receive any additional info given by the customer in the checkout such as installments or document type/number.",
    "JavaScript",
    "// Create One Time Token",
    "// This will trigger an error if there are missing data",
    "// You can catch it using a try/catch",
    "const",
    "oneTimeTokenWithInformation",
    "=",
    "await",
    "secureFields",
    ".",
    "generateTokenWithInformation",
    "({",
    "// Optional: This parameter is used to indicate that a different checkout session is desired,",
    "//rather than the one initially generated.",
    "//A use case is for the persistence of card data after a payment error.",
    "checkoutSession",
    ":",
    "'{{the checkout session id}}'",
    ",",
    "// Required: You can create an input to get this formation",
    "cardHolderName",
    ":",
    "'John Deer'",
    ",",
    "// Optional: You can create an input to get this formation",
    "saveCard",
    ":",
    "true",
    ",",
    "// Optional: only neccessary if an installments plan is created for the account",
    "installment",
    ": {",
    "id",
    ":",
    "string",
    ",",
    "value",
    ":",
    "number",
    ",",
    "amount",
    ": {",
    "currency",
    ":",
    "string",
    ",",
    "value",
    ":",
    "string",
    ",",
    "total_value",
    ":",
    "string",
    ",\n            },\n        },",
    "// Check your card processor to know if you need to send",
    "// customer information",
    "// full object here https://docs.y.uno/reference/the-customer-object",
    "customer",
    ": {",
    "document",
    ": {",
    "document_number",
    ":",
    "'1090209924'",
    ",",
    "document_type",
    ":",
    "'CC'",
    ",\n    },\n  },",
    "// This is useful for dual cards where the same card can be either used as credit or debit",
    "cardType",
    ":",
    "'DEBIT'",
    "or",
    "'CREDIT'",
    "})",
    "Step 6: Create the Payment",
    "After receiving the One Time Token, you can create the payment using the",
    "createPayment",
    "function, providing the",
    "oneTimeToken",
    "and the",
    "checkoutSession",
    ". The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ".",
    "Status Payment",
    ": As the process may raise errors, we recommend using a try/catch function here. Then, you can check the payment status with the",
    "yuno.mountStatusPayment",
    "function, as shown in the next code example:",
    "JavaScript",
    "// Create your payment, you should implement this function",
    "await",
    "createPayment",
    "({",
    "oneTimeToken",
    ",",
    "checkoutSession",
    "})",
    "// Check payment status",
    "yuno",
    ".",
    "mountStatusPayment",
    "({",
    "checkoutSession",
    ":",
    "checkoutSession",
    ",",
    "/**",
    "* Country can be one of CO, BR, CL, PE, EC, UR, MX",
    "*/",
    "/**",
    "* Should be added her or in the token generation",
    "* @optional",
    "*/",
    "countryCode",
    ":",
    "'CO'",
    ",",
    "/**",
    "* Language can be one of es, en, pt",
    "*/",
    "language",
    ":",
    "'en'",
    ",",
    "/**",
    "* @param {'READY_TO_PAY' | 'CREATED' | 'SUCCEEDED' | 'REJECTED' | 'CANCELLED' | 'ERROR' | 'DECLINED' | 'PENDING' | 'EXPIRED' | 'VERIFIED' | 'REFUNDED'} data",
    "*/",
    "yunoPaymentResult",
    "(",
    "data",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'yunoPaymentResult'",
    ",",
    "data",
    ")\n  },\n})",
    "Complementary Features",
    "In addition to the code examples provided, you can access the",
    "Demo App",
    "for a complete implementation of Yuno SDKs or go directly to the",
    "HTML",
    "and",
    "JavaScript",
    "Secure Fields checkout demos available on GitHub.",
    "Yuno Secure Fields provides additional services and configurations you can use to improve customers' experience:",
    "1- Persist credit card information to retry payments",
    "In case a transaction is rejected, you can persist the credit card data to retry a payment after the customer has entered the credit card details. In order to do that, you will need to:",
    "Add the following parameter during the creation of the One Time Token (OTT):",
    "JavaScript",
    "const",
    "oneTimeTokenWithInformation",
    "=",
    "await",
    "secureFields",
    ".",
    "generateTokenWithInformation",
    "({",
    "checkoutSession",
    ":",
    "'{{the checkout session id}}'",
    ",\n})",
    "To receive any additional info given by the customer in the checkout such as installments, document type or document number",
    "JavaScript",
    "const",
    "oneTimeTokenWithInformation",
    "=",
    "await",
    "secureFields",
    ".",
    "generateTokenWithInformation",
    "({",
    "checkoutSession",
    ":",
    "'{{the checkout session id}}'",
    ",\n})",
    "In case the transaction is rejected, you will need to:",
    "i. Create a new checkout session.",
    "ii. Generate a new One Time Token (OTT). In the OTT generation, send the new checkout session in the",
    "checkoutSession",
    "parameter.",
    "Continue with the new checkout and One Time Token with the regular payment flow.",
    "2- Clear the values entered in the card fields",
    "Related to the previous functionality, the merchant can configure to clear the information entered in any of the card fields. To accomplish this, it is necessary to execute the method",
    "secureFieldInstance.clearValue()",
    ", for each field that you wish to clear or delete. Below is an example:",
    "JavaScript",
    "const",
    "secureFieldInstance",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "...",
    "})",
    "secureFieldInstance",
    ".",
    "clearValue",
    "()",
    "3- Input focus",
    "The merchant can set focus on a particular input. To accomplish this, it is necessary to execute the method",
    "secureFieldInstance.focus()",
    ", for each field that you wish to focus. Below is an example:",
    "JavaScript",
    "const",
    "secureFieldInstance",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "...",
    "})",
    "secureFieldInstance",
    ".",
    "focus",
    "()",
    "4- Force validation",
    "The merchant can force the validation for a particular input. To accomplish this, it is necessary to execute the method",
    "secureFieldInstance.validate()",
    ", for each field that you wish to validate. Below is an example:",
    "JavaScript",
    "const",
    "secureFieldInstance",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "...",
    "})",
    "secureFieldInstance",
    ".",
    "validate",
    "()",
    "5- Set custom error message",
    "The merchant can define a custom error message after an input validation. To accomplish this, it is necessary to execute the method",
    "secureFieldInstance.setError()",
    ", for each field that you wish to set a custom error message for. Below is an example:",
    "JavaScript",
    "const",
    "secureFieldInstance",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "...",
    "})",
    "secureFieldInstance",
    ".",
    "setError",
    "(",
    "'Custom error'",
    ")",
    "6- Set card type",
    "The merchant can define the card type the customer is using for the payment. To accomplish this, it is necessary to execute the method",
    "secureFieldInstance.setCardType()",
    "and send either ´DEBIT´ or ´CREDIT´ for each scenario. This is useful for dual cards where the same card can be either used as credit or debit. In Brazil for example. Below is an example:",
    "JavaScript",
    "const",
    "secureFieldInstance",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "...",
    "})",
    "secureFieldInstance",
    ".",
    "setCardType",
    "(",
    "'CREDIT'",
    ")"
  ],
  "https://docs.y.uno/docs/secure-fields-enrollment": [
    "Secure Fields (Enrollment)",
    "Suggest Edits",
    "Below, we outline the step-by-step process to enable the Secure Fields Enrollment functionalities in your system:",
    "Step 1: Include the library in your project.",
    "To use enrollment with secure fields you should include our",
    "SDK",
    "file in your page before close your",
    "<body>",
    "tag",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize secure fields with the public key",
    "Get a",
    "Yuno",
    "instance class in your",
    "JS",
    "app with a valid",
    "PUBLIC_API_KEY",
    "JavaScript",
    "const",
    "yuno",
    "=",
    "Yuno",
    ".",
    "initialize",
    "(",
    "PUBLIC_API_KEY",
    ")",
    "Step 3: Create a customer session and an enrollment payment method object",
    "Before continuing with the process, you will need to create a",
    "customer session",
    "and a",
    "payment method object",
    "to use in the setup of your secure fields integration for enrollment. While creating the payment method object, you will need to define which one is going to be available for your customer to enroll (in the case of secure fields, only CARD is available).",
    "📘",
    "Verify",
    "In case you want to verify cards (zero value authorization) before the enrollment , you can complete the 'verify' struct while defining the payment method object for the customer session.",
    "Step 4: Start the enrollment process",
    "Then create a configuration object. The essential parameters are the",
    "countryCode",
    ", which determines the country for which the enrollment process is configured, and",
    "customerSession",
    ", which refers to the current enrollment's customer session.  The next code block presents an example of the parameter configuration.",
    "The following table lists all required parameters and their descriptions.",
    "Parameter",
    "Description",
    "countryCode",
    "This parameter determines the country for which the enrollment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "customerSession",
    "Refers to the current enrollment's customer session.",
    "Example: '438413b7-4921-41e4-b8f3-28a5a0141638'",
    "JavaScript",
    "const",
    "secureFields",
    "=",
    "yuno",
    ".",
    "secureFields",
    "({",
    "/**",
    "* country can be one of CO, BR, CL, PE, EC, UR, MX",
    "*/",
    "countryCode",
    ",",
    "customerSession",
    ",\n  })",
    "Step 5: Mount the Secure Fields",
    "After defining the parameters, you will define, configure, and mount the Secure Fields. For each Secure Field, you need to define the",
    "name",
    "and",
    "options",
    "when creating it with the",
    "secureFields.create",
    "function.",
    "The table below presents all configurations available:",
    "Parameters",
    "Description",
    "name",
    "The available names for field names are",
    "cvv",
    ",",
    "pan",
    ", or",
    "expiration",
    ".",
    "options.placeholder",
    "Default placeholder for the field.",
    "options.styles",
    "Additional CSS styles for the current field.",
    "options.label",
    "Field visible label.",
    "options.showError",
    "Defines if errors will be shown. Available options are",
    "true",
    "and",
    "false",
    ".",
    "options.onChange",
    "An auxiliary function that can be configured and will run when the field content changes. Indicates if the fields have errors.",
    "options.onBlur",
    "An auxiliary function that can be configured and will run when blurring from the input.",
    "options.onFocus",
    "An auxiliary function that can be configured and will run when focussing on the input.",
    "options.errorMessage",
    "This allows for the definition of the field's error message.",
    "Once you have set the parameter, you will render the created Secure Field with the",
    "render",
    "function by selecting an HTML element using a valid CSS selector (",
    "#",
    ",",
    ".",
    ",",
    "[data-*]",
    ").",
    "The next code block presents an example of the parameter configuration for three Secure Fields, and as they are mounted, the fields are presented to the user.",
    "JavaScript",
    "const",
    "secureNumber",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "/**",
    "* Fields name, can be 'cvv' | 'pan' | 'expiration'",
    "*/",
    "name",
    ":",
    "'pan'",
    ",",
    "// All options are optional",
    "options",
    ": {",
    "placeholder",
    ":",
    "'0000 0000 0000 0000'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'Card Number'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "errorMessage",
    ":",
    "\"Custom Error\"",
    ",",
    "// Indicates if the fields has error",
    "onChange",
    ": ({",
    "error",
    "})",
    "=>",
    "{",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_pan'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_pan'",
    ")\n        }\n      },",
    "// Trigger when blurring from input",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_pan'",
    ")\n      },",
    "// Trigger when focussing on input",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_pan'",
    ")\n      }\n    },\n  })",
    "// Render into desired element",
    "secureNumber",
    ".",
    "render",
    "(",
    "'#pan'",
    ")",
    "const",
    "secureExpiration",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "/**",
    "* Fields name, can be 'cvv' | 'pan' | 'expiration'",
    "*/",
    "name",
    ":",
    "'expiration'",
    ",",
    "// All options are optional",
    "options",
    ": {",
    "placeholder",
    ":",
    "'MM / YY'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'Card Expiration'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "// Indicates if the fields has error",
    "onChange",
    ": ({",
    "error",
    "})",
    "=>",
    "{",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_expiration'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_expiration'",
    ")\n        }\n      },",
    "// Trigger when blurring from input",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_expiration'",
    ")\n      },",
    "// Trigger when focussing on input",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_expiration'",
    ")\n      }\n    },\n  })",
    "// Render into desired element",
    "secureExpiration",
    ".",
    "render",
    "(",
    "'#expiration'",
    ")",
    "const",
    "secureCvv",
    "=",
    "secureFields",
    ".",
    "create",
    "({",
    "/**",
    "* Fields name, can be 'cvv' | 'pan' | 'expiration'",
    "*/",
    "name",
    ":",
    "'cvv'",
    ",",
    "// All options are optional",
    "options",
    ": {",
    "placeholder",
    ":",
    "'CVV'",
    ",",
    "/**",
    "* you can edit card form styles",
    "* only you should write css then it will be injected into the iframe",
    "* example",
    "* `@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap');",
    "*  .Yuno-text-field__content.focus label.Yuno-text-field__label {",
    "*    color: red;",
    "*    font-family: 'Luckiest Guy' !important;",
    "*   }`",
    "*/",
    "styles",
    ":",
    "``",
    ",",
    "label",
    ":",
    "'CVV'",
    ",",
    "showError",
    ":",
    "true",
    ",",
    "// Indicates if the fields has error",
    "onChange",
    ": ({",
    "error",
    "})",
    "=>",
    "{",
    "if",
    "(",
    "error",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'error_cvv'",
    ")\n        }",
    "else",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'not_error_cvv'",
    ")\n        }\n      },",
    "// Trigger when blurring from input",
    "onBlur",
    "() {",
    "console",
    ".",
    "log",
    "(",
    "'blur_cvv'",
    ")\n      },",
    "// Trigger when focussing on input",
    "onFocus",
    ": ()",
    "=>",
    "{",
    "console",
    ".",
    "log",
    "(",
    "'focus_cvv'",
    ")\n      }\n    },\n  })",
    "// Render into desired element",
    "secureCvv",
    ".",
    "render",
    "(",
    "'#cvv'",
    ")",
    "After they are mounted, the three secure fields will be shown",
    "Step 6: Create Vaulted Token",
    "To enroll, create a Vaulted Token",
    "JavaScript",
    "// Create Vaulted Token",
    "// This will trigger an error if there are missing data",
    "// You can catch it using a try/catch",
    "const",
    "vaultedToken",
    "=",
    "await",
    "secureFields",
    ".",
    "generateVaultedToken",
    "({",
    "// Required: You can create an input to get this formation",
    "cardHolderName",
    ":",
    "'John Deer'",
    ",",
    "// Check your card processor to know if you need to send",
    "// customer information",
    "// full object here https://docs.y.uno/reference/the-customer-object",
    "customer",
    ": {",
    "document",
    ": {",
    "document_number",
    ":",
    "'1090209924'",
    ",",
    "document_type",
    ":",
    "'CC'",
    ",\n    },\n  },\n})",
    "If you need the full response you can use",
    "secureFields.generateVaultedTokenWithInformation",
    "JavaScript",
    "/**",
    "*  Create One Time Token",
    "*  This will trigger an error if there are missing data",
    "*  You can catch it using a try/catch",
    "*  Returns an object with the full response",
    "*  {",
    "*   code: string;",
    "*   idempotency_key: string;",
    "*   organization_code: string;",
    "*   account_code: string;",
    "*   customer_session: string;",
    "*   name: string;",
    "*   description: string;",
    "*   status: Enrollment.Status;",
    "*   type: Payment.Type;",
    "*   category: Payment.Category;",
    "*   provider: {",
    "*       type: string;",
    "*       action: string;",
    "*       token: string;",
    "*       enrollment_id: string | null;",
    "*       provider_status: string | null;",
    "*       redirect: string | null;",
    "*       raw_response: unknown;",
    "*   };",
    "*   created_at: Date;",
    "*   updated_at: Date;",
    "*  }",
    "*/",
    "const",
    "vaultedTokenWithInformation",
    "=",
    "await",
    "secureFields",
    ".",
    "generateVaultedTokenWithInformation",
    "({",
    "// Required: You can create an input to get this formation",
    "cardHolderName",
    ":",
    "'John Deer'",
    ",",
    "// Check your card processor to know if you need to send",
    "// customer information",
    "// full object here https://docs.y.uno/reference/the-customer-object",
    "customer",
    ": {",
    "document",
    ": {",
    "document_number",
    ":",
    "'1090209924'",
    ",",
    "document_type",
    ":",
    "'CC'",
    ",\n    },\n  },\n})",
    "Demo",
    "In addition to the code examples provided, you can access the",
    "Demo App",
    "for a complete implementation of Yuno Secure Fields or go directly to the",
    "HTML",
    "and",
    "JavaScript",
    "Secure Fields checkout demos available on GitHub."
  ],
  "https://docs.y.uno/docs/loader": [
    "Loader",
    "Suggest Edits",
    "The loader is displayed from when the One Time Token is created until the merchant calls",
    "yuno.hideLoader()",
    "or",
    "yuno.continuePayment()",
    ".  This way, the user experience is improved because they will see the loader while the merchant creates the payment.",
    "To disable this behavior, the merchant should set the property",
    "keepLoader",
    "to",
    "false",
    "in the method",
    "yuno.startCheckout",
    ". Check the documentation for",
    "Full SDK",
    "or",
    "Lite SDK",
    "."
  ],
  "https://docs.y.uno/docs/payment-status": [
    "Payment Status",
    "Suggest Edits",
    "To monitor payments, you can use one of the monitoring status solutions provided by Yuno. You can use on of two options:",
    "Status",
    ": You can use the Status SDK to update the user about the payment process. It provides visual information for customers.",
    "Status Lite",
    ": You can use the Status Lite SDK to get info about the current payment status. However, the Status Lite does not mount any element.",
    "The initialization of both solutions is the same. After adding the Yuno SDK into your system and creating an instance, check the desired status solution to learn how to use it.",
    "Step 1: Include the library in your project.",
    "Ensure the Yuno SDK file is included in your webpage before closing the  tag. Refer to the example below:",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Initialize SDK with the public key",
    "In your JavaScript application, create an instance of the",
    "Yuno",
    "class by providing a valid",
    "PUBLIC_API_KEY",
    ". Check the",
    "Get your API credentials",
    "guide.",
    "Like the example below, use the initialized class that is attributed to the",
    "yuno",
    "constant.",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Once you create the instance, choose between using the Status o Status Lite solutions to access the payment status.",
    "Step 3: Use Status",
    "To use the Status, you need to mount it. Use the",
    "mountStatusPayment",
    "function to define the",
    "checkoutSession",
    "related to the payment, the",
    "countryCode",
    ", the",
    "language",
    ", and the callback",
    "yunoPaymentResult",
    ".",
    "The callback will be executed when the status is received, informing the user. Defining the element to mount the Status is unnecessary since it will cover the entire screen. The next code block presents an example of the parameter configuration.",
    "javascri",
    "yuno",
    ".",
    "mountStatusPayment",
    "({",
    "checkoutSession",
    ":",
    "'438413b7-4921-41e4-b8f3-28a5a0141638'",
    ",",
    "/**",
    "* Country can be one of CO, BR, CL, PE, EC, UR, MX",
    "*/",
    "countryCode",
    ":",
    "'CO'",
    ",",
    "/**",
    "* Language can be one of es, en, pt",
    "*/",
    "language",
    ":",
    "'es'",
    ",",
    "/**",
    "* @param {'READY_TO_PAY' | 'CREATED' | 'SUCCEEDED' | 'REJECTED' | 'CANCELLED' | 'ERROR' | 'DECLINED' | 'PENDING' | 'EXPIRED' | 'VERIFIED' | 'REFUNDED'} data",
    "*/",
    "yunoPaymentResult",
    "(",
    "data",
    ") {",
    "console",
    ".",
    "log",
    "(",
    "'yunoPaymentResult'",
    ",",
    "data",
    ")\n  }\n})",
    "Use Status Lite",
    "To receive the current payment status using Status Lite, you need to call the method",
    "yunoPaymentResult",
    "providing the",
    "checkoutSession",
    "related to the payment, as shown in the example below:",
    "javascri",
    "/**",
    "* Call method that returns status, this won't render anything",
    "*",
    "* @return {'READY_TO_PAY' | 'CREATED' | 'SUCCEEDED' | 'REJECTED' | 'CANCELLED' | 'ERROR' | 'DECLINED' | 'PENDING' | 'EXPIRED' | 'VERIFIED' | 'REFUNDED'}",
    "*/",
    "const",
    "status",
    "=",
    "await",
    "yuno",
    ".",
    "yunoPaymentResult",
    "(",
    "checkoutSession",
    ")"
  ],
  "https://docs.y.uno/docs/sdk-customizations": [
    "SDK Customizations",
    "Suggest Edits",
    "CSS classes",
    "All elements used by the SDKs use prefixed classes starting with",
    "yuno-*",
    ". Therefore, if you need to change the SDK appearance to match your business style, you can use these classes to redefine the style.",
    "Font",
    "By default, the",
    "Inter",
    "font is used in the SDK elements. Therefore, to use it is necessary to add this font to your HTML.  Add the following link tag into your HTML to import the",
    "Inter",
    "font properly:",
    "HTML",
    "<",
    "link",
    "href",
    "=",
    "\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Roboto&display=swap\"",
    "rel",
    "=",
    "\"stylesheet\"",
    "/>",
    "Check",
    "this example",
    "from the Demo App if you are unsure where to position the HTML tag. Alternatively, you can apply the font used on your system to the SDK elements using CSS, as shown in the example:",
    "CSS",
    "[",
    "class",
    "*=",
    "yuno",
    "] {",
    "font-family",
    ":",
    "YOUR_FONT",
    ";\n}"
  ],
  "https://docs.y.uno/docs/3ds-setup-sdk": [
    "3DS Setup SDK",
    "Suggest Edits",
    "To enable 3DS in your payment flow, you first need to request a setup id (",
    "three_d_secure_setup_id",
    "). For each payment, you need to generate a new",
    "three_d_secure_setup_id",
    ". To receive the",
    "three_d_secure_setup_id",
    "you will use",
    "setup service endpoint",
    ".",
    "Step 1: Add Yuno SDK",
    "With the",
    "three_d_secure_setup_id",
    "in hand, you need to include the Yuno SDK file in your webpage before closing the",
    "<head>",
    "tag. See the example below:",
    "HTML",
    "<",
    "script",
    "src",
    "=",
    "\"https://sdk-web.y.uno/v1/static/js/main.min.js\"",
    ">",
    "</",
    "script",
    ">",
    "Step 2: Start the data collection",
    "To initiate the data collection necessary for the 3DS payment flow, you will use the",
    "Yuno.threeDSecure.setup()",
    "function. To initiate the",
    "setup()",
    "function, you will use the",
    "three_d_secure_setup_id",
    "obtained in the previous step. The following table lists all the required parameters when initializing the 3DS with the Yuno SDK and their descriptions.",
    "Parameter",
    "Description",
    "setupId",
    "Refers to the",
    "three_d_secure_setup_id",
    ".",
    "publicApiKey",
    "Refers to your Yuno's",
    "public-api-key",
    ". This information is on the",
    "Yuno's Dashboard",
    ".",
    "accountId",
    "Refers to your Yuno's",
    "account-id",
    ". This information is on the",
    "Yuno's Dashboard",
    ".",
    "The next code block presents an example of initialization.",
    "javasc",
    "Yuno",
    ".",
    "threeDSecure",
    ".",
    "setup",
    "({",
    "publicApiKey",
    ":",
    "''",
    ",",
    "setupId",
    ":",
    "''",
    ",",
    "accountId",
    ":",
    "''",
    "}).",
    "then",
    "(({",
    "status",
    "})",
    "=>",
    "{",
    "//SUCCEEDED or ERROR",
    "})",
    "After executing the",
    "setup()",
    "service, the Yuno system will receive the necessary device information. Thus, you can continue with the payment. Remember always to use the",
    "three_d_secure_setup_id",
    "to identify the device where the payment is being made."
  ],
  "https://docs.y.uno/docs/demo-app": [
    "Demo App",
    "Suggest Edits",
    "To help you understand and check how the Yuno SDKs work, the Yuno team provides the Demo App. It provides implementation examples for all Yuno SDKs. Therefore, if you are having trouble running some SDK on your platform, you can check the working examples from the Demo App.",
    "Step 1: Clone the repository",
    "All files from the Demo App are available on a",
    "GitHub repository",
    ". To start using it, open your terminal, clone the repository, and change to the cloned directory:",
    "Shell",
    ">",
    "git",
    "clone https://github.com/yuno-payments/yuno-sdk-web.git\n>",
    "cd",
    "yuno-sdk-web",
    "Step 2: Update the environment variables",
    "First, you need to provide some information to run the application properly. Create a",
    ".env",
    "file in the root folder and define the following variables with your information:",
    "PORT=8080\nYUNO_X_ACCOUNT_CODE=your_account_code\nYUNO_PUBLIC_API_KEY=your_public_api_key\nYUNO_PRIVATE_SECRET_KEY=your_private_secret_key\nYUNO_API_URL=yuno-environment-url\nYUNO_CUSTOMER_ID=the_customer_id",
    "You can find",
    "account_code",
    ",",
    "public_apy_key",
    ", and",
    "private_secrete_key",
    "in",
    "Yuno Merchant Dashboard",
    ". Choose the",
    "Yuno_API_URL",
    "based on the current",
    "environment",
    "you are working on. You can choose between the sandbox and production URLs. Use the",
    "Create Customer",
    "endpoint to get the",
    "YUNO_CUSTOMER_ID",
    ".",
    "Step 3: Start the Demo App",
    "After defining the",
    ".env",
    "file, install all dependencies:",
    "Shell",
    ">",
    "npm",
    "install",
    "Now you are ready to run the application using the following command:",
    "Shell",
    ">",
    "npm",
    "start",
    "To access the running application, open your browser and go to:",
    "Shell",
    "http://localhost:YOUR-PORT",
    "Replace the",
    "Your-Port",
    "by the value defined in the",
    ".env",
    "file. Additionally, you can change the country by adding a query parameter named",
    "country",
    "to the URL with one of the country codes",
    "CO",
    ",",
    "BR",
    ",",
    "CL",
    ",",
    "PE",
    ",",
    "EC",
    ",",
    "UR",
    ",",
    "MX",
    ". The following example defines the URL to access an application running on the 8080 port and with Colombia as the country selected:",
    "Shell",
    "http://localhost:8080",
    "?country",
    "=",
    "CO",
    "You will find a panel, as presented below, with all Yuno SDKs available by accessing the URL. Select the desired SDK to check its appearance and how it works."
  ],
  "https://docs.y.uno/docs/android-sdk-integrations": [
    "Android SDK Integrations",
    "Suggest Edits",
    "Yuno's Android SDKs are specifically designed to simplify the integration of payment processing functionality in your Android applications. Developers can implement features more efficiently, reducing the need for extensive knowledge of payment protocols and infrastructure.",
    "Integrations",
    "Select one of the user-friendly Android integration options available and kickstart your journey toward efficient payment processing:",
    "Full SDK",
    "Render the payment methods your company has available in the checkout and for user enrollment.",
    "Lite SDK (Payment)",
    "With this option, you control which payment methods will be shown to the user during checkout and enrollment.",
    "Lite SDK (Enrollment)",
    "Simplify the user enrollment of payment methods.",
    "Explore the SDK Project Example",
    "Yuno provides an example project of a running application using an SDK. You can access the",
    "project repository",
    "or",
    "download the project",
    ". In addition, you can access the",
    "Create Your First Payment With SDK",
    "guide available in the documentation."
  ],
  "https://docs.y.uno/docs/requirements-android": [
    "Requirements",
    "Suggest Edits",
    "In order to use the Yuno Android SDK, you need to meet the following requirements:",
    "Yuno Android SDK needs your minSdkVersion to be 21 or above.",
    "Your project must have Java 8 enabled and use AndroidX instead of older support libraries.",
    "The android-gradle-plugin version must be 4.0.0 or above.",
    "The Proguard version must be 6.2.2 or above.",
    "The kotlin-gradle-plugin version must be 1.4.0 or above."
  ],
  "https://docs.y.uno/docs/full-checkout-android": [
    "Full SDK",
    "Suggest Edits",
    "On this page, you find all the steps to add, configure, and use the Full SDK in your Android project.",
    "Step 1: Include the library in your project",
    "Ensure the Yuno SDK file is included in your project through Gradle. Then, add the repository source using the following code line:",
    "Kotlin",
    "maven",
    "{",
    "url",
    "\"https://yunopayments.jfrog.io/artifactory/snapshots-libs-release\"",
    "}",
    "After, include the code below in the file",
    "build.gradle",
    "to add the Yuno SDK dependency to the application.",
    "Kotlin",
    "dependencies",
    "{",
    "implementation",
    "'com.yuno.payments:android-sdk:{last_version}'",
    "}",
    "Permissions",
    "Yuno SDK includes, by default, the",
    "INTERNET",
    "permission, which is required to make network requests.",
    "XML",
    "<",
    "uses-permission",
    "android:name",
    "=",
    "\"android.permission.INTERNET\"",
    "/>",
    "Step 2: Initialize SDK with the public key",
    "First, you need to retrieve your Public API Keys from the",
    "Yuno dashboard",
    ".",
    "If you haven't implemented a custom application, create one. In the",
    "onCreate()",
    "method of your application class, call the initialize function (",
    "Yuno.initialize",
    ") as shown in the example below:",
    "Kotlin",
    "class",
    "CustomApplication",
    ":",
    "Application",
    "() {",
    "override",
    "fun",
    "onCreate",
    "() {",
    "super",
    ".",
    "onCreate",
    "()",
    "Yuno",
    ".",
    "initialize",
    "(",
    "this",
    ",",
    "\"your api key\"",
    ",",
    "config",
    ":",
    "YunoConfig",
    ",",
    "// This is a data class to use custom configs in the SDK.",
    ")\n  }\n}",
    "Use the data class",
    "YunoConfig",
    "to customize SDK behavior. Include this configuration in the",
    "Yuno.initialize",
    ":",
    "Kotlin",
    "data",
    "class",
    "YunoConfig",
    "(",
    "val",
    "cardFlow",
    ":",
    "CardFormType",
    "=",
    "CardFormType",
    ".",
    "ONE_STEP",
    ",",
    "// This is optional, CardFormType.ONE_STEP by default, this is to choose Payment and Enrollment Card flow.",
    "val",
    "saveCardEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "// This is to choose if show save card checkbox on cards flows.",
    "val",
    "keepLoader",
    ":",
    "Boolean",
    "=",
    "false",
    "// This is to choose if keep Yuno loading screen until you create and continue with payment, this need an additional step that is shown below.",
    "val",
    "cardFormDeployed",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "// This is only for SDK FULL, This is to choose if show card form deployed on payment methods list (TRUE) or if show normal card form in another screen (FALSE)",
    "val",
    "language",
    ":",
    "YunoLanguage",
    "?",
    "=",
    "null",
    ",",
    "//This is to choose the language of the SDK, if you send null or don't send it, Yuno SDK will take device language.",
    "val",
    "isDynamicViewEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "//This is to choose if you want to use dynamic view or not, if you send false or don't send it, Yuno SDK will take false.",
    ")",
    "In the next table, you find the descriptions for each customization option available.",
    "Customization option",
    "Description",
    "cardFlow",
    "It is an optional configuration that defines Payment and Enrollment Card flow. By default, the",
    "CardFormType.ONE_STEP",
    "option is used.",
    "saveCardEnabled",
    "Enables the",
    "Save card checkbox",
    "on card flows.",
    "keepLoader",
    "Keep Yuno's loading screen until you create and continue with payment. To use this feature you need to use the function",
    "startCompletePaymentFlow()",
    ", described in the next sections.",
    "cardFormDeployed",
    "This option is only available for Full SDK. If",
    "TRUE",
    ", the system presents the card form deployed on the payment methods list. If",
    "FALSE",
    ", presents the normal card form on another screen.",
    "language",
    "Define the language used to present the SDK. If you don't send or provide a null value, Yuno SDK will use the device language. The available options are:",
    "- SPANISH",
    "- ENGLISH",
    "- PORTUGUESE",
    "- INDONESIAN",
    "- MALAYSIAN",
    "isDynamicViewEnabled",
    "Defines if you want to use the dynamic view. In the case you don't provide a value, Yuno SDK will use the",
    "FALSE",
    "option.",
    "To ensure that the Yuno loading screen persists until you create and proceed with the payment, you need to use the",
    "startCompletePaymentFlow()",
    "function.",
    "You also need to update your manifest to use your application:",
    "XML",
    "<",
    "application",
    "android:name",
    "=",
    "\".CustomApplication\"",
    "></",
    "application",
    ">",
    "Step 3: Start the checkout process",
    "To start a new payment process with the Full SDK, you need to call the",
    "startCheckout",
    "method on",
    "onCreate",
    "of activity that calls the SDK:",
    "Kotlin",
    "startCheckout",
    "(",
    "checkoutSession",
    ":",
    "\"checkout_session\"",
    ",",
    "countryCode",
    ":",
    "\"country_code_iso\"",
    ",",
    "callbackOTT",
    ": (",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ",",
    "callbackPaymentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    ",",
    "merchantSessionId",
    ":",
    "String",
    "?",
    "=",
    "null",
    "//Optional - Default null",
    ")",
    "Below is a description of the required parameters to start the checkout.",
    "Parameter",
    "Description",
    "checkoutSession",
    "The checkout session is related to the payment.",
    "countryCode",
    "Country code where the payment is performed. Check the",
    "Country reference",
    "for a complete list of country codes.",
    "callbackOTT",
    "It is a mandatory function that returns a one-time token (OTT) needed to complete the back-to-back payment.",
    "callbackPaymentState",
    "It's a function that returns the current payment process. Sending this function is not mandatory if you do not need the result.",
    "The possible states returned by the",
    "callbackPaymentState",
    "are presented below:",
    "Kotlin",
    "const",
    "val",
    "PAYMENT_STATE_SUCCEEDED",
    "=",
    "\"SUCCEEDED\"",
    "const",
    "val",
    "PAYMENT_STATE_FAIL",
    "=",
    "\"FAIL\"",
    "const",
    "val",
    "PAYMENT_STATE_PROCESSING",
    "=",
    "\"PROCESSING\"",
    "const",
    "val",
    "PAYMENT_STATE_REJECT",
    "=",
    "\"REJECT\"",
    "const",
    "val",
    "PAYMENT_STATE_INTERNAL_ERROR",
    "=",
    "\"INTERNAL_ERROR\"",
    "const",
    "val",
    "PAYMENT_STATE_STATE_CANCELED_BY_USER",
    "=",
    "\"CANCELED\"",
    "Step 4: Add the SDK view to the checkout",
    "When implementing the Full SDK version, ensure you incorporate the following view by instantiating our",
    "PaymentMethodListView",
    "class in your layout to display available payment methods. In addition, add the",
    ".setOnSelectedEvent",
    "method, which is a lambda function, to allow the merchant to know when to enable or disable the pay button.",
    "XML",
    "<",
    "com.yuno.payments.features.payment.ui.views.PaymentMethodListView",
    "android:id",
    "=",
    "\"@+id/list_payment_methods\"",
    "android:layout_width",
    "=",
    "\"match_parent\"",
    "android:layout_height",
    "=",
    "\"wrap_content\"",
    "/>",
    "Step 5: Initiate the payment process",
    "To start a payment process, you have to call the method",
    "startPayment()",
    ".",
    "Kotlin",
    "startPayment",
    "(",
    "callbackOTT",
    ":(",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ",",
    "//Optional - Default null",
    ")",
    "Step 6: Get the OTT (One Time Token)",
    "Once the customer fills out the requested data in Yuno's payment forms, you will obtain the OTT, a required parameter to create a payment via the Payments API POST/payments.",
    "You can obtain this data from the",
    "onActivityResult",
    ", received from the callback.",
    "Callback One Time Token (OTT)",
    "The",
    "callbackOTT",
    "parameter, provided when initiating the payment in Step 4, is a mandatory function that returns an OTT. The OTT is required to complete the back-to-back payments.",
    "Important",
    "The merchant is responsible for handling the loader. Yuno offers an option to use our loader; \n        however, the merchant can use their own loader and must make the corresponding configurations.",
    "Step 7: Create the Payment",
    "Once you have completed the steps described before, you can create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue",
    "We recommend integrating the SDK",
    "continuePayment",
    "method after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The create_payment API will inform you of this scenario via the response field",
    "sdk_action_required",
    ", which will return",
    "TRUE",
    ". The",
    "yuno.continuePayment()",
    "function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary. You need to call",
    "continuePayment",
    "method as presented below:",
    "Kotlin",
    "continuePayment",
    "(",
    "showPaymentStatus",
    ":",
    "Boolean",
    ",",
    "//Optional - Default true",
    "callbackPaymentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    ",",
    "//Optional - Default null",
    ")",
    "To show your payment status screens, you should send",
    "FALSE",
    "in the",
    "showPaymentStatus",
    "parameter. Then, get the payment state by callback.",
    "Complementary Features",
    "Yuno Android SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Loader",
    ": Control the use of the loader.",
    "Save card for future payments",
    ": In addition, you can display a checkbox for save or enroll cards using",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/lite-checkout-android": [
    "Lite SDK (Payment)",
    "Suggest Edits",
    "On this page, you find all the steps to add, configure, and use the Lite SDK to perform a payment in your Android project.",
    "Step 1: Include the library in your project",
    "Ensure the Yuno SDK file is included in your project through Gradle. Then, add the repository source using the following code line:",
    "Kotlin",
    "maven",
    "{",
    "url",
    "\"https://yunopayments.jfrog.io/artifactory/snapshots-libs-release\"",
    "}",
    "After, include the code below in the file",
    "build.gradle",
    "to add the Yuno SDK dependency to the application.",
    "Kotlin",
    "dependencies",
    "{",
    "implementation",
    "'com.yuno.payments:android-sdk:{last_version}'",
    "}",
    "Permissions",
    "Yuno SDK includes, by default, the",
    "INTERNET",
    "permission, which is required to make network requests.",
    "XML",
    "<",
    "uses-permission",
    "android:name",
    "=",
    "\"android.permission.INTERNET\"",
    "/>",
    "Step 2: Initialize SDK with the public key",
    "First, you need to retrieve your Public API Keys from the",
    "Yuno dashboard",
    ".",
    "If you haven't implemented a custom application, create one. In the",
    "onCreate()",
    "method of your application class, call the initialize function (",
    "Yuno.initialize",
    ") as shown in the example below:",
    "Kotlin",
    "class",
    "CustomApplication",
    ":",
    "Application",
    "() {",
    "override",
    "fun",
    "onCreate",
    "() {",
    "super",
    ".",
    "onCreate",
    "()",
    "Yuno",
    ".",
    "initialize",
    "(",
    "this",
    ",",
    "\"your api key\"",
    ",",
    "config",
    ":",
    "YunoConfig",
    ",",
    "// This is a data class to use custom configs in the SDK.",
    ")\n  }\n}",
    "Use the data class",
    "YunoConfig",
    "to customize SDK behavior. Include this configuration in the",
    "Yuno.initialize",
    ":",
    "Kotlin",
    "data",
    "class",
    "YunoConfig",
    "(",
    "val",
    "cardFlow",
    ":",
    "CardFormType",
    "=",
    "CardFormType",
    ".",
    "ONE_STEP",
    ",",
    "// This is optional, CardFormType.ONE_STEP by default, this is to choose Payment and Enrollment Card flow.",
    "val",
    "saveCardEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "// This is to choose if show save card checkbox on cards flows.",
    "val",
    "keepLoader",
    ":",
    "Boolean",
    "=",
    "false",
    "// This is to choose if keep Yuno loading screen until you create and continue with payment, this need an additional step that is shown below.",
    "val",
    "language",
    ":",
    "YunoLanguage",
    "?",
    "=",
    "null",
    ",",
    "//This is to choose the language of the SDK, if you send null or don't send it, Yuno SDK will take device language.",
    "val",
    "isDynamicViewEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "//This is to choose if you want to use dynamic view or not, if you send false or don't send it, Yuno SDK will take false.",
    ")",
    "In the next table, you find the descriptions for each customization option available.",
    "Customization option",
    "Description",
    "cardFlow",
    "It is an optional configuration that defines Payment and Enrollment Card flow. By default, the",
    "CardFormType.ONE_STEP",
    "option is used.",
    "saveCardEnabled",
    "Enables the",
    "Save card checkbox",
    "on card flows.",
    "keepLoader",
    "Keep Yuno's loading screen until you create and continue with payment. To use this feature you need to use the function",
    "startCompletePaymentFlow()",
    ", described in the next sections.",
    "language",
    "Define the language used to present the SDK. If you don't send or provide a null value, Yuno SDK will use the device language. The available options are:",
    "- SPANISH",
    "- ENGLISH",
    "- PORTUGUESE",
    "- INDONESIAN",
    "- MALAYSIAN",
    "isDynamicViewEnabled",
    "Defines if you want to use the dynamic view. In the case you don't provide a value, Yuno SDK will use the",
    "FALSE",
    "option.",
    "To ensure that the Yuno loading screen persists until you create and proceed with the payment, you need to use the",
    "startCompletePaymentFlow()",
    "function.",
    "You also need to update your manifest to use your application:",
    "XML",
    "<",
    "application",
    "android:name",
    "=",
    "\".CustomApplication\"",
    "></",
    "application",
    ">",
    "Step 3: Start the checkout process",
    "To start a new payment process with the Lite SDK, you need to call the",
    "startCheckout",
    "method on",
    "onCreate",
    "of activity that calls the SDK:",
    "Kotlin",
    "startCheckout",
    "(",
    "checkoutSession",
    ":",
    "\"checkout_session\"",
    ",",
    "countryCode",
    ":",
    "\"country_code_iso\"",
    ",",
    "callbackOTT",
    ": (",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ",",
    "callbackPaymentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    ",",
    "merchantSessionId",
    ":",
    "String",
    "?",
    "=",
    "null",
    "//Optional - Default null",
    ")",
    "Below is a description of the required parameters to start the checkout.",
    "Parameter",
    "Description",
    "checkoutSession",
    "The checkout session is related to the payment.",
    "countryCode",
    "Country code where the payment is performed. Check the",
    "Country reference",
    "for a complete list of country codes.",
    "callbackOTT",
    "It is a mandatory function that returns a one-time token (OTT) needed to complete the back-to-back payment.",
    "callbackPaymentState",
    "It's a function that returns the current payment process. Sending this function is not mandatory if you do not need the result.",
    "Callback Payment State",
    "The",
    "callbackPaymentState",
    "parameter is a function that returns the current payment process. Sending this function is not mandatory if you do not need the result. The possible states are:",
    "Kotlin",
    "const",
    "val",
    "PAYMENT_STATE_SUCCEEDED",
    "=",
    "\"SUCCEEDED\"",
    "const",
    "val",
    "PAYMENT_STATE_FAIL",
    "=",
    "\"FAIL\"",
    "const",
    "val",
    "PAYMENT_STATE_PROCESSING",
    "=",
    "\"PROCESSING\"",
    "const",
    "val",
    "PAYMENT_STATE_REJECT",
    "=",
    "\"REJECT\"",
    "const",
    "val",
    "PAYMENT_STATE_INTERNAL_ERROR",
    "=",
    "\"INTERNAL_ERROR\"",
    "const",
    "val",
    "PAYMENT_STATE_STATE_CANCELED_BY_USER",
    "=",
    "\"CANCELED\"",
    "Step 4: Initiate the payment process",
    "To start a payment process, you have to call the method",
    "startPaymentLite",
    ".",
    "Kotlin",
    "startPaymentLite",
    "(",
    "paymentSelected",
    ":",
    "PaymentSelected",
    ",",
    "callbackOTT",
    ":(",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ",",
    "//Optional - Default null",
    ")",
    "You need to send an additional parameter, which is the vaulted token and/or the payment type that the user selected to make the payment.",
    "Kotlin",
    "PaymentSelected",
    "(",
    "id",
    ":",
    "String",
    "\"payment_vaulted_token\"",
    ",",
    "type",
    ":",
    "String",
    "\"payment_type\"",
    ",\n)",
    "Step 5: Get the OTT (One Time Token):",
    "Once the customer fills out the requested data in Yuno's payment forms, you will obtain the OTT, which is a required parameter to create a payment via the Payments API POST/payments. You can obtain this data from the",
    "onActivityResult",
    ", received from the callback.",
    "Callback One Time Token (OTT)",
    "The",
    "callbackOTT",
    "parameter, provided when initiating the payment in Step 4, is a mandatory function that returns an OTT. The OTT is required to complete the back-to-back payments.",
    "Important",
    "The merchant is responsible for handling the loader. Yuno offers an option to use our loader; \n        however, the merchant can use their own loader and must make the corresponding configurations.",
    "Step 6: Create the Payment",
    "Once you have completed the steps described before, you can create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue",
    "We recommend integrating the SDK",
    "continuePayment",
    "method after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The create_payment API will inform you of this scenario via the response field",
    "sdk_action_required",
    ", which will return",
    "TRUE",
    ". The",
    "yuno.continuePayment()",
    "function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary. You need to call",
    "continuePayment",
    "method as presented below:",
    "Kotlin",
    "continuePayment",
    "(",
    "showPaymentStatus",
    ":",
    "Boolean",
    ",",
    "//Optional - Default true",
    "callbackPaymentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    ",",
    "//Optional - Default null",
    ")",
    "To show your payment status screens, you should send",
    "FALSE",
    "in the",
    "showPaymentStatus",
    "parameter. Then, get the payment state by callback.",
    "Complementary Features",
    "Yuno Android SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Yuno Android SDK provides additional services and configurations you can use to improve customers' experience:",
    "Loader",
    ": Control the use of the loader.",
    "Save card for future payments",
    ": In addition, you can display a checkbox for save or enroll cards using",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/enrollment-android": [
    "Lite SDK (Enrollment)",
    "Suggest Edits",
    "On this page, you find all the steps to to perform an enrollment using the Lite SDK in your Android project.",
    "Step 1: Include the library in your project",
    "Ensure the Yuno SDK file is included in your project through Gradle. Then, add the repository source using the following code line:",
    "Kotlin",
    "maven",
    "{",
    "url",
    "\"https://yunopayments.jfrog.io/artifactory/snapshots-libs-release\"",
    "}",
    "After, include the code below in the file",
    "build.gradle",
    "to add the Yuno SDK dependency to the application.",
    "Kotlin",
    "dependencies",
    "{",
    "implementation",
    "'com.yuno.payments:android-sdk:{last_version}'",
    "}",
    "Permissions",
    "Yuno SDK includes, by default, the",
    "INTERNET",
    "permission, which is required to make network requests.",
    "XML",
    "<",
    "uses-permission",
    "android:name",
    "=",
    "\"android.permission.INTERNET\"",
    "/>",
    "Step 2: Initialize SDK with the public key",
    "First, you need to retrieve your Public API Keys from the",
    "Yuno dashboard",
    ".",
    "If you haven't implemented a custom application, create one. In the",
    "onCreate()",
    "method of your application class, call the initialize function (",
    "Yuno.initialize",
    ") as shown in the example below:",
    "Kotlin",
    "class",
    "CustomApplication",
    ":",
    "Application",
    "() {",
    "override",
    "fun",
    "onCreate",
    "() {",
    "super",
    ".",
    "onCreate",
    "()",
    "Yuno",
    ".",
    "initialize",
    "(",
    "this",
    ",",
    "\"your api key\"",
    ",",
    "config",
    ":",
    "YunoConfig",
    ",",
    "// This is a data class to use custom configs in the SDK.",
    ")\n  }\n}",
    "Use the data class",
    "YunoConfig",
    "to customize SDK behavior. Include this configuration in the",
    "Yuno.initialize",
    ":",
    "Kotlin",
    "data",
    "class",
    "YunoConfig",
    "(",
    "val",
    "cardFlow",
    ":",
    "CardFormType",
    "=",
    "CardFormType",
    ".",
    "ONE_STEP",
    ",",
    "// This is optional, CardFormType.ONE_STEP by default, this is to choose Payment and Enrollment Card flow.",
    "val",
    "saveCardEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "// This is to choose if show save card checkbox on cards flows.",
    "val",
    "keepLoader",
    ":",
    "Boolean",
    "=",
    "false",
    "// This is to choose if keep Yuno loading screen until you create and continue with payment, this need an additional step that is shown below.",
    "val",
    "language",
    ":",
    "YunoLanguage",
    "?",
    "=",
    "null",
    ",",
    "//This is to choose the language of the SDK, if you send null or don't send it, Yuno SDK will take device language.",
    "val",
    "isDynamicViewEnabled",
    ":",
    "Boolean",
    "=",
    "false",
    ",",
    "//This is to choose if you want to use dynamic view or not, if you send false or don't send it, Yuno SDK will take false.",
    ")",
    "In the next table, you find the descriptions for each customization option available.",
    "Customization option",
    "Description",
    "cardFlow",
    "It is an optional configuration that defines Payment and Enrollment Card flow. By default, the",
    "CardFormType.ONE_STEP",
    "option is used.",
    "saveCardEnabled",
    "Enables the",
    "Save card checkbox",
    "on card flows.",
    "keepLoader",
    "Keep Yuno's loading screen until you create and continue with payment. To use this feature you need to use the function",
    "startCompletePaymentFlow()",
    ", described in the next sections.",
    "language",
    "Define the language used to present the SDK. If you don't send or provide a null value, Yuno SDK will use the device language. The available options are:",
    "- SPANISH",
    "- ENGLISH",
    "- PORTUGUESE",
    "- INDONESIAN",
    "- MALAYSIAN",
    "isDynamicViewEnabled",
    "Defines if you want to use the dynamic view. In the case you don't provide a value, Yuno SDK will use the",
    "FALSE",
    "option.",
    "To ensure that the Yuno loading screen persists until you create and proceed with the payment, you need to use the",
    "startCompletePaymentFlow()",
    "function.",
    "You also need to update your manifest to use your application:",
    "XML",
    "<",
    "application",
    "android:name",
    "=",
    "\".CustomApplication\"",
    "></",
    "application",
    ">",
    "Step 3: Enroll a new payment method",
    "To create the enrollment flow, you need to call the",
    "initEnrollment",
    "method on the",
    "onCreate",
    "method of your activity. This process is required because Yuno's Lite SDK uses it to register the contract to give you the final enrollment state.",
    "Kotlin",
    "fun",
    "ComponentActivity",
    ".",
    "initEnrollment",
    "(",
    "callbackEnrollmentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    "=",
    "null",
    ",",
    "//Default null | To register this callback is a must to call ```initEnrollment``` method on the onCreate method of activity.",
    ")",
    "To start the enrollment of a new payment method, you need to use the",
    "startEnrollment",
    "method. When you call the",
    "startEnrollment",
    "method, the enrollment flow of a new payment method will start.",
    "Kotlin",
    "fun",
    "Activity",
    ".",
    "startEnrollment",
    "(",
    "customerSession",
    ":",
    "String",
    ",",
    "countryCode",
    ":",
    "String",
    ",",
    "showEnrollmentStatus",
    ":",
    "Boolean",
    "=",
    "true",
    ",",
    "//Optional - Default true",
    "callbackEnrollmentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    "=",
    "null",
    ",",
    "// Default null | To register this callback is a must to call ```initEnrollment``` method on the onCreate method of activity.",
    ")",
    "Step 4: Callback enrollment state",
    "To register a callback to get the final enrollment state, it is necessary to call the",
    "initEnrollment",
    "method on the onCreate method of activity.",
    "Complementary Features",
    "Yuno Android SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Yuno Android SDK provides additional services and configurations you can use to improve customers' experience:",
    "Loader",
    ": Control the use of the loader.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/loader-android": [
    "Loader",
    "Suggest Edits",
    "If you need to maintain the Yuno Loader screen, set the",
    "keepLoader",
    "parameter to",
    "TRUE",
    "in the",
    "Yuno.initialize()",
    "function. Additionally, you need to use the following function when initiating the payment:",
    "Kotlin",
    "startCompletePaymentFlow",
    "(",
    "paymentSelected",
    ":",
    "PaymentSelected",
    "?",
    "=",
    "null",
    ",",
    "showPaymentStatus",
    ":",
    "Boolean",
    "=",
    "true",
    ",",
    "createPaymentFun",
    ": (",
    "suspend",
    "(",
    "ott",
    ":",
    "String",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    "=",
    "null",
    ",",
    "callbackPaymentState",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    "=",
    "null",
    ",",
    "callbackOTT",
    ": ((",
    "String",
    "?",
    ")",
    "->",
    "Unit",
    ")",
    "?",
    "=",
    "null",
    ",\n)",
    "The",
    "createPaymentFun",
    "parameter is a suspend function in which Yuno waits for the sequential payment creation. Once the payment is created, completing the suspend function allows Yuno to proceed with the payment. If you opt for this flow, there's no need to invoke",
    "continuePayment()",
    "."
  ],
  "https://docs.y.uno/docs/sdk-customizations-android": [
    "SDK Customizations",
    "Suggest Edits",
    "Yuno Android SDK enables you to modify styles by changing font, button, and color styles or creating your own card form flow.",
    "Font styles",
    "You can override Yuno Android SDK fonts if you want to use your font family. The font styles you can override are:",
    "YunoRegularFont",
    "YunoMediumFont",
    "YunoBoldFont",
    "An example is presented in the code snippet below:",
    "Kotlin",
    "<",
    "style",
    "name",
    "=",
    "\"YunoRegularFont\"",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:fontFamily\"",
    ">",
    "YOUR",
    "REGULAR",
    "FONT",
    "FILE",
    "(",
    "EX",
    ":",
    "@font",
    "/",
    "inter_regular",
    ".",
    "ttf",
    ")",
    "</",
    "item",
    ">",
    "</",
    "style",
    ">",
    "<",
    "style",
    "name",
    "=",
    "\"YunoMediumFont\"",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:fontFamily\"",
    ">",
    "YOUR",
    "MEDIUM",
    "FONT",
    "FILE",
    "(",
    "EX",
    ":",
    "@font",
    "/",
    "inter_medium",
    ".",
    "ttf",
    ")",
    "</",
    "item",
    ">",
    "</",
    "style",
    ">",
    "<",
    "style",
    "name",
    "=",
    "\"YunoBoldFont\"",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:fontFamily\"",
    ">",
    "YOUR",
    "BOLD",
    "FONT",
    "FILE",
    "(",
    "EX",
    ":",
    "@font",
    "/",
    "inter_bold",
    ".",
    "ttf",
    ")",
    "</",
    "item",
    ">",
    "</",
    "style",
    ">",
    "Button styles",
    "You can override Yuno Android SDK button styles if you want. The button styles you can override are:",
    "Button.Normal.White",
    "Button.Normal.Green",
    "Button.Normal.Purple",
    "Button.Normal.Purple.Big",
    "An example is presented in the code snippet below:",
    "Kotlin",
    "<",
    "style",
    "name",
    "=",
    "\"Button.Normal.Purple\"",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:background\"",
    ">",
    "YOUR",
    "OWN",
    "COLOR",
    "(",
    "EX",
    ":",
    "HEXCODE",
    "OR",
    "RESOURCE",
    ")",
    "</",
    "item",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:textColor\"",
    ">",
    "YOUR",
    "OWN",
    "COLOR",
    "(",
    "EX",
    ":",
    "HEXCODE",
    "OR",
    "RESOURCE",
    ")",
    "</",
    "item",
    ">",
    "<",
    "item",
    "name",
    "=",
    "\"android:fontFamily\"",
    ">",
    "YOUR",
    "FONT",
    "FILE",
    "(",
    "EX",
    ":",
    "@font",
    "/",
    "inter_regular",
    ".",
    "ttf",
    ")",
    "</",
    "item",
    ">",
    "</",
    "style",
    ">",
    "Color styles",
    "You can override Yuno Android SDK color styles if you want to personalize the appearance of Yuno SDK. The color styles you can override are:",
    "yuno_purple_light",
    "An example is presented in the code snippet below:",
    "Kotlin",
    "<",
    "color",
    "name",
    "=",
    "\"yuno_purple_light\"",
    ">",
    "YOUR",
    "OWN",
    "COLOR",
    "(",
    "EX",
    ":",
    "HEXCODE",
    "OR",
    "RESOURCE",
    ")",
    "</",
    "color",
    ">",
    "Create your own card form flow",
    "The first step to creating your card form flow is to create  a new layout resource file called",
    "screen_payment_card_form.xml",
    "to override the current XML and implement your design.",
    "After creating the",
    "screen_payment_card_form.xml",
    "file, you can define your own design. You need to use the Yuno Secure Fields components, which ensures that the Yuno SDK can retrieve credit card information during the checkout. Below, you will find a list of all the components you can use to change the design:",
    "Changing components",
    "When changing the Yuno Android SDK components, you must use then with their defined Android",
    "id",
    ".",
    "CloseButton",
    ": Button to close the form.",
    "XML",
    "<",
    "ImageView",
    "android:id",
    "=",
    "\"@+id/imageView_close\"",
    "/>",
    "CardNumberEditText",
    ": Field where the user can enter the credit card number.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.CardNumberEditText",
    "android:id",
    "=",
    "\"@+id/textField_number\"",
    "/>",
    "CardDataStackView",
    ": Field where the user can enter the credit card's expiration date and verification code (CVV/CVC).",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.CardDataStackView",
    "android:id",
    "=",
    "\"@+id/cardDataStackView\"",
    "/>",
    "TextView",
    "for Voucher card type: This is a copy Yuno SDK shows when the card is",
    "VOUCHER",
    "type, you must set it below the CVV field.",
    "XML",
    "<",
    "TextView",
    "android:id",
    "=",
    "\"@+id/textView_voucher_copy\"",
    "android:visibility",
    "=",
    "\"gone\"",
    "/>",
    "TextFieldItemView",
    "for card holder's name: Field where the user can enter the credit card holder's name.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.TextFieldItemView",
    "android:id",
    "=",
    "\"@+id/textField_name\"",
    "/>",
    "SpinnerFieldItemView",
    "for identification document type: A selector where the credit card holder can choose their identification document type.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.SpinnerFieldItemView",
    "android:id",
    "=",
    "\"@+id/spinner_document_type\"",
    "/>",
    "TextFieldItemView",
    "for identification document number: Field where the user can enter the credit card holder's identification document number.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.TextFieldItemView",
    "android:id",
    "=",
    "\"@+id/textField_user_document\"",
    "/>",
    "PhoneInformationView",
    "for customer's phone number: Field where the user can enter his phone number if required. In addition to providing the Android",
    "id",
    ", it's required to have",
    "gone",
    "visibility.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.PhoneInformationView",
    "android:id",
    "=",
    "\"@+id/layout_phone_information\"",
    "android:visibility",
    "=",
    "\"gone\"",
    "/>",
    "Installments",
    ": Component that shows the spinner of card installments. In addition to providing the Android",
    "id",
    ", it's required to have",
    "gone",
    "visibility and you need to add the",
    "ShimmerFrameLayout",
    "dependency. \"implementation 'com.facebook.shimmer:shimmer:0.5.0'\"",
    "XML",
    "<",
    "LinearLayout",
    "android:id",
    "=",
    "\"@+id/container_installments\"",
    "android:orientation",
    "=",
    "\"vertical\"",
    ">",
    "<",
    "com.yuno.payments.features.base.ui.views.SpinnerFieldItemView",
    "android:id",
    "=",
    "\"@+id/spinner_installments\"",
    "android:layout_width",
    "=",
    "\"match_parent\"",
    "android:layout_height",
    "=",
    "\"wrap_content\"",
    "android:visibility",
    "=",
    "\"gone\"",
    "app:spinner_title",
    "=",
    "\"@string/payment.form_installments\"",
    "/>",
    "<",
    "com.facebook.shimmer.ShimmerFrameLayout",
    "android:id",
    "=",
    "\"@+id/shimmer_installments\"",
    "android:layout_width",
    "=",
    "\"match_parent\"",
    "android:layout_height",
    "=",
    "\"wrap_content\"",
    "android:foregroundGravity",
    "=",
    "\"center\"",
    "android:visibility",
    "=",
    "\"gone\"",
    ">",
    "<",
    "include",
    "layout",
    "=",
    "\"@layout/shimmer_component_field\"",
    "/>",
    "</",
    "com.facebook.shimmer.ShimmerFrameLayout",
    ">",
    "</",
    "LinearLayout",
    ">",
    "Yuno's",
    "TextView",
    ": A text to show that the form is verified by Yuno.",
    "XML",
    "<",
    "TextView",
    "android:id",
    "=",
    "\"@+id/textView_secure_payment\"",
    "/>",
    "CustomYunoSwitch",
    ": It's a switch component to let the user choose if the card is going to be used as credit or debit.",
    "In addition to providing the Android",
    "id",
    ", it's required to have",
    "gone",
    "visibility.",
    "XML",
    "<",
    "com.yuno.payments.features.base.ui.views.CustomYunoSwitch",
    "android:id",
    "=",
    "\"@+id/switch_cardType\"",
    "android:visibility",
    "=",
    "\"gone\"",
    "/>",
    "CustomYunoSwitch",
    ": A tooltip to show how the switch works. In addition to providing the Android",
    "id",
    ", it's required to have",
    "gone",
    "visibility. Yuno recommends positioning this component next to the switch.",
    "XML",
    "<",
    "ImageView",
    "android:id",
    "=",
    "\"@+id/switch_tooltip\"",
    "android:src",
    "=",
    "\"@drawable/ic_thin_info\"",
    "android:visibility",
    "=",
    "\"gone\"",
    "/>",
    "AppCompatCheckBox",
    ": A check box users can use to choose whether to save the credit card for future purchases.",
    "XML",
    "<",
    "androidx.appcompat.widget.AppCompatCheckBox",
    "android:id",
    "=",
    "\"@+id/checkBox_save_card\"",
    "/>",
    "Button",
    ": It validates the card form and continues the payment process. When the user clicks on this button, the SDK submits the form and sends the credit card information to Yuno.",
    "XML",
    "<",
    "Button",
    "android:id",
    "=",
    "\"@+id/button_complete_form\"",
    "/>"
  ],
  "https://docs.y.uno/docs/ios-sdk-integrations": [
    "iOS SDK Integrations",
    "Suggest Edits",
    "Yuno's iOS SDKs are designed to simplify the integration of payment processing functionality in your iOS applications. Developers can implement features more efficiently, reducing the need for extensive knowledge of payment protocols and infrastructure.",
    "Integration options",
    "Select one of the user-friendly iOS integration options available and kickstart your journey toward efficient payment processing:",
    "Full SDK",
    "Render the payment methods your company has available in the checkout and for user enrollment.",
    "Lite SDK (Payment)",
    "With this option, you control which payment methods will be shown to the user during checkout and enrollment.",
    "Lite SDK (Enrollment)",
    "Simplify the user enrollment of payment methods.",
    "Explore the SDK Project Example",
    "Yuno provides an example project of a running application using an SDK. You can access the",
    "project repository",
    "or",
    "download the project",
    ". In addition, you can access the",
    "Create Your First Payment With SDK",
    "guide available in the documentation."
  ],
  "https://docs.y.uno/docs/requirements-ios": [
    "Requirements",
    "Suggest Edits",
    "In order to implement the Yuno iOS SDK, first, you need to address the following requirements:",
    "Add",
    "CocoaPods",
    "to your project.",
    "Add",
    "Swift Package Manager",
    "to your project.",
    "Use iOS version 13.0 or above."
  ],
  "https://docs.y.uno/docs/full-checkout-ios": [
    "Full SDK",
    "Suggest Edits",
    "Step 1: Include the library in your project.",
    "1.1. To add the Yuno SDK to your iOS project, you need to install the Yuno SDK. If you do not have a Podfile, follow the",
    "CocoaPods guide",
    "to create one. After creating the Podfile, you will integrate the Yuno SDK with Cocoapods by adding the line below to your Podfile.",
    "Ruby",
    "pod",
    "'YunoSDK'",
    ",",
    "'~> 1.1.22'",
    "1.2. After that, you need to run the installation:",
    "Ruby",
    "pod",
    "install",
    "You will also need to install the",
    "Swift Package Manager",
    ". With the Swift package set up, add YunoSDK as a dependency, as presented in the following code snippet;",
    "Swift",
    "dependencies",
    ":",
    "[",
    ".package",
    "(",
    "url",
    ":",
    "\"https://github.com/yuno-payments/yuno-sdk-ios.git\"",
    ",",
    ".upToNextMajor",
    "(",
    "from",
    ":",
    "\"1.1.17\"",
    "))",
    "]",
    "Step 2: Initialize SDK with the public key",
    "2.1. To start running the Yuno iOS Full checkout, you first need to get your Yuno app ID and iOS API key. Then, import and initialize Yuno as presented in the following code snippet:",
    "Swift",
    "import",
    "YunoSDK",
    "Yuno",
    ".initialize",
    "(",
    "apiKey",
    ":",
    "\"<Your iOS API Key>\"",
    ",",
    "config",
    ":",
    "YunoConfig",
    "()",
    "// This is optional, by default it configures .oneStep card form and disables save card checkbox.",
    ")",
    "UISceneDelegate",
    "If your app is using a UISceneDelegate you will need to put your Yuno initialization code into your SceneDelegate.",
    "2.2. Configuration",
    "The Full checkout enables you to configure the appearance and process. It is an optional step that you configure through the class",
    "YunoConfig",
    ". If you want to set up the configurations, the following code block presents the elements that can be configured:",
    "Swift",
    "final",
    "class",
    "YunoConfig",
    "{",
    "let",
    "cardFormType",
    ":",
    "CardFormType",
    ",",
    "// This is optional, .oneStep by default, this is to choose Payment and Enrollment Card flow.",
    "let",
    "appearance",
    ":",
    "Yuno",
    ".Appearance",
    ",",
    "// This is optional, by default uses Yuno styles.",
    "let",
    "saveCardEnabled",
    ":",
    "Bool",
    ",",
    "// This is to choose if show save card checkbox on cards flows. It is false by default",
    "let",
    "cardFormFields",
    ":",
    "[",
    "YunoCardField",
    "],",
    "let",
    "keepLoader",
    ":",
    "Bool",
    ",",
    "}",
    "Below you find a description of each configuration variable available.",
    "Parameter",
    "Description",
    "cardFormType",
    "This field can be used to choose Payment and Enrollment Card flow. It's an optional property and considers .oneStep by default.",
    "appearance",
    "This optional field defines the appearance of the checkout. By default, it uses Yuno styles.",
    "saveCardEnabled",
    "This property can be used to choose if the",
    "Save Card",
    "checkbox is shown on card flows. It is false by default",
    "requestSecurityCode",
    "This field is optional (false by default) and can be used to request the security code when the payment is made with enrolled cards.",
    "Step 3: Start the checkout process",
    "The ViewController class is defined as a subclass of",
    "UIViewController",
    "and also adopts the",
    "YunoPaymentDelegate",
    "protocol. It overrides the",
    "viewDidLoad()",
    "method and calls",
    "Yuno.startCheckout(with: self)",
    ". The",
    "Yuno.startCheckout(with:)",
    "function is a function provided by the Yuno library, and it takes an instance of a class that conforms to the",
    "YunoPaymentDelegate",
    "protocol as an argument. By passing",
    "self",
    "(the current instance of",
    "ViewController",
    ") as the argument, the",
    "ViewController",
    "becomes the delegate.",
    "To start a new payment process using the Full checkout, you have to call the method",
    "YunoPaymentDelegate",
    "as a parameter, such as present in the following code snippet:",
    "Swift",
    "protocol",
    "YunoPaymentDelegate",
    ":",
    "AnyObject",
    "{",
    "var",
    "checkoutSession",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "countryCode",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "language",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "navigationController",
    ":",
    "UINavigationController",
    "?",
    "{",
    "get",
    "}",
    "func",
    "yunoCreatePayment",
    "(",
    "with",
    "token",
    ":",
    "String",
    ")",
    "func",
    "yunoPaymentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "}",
    "class",
    "ViewController",
    ":",
    "YunoPaymentDelegate",
    "{",
    "func",
    "viewDidLoad",
    "()",
    "{",
    "super",
    ".viewDidLoad",
    "()",
    "Yuno",
    ".startCheckout",
    "(",
    "with",
    ":",
    "self",
    ")",
    "}",
    "}",
    "The following table presents all the protocol requirements you have to provide and their descriptions.",
    "Parameter",
    "Description",
    "checkoutSession",
    "Refers to the current payment's checkout session.",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "navigationController",
    "This property represents the navigation controller used for presenting the payment flow, and it's an optional",
    "UINavigationController",
    "instance.",
    "yunoCreatePayment(with token: String)",
    "This method is responsible for creating a payment with the provided token. It takes a String parameter called",
    "token",
    ", which represents the payment token.",
    "yunoPaymentResult(\\_ result: Yuno.Result)",
    "This method is called when the payment process is completed, providing the result of the payment as a parameter of type Yuno.Result.",
    "Step 4: Add the SDK view to the checkout",
    "After creating a payment using Yuno's iOS Full checkout, you have to add the view present on the following code block to your layout to show the payment methods available:",
    "Swift",
    "Yuno",
    ".methodsView",
    "(",
    "delegate",
    ":",
    "self",
    ")",
    "generator",
    ".getPaymentMethodsView",
    "(",
    "checkoutSession",
    ":",
    "checkoutSession",
    ")",
    "{",
    "[",
    "weak",
    "self",
    "]",
    "(",
    "view",
    ":",
    "UIView",
    ")",
    "in",
    "// Add view to your superview",
    "}",
    "}",
    "Step 5: Initiate the payment process",
    "To effectively start a payment after displaying the payment methods, you have to call the method",
    "startPayment",
    ", as presented in the code snippet below:",
    "Swift",
    "Yuno",
    ".startPayment",
    "()",
    "Step 6: Get the OTT (One Time Token)",
    "At the end of this process, you can obtain the one-time token (OTT) to create the payment back-to-back. An example of retrieving the OTT is presented below:",
    "Swift",
    "func",
    "yunoCreatePayment",
    "(",
    "with",
    "token",
    ":",
    "String",
    ")",
    "{",
    "...",
    "}",
    "Step 7: Create the Payment",
    "Once you have completed the steps described before, you can create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue",
    ": We recommend integrating the",
    "continuePayment",
    "method of the SDK after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The create_payment API will inform you of this scenario via the",
    "sdk_action_required",
    "field of the response, which will be returned as true. The",
    "yuno.continuePayment()",
    "function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary. You need to call the following method:",
    "Swift",
    "Yuno",
    ".continuePayment",
    "(",
    "showPaymentStatus",
    ":",
    "Bool",
    ")",
    "The",
    "showPaymentStatus",
    "parameter is used to determine whether the payment status should be displayed or not. By passing",
    "true",
    "as an argument, the payment status might be shown, while passing",
    "false",
    "could indicate that the payment status should not be displayed.",
    "Note",
    "In Yuno's iOS Full SDK, the default value for",
    "showPaymentStatus",
    "is",
    "true",
    ".",
    "Callback",
    "After the payment is completed, the SDK can return different transaction states:",
    "success",
    ",",
    "fail",
    ",",
    "processing",
    ",",
    "reject",
    ",",
    "internalError",
    ", and",
    "userCancell",
    ".  The descriptions of each transaction state is presented in the table below.",
    "Transaction state",
    "Description",
    "success",
    "Indicates that the transaction or payment process has been completed successfully.",
    "fail",
    "This state indicates that the transaction or payment process has failed. It means that there was an error or issue during the payment process, preventing it from being completed successfully",
    "processing",
    "Indicates that the transaction or payment process is currently being processed. It is typically used when there is a delay in payment processing, such as waiting for approval from a third-party service or financial institution.",
    "reject",
    "This state indicates that the transaction has been rejected. The rejection can occur for various reasons, such as insufficient funds, fraudulent activity, or the request violates certain rules or policies.",
    "internalError",
    "It means that an unexpected error occurred within the system or infrastructure handling the payment process. This state suggests a problem on the server or backend side rather than an issue with the user's input or request.",
    "userCancell",
    "This state indicates that the user has voluntarily canceled or aborted the transaction or payment process. This state is typically used when there is an option for the user to cancel or abandon the payment process.",
    "To get the transaction state, you have to implement the delegate presented in the following piece of code:",
    "Swift",
    "enum",
    "Result",
    "{",
    "case",
    "reject",
    ",",
    "success",
    ",",
    "fail",
    ",",
    "processing",
    ",",
    "internalError",
    ",",
    "userCancell",
    "}",
    "func",
    "yunoPaymentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "{",
    "...",
    "}",
    "func",
    "yunoEnrollmentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "{",
    "...",
    "}",
    "Complementary Features",
    "Yuno iOS SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Loader",
    ": Control the use of the loader.",
    "Save card for future payments",
    ": In addition, you can display a checkbox for save or enroll cards using",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/lite-checkout-ios": [
    "Lite SDK (Payment)",
    "Suggest Edits",
    "Step 1: Include the library in your project.",
    "1.1. To add the Yuno SDK to your iOS project, you need to install the Yuno SDK. If you do not have a Podfile, follow the",
    "CocoaPods guide",
    "to create one. After creating the Podfile, you will integrate the Yuno SDK with Cocoapods by adding the line below to your Podfile.",
    "Ruby",
    "pod",
    "'YunoSDK'",
    ",",
    "'~> 1.1.22'",
    "1.2. After that, you need to run the installation:",
    "Ruby",
    "pod",
    "install",
    "You will also need to install the",
    "Swift Package Manager",
    ". With the Swift package set up, add YunoSDK as a dependency, as presented in the following code snippet;",
    "Swift",
    "dependencies",
    ":",
    "[",
    ".package",
    "(",
    "url",
    ":",
    "\"https://github.com/yuno-payments/yuno-sdk-ios.git\"",
    ",",
    ".upToNextMajor",
    "(",
    "from",
    ":",
    "\"1.1.17\"",
    "))",
    "]",
    "Step 2: Initialize SDK with the public key",
    "2.1. To start running the Yuno iOS Full checkout, you first need to get your Yuno app ID and iOS API key. Then, import and initialize Yuno as presented in the following code snippet:",
    "Swift",
    "import",
    "YunoSDK",
    "Yuno",
    ".initialize",
    "(",
    "apiKey",
    ":",
    "\"<Your iOS API Key>\"",
    ",",
    "config",
    ":",
    "YunoConfig",
    "()",
    "// This is optional, by default it configures .oneStep card form and disables save card checkbox.",
    ")",
    "UISceneDelegate",
    "If your app is using a UISceneDelegate you will need to put your Yuno initialization code into your SceneDelegate.",
    "2.2. Configuration",
    "The Lite checkout enables you to configure the appearance and process. It is an optional step that you configure through the class",
    "YunoConfig",
    ". If you want to set up the configurations, the following code block presents the elements that can be configured:",
    "Swift",
    "final",
    "class",
    "YunoConfig",
    "{",
    "let",
    "cardFormType",
    ":",
    "CardFormType",
    ",",
    "// This is optional, .oneStep by default, this is to choose Payment and Enrollment Card flow.",
    "let",
    "appearance",
    ":",
    "Yuno",
    ".Appearance",
    ",",
    "// This is optional, by default uses Yuno styles.",
    "let",
    "saveCardEnabled",
    ":",
    "Bool",
    ",",
    "// This is to choose if show save card checkbox on cards flows. It is false by default",
    "let",
    "cardFormFields",
    ":",
    "[",
    "YunoCardField",
    "],",
    "let",
    "keepLoader",
    ":",
    "Bool",
    ",",
    "}",
    "Below you find a description of each configuration variable available.",
    "Parameter",
    "Description",
    "cardFormType",
    "This field can be used to choose Payment and Enrollment Card flow. It's an optional property and considers .oneStep by default.",
    "appearance",
    "This optional field defines the appearance of the checkout. By default, it uses Yuno styles.",
    "saveCardEnabled",
    "This property can be used to choose if the",
    "Save Card",
    "checkbox is shown on card flows. It is false by default",
    "requestSecurityCode",
    "This field is optional (false by default) and can be used to request the security code when the payment is made with enrolled cards.",
    "Step 3: Start the checkout process",
    "The ViewController class is defined as a subclass of",
    "UIViewController",
    "and also adopts the",
    "YunoPaymentDelegate",
    "protocol. It overrides the",
    "viewDidLoad()",
    "method and calls",
    "Yuno.startCheckout(with: self)",
    ". The",
    "Yuno.startCheckout(with:)",
    "function is a function provided by the Yuno library, and it takes an instance of a class that conforms to the",
    "YunoPaymentDelegate",
    "protocol as an argument. By passing",
    "self",
    "(the current instance of",
    "ViewController",
    ") as the argument, the",
    "ViewController",
    "becomes the delegate.",
    "To start a new payment process using the Lite checkout, you have to call the method",
    "YunoPaymentDelegate",
    "as a parameter, such as present in the following code snippet:",
    "Swift",
    "protocol",
    "YunoPaymentDelegate",
    ":",
    "AnyObject",
    "{",
    "var",
    "checkoutSession",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "countryCode",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "language",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "navigationController",
    ":",
    "UINavigationController",
    "?",
    "{",
    "get",
    "}",
    "func",
    "yunoCreatePayment",
    "(",
    "with",
    "token",
    ":",
    "String",
    ")",
    "func",
    "yunoPaymentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "}",
    "class",
    "ViewController",
    ":",
    "YunoPaymentDelegate",
    "{",
    "func",
    "viewDidLoad",
    "()",
    "{",
    "super",
    ".viewDidLoad",
    "()",
    "Yuno",
    ".startCheckout",
    "(",
    "with",
    ":",
    "self",
    ")",
    "}",
    "}",
    "The following table presents all the protocol's requirements you have to provide and their descriptions.",
    "Parameter",
    "Description",
    "checkoutSession",
    "Refers to the current payment's checkout session.",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "navigationController",
    "This property represents the navigation controller used for presenting the payment flow, and it's an optional",
    "UINavigationController",
    "instance.",
    "yunoCreatePayment(with token: String)",
    "This method is responsible for creating a payment with the provided token. It takes a String parameter called",
    "token",
    ", which represents the payment token.",
    "yunoPaymentResult(\\_ result: Yuno.Result)",
    "This method is called when the payment process is completed, providing the result of the payment as a parameter of type Yuno.Result.",
    "Step 4: Initiate the payment process",
    "To effectively start a payment after displaying the payment methods, you have to call the method",
    "startPaymentLite",
    ", as presented in the code snippet below:",
    "Swift",
    "Yuno",
    ".startPaymentLite",
    "()",
    "For the Lite checkout version, you need to send an additional parameter, which can be the vaulted token and/or the payment method the customer will use to make the payment.",
    "Swift",
    "protocol",
    "PaymentMethodSelected",
    "{",
    "var",
    "vaultedToken",
    ":",
    "String",
    "?",
    "{",
    "get",
    "}",
    "var",
    "paymentMethodType",
    ":",
    "String",
    "{",
    "get",
    "}",
    "}",
    "Yuno",
    ".startPaymentLite",
    "(",
    "paymentSelected",
    ":",
    "paymentSelected",
    ")",
    "Step 6: Get the OTT (One Time Token)",
    "At the end of this process, you can obtain the one-time token (OTT) to create the payment back-to-back. An example of retrieving the OTT is presented below:",
    "Swift",
    "func",
    "yunoCreatePayment",
    "(",
    "with",
    "token",
    ":",
    "String",
    ")",
    "{",
    "...",
    "}",
    "Step 7: Create the Payment",
    "Once you have completed the steps described before, you can create a payment. The back-to-back payment creation must be carried out using the",
    "Create Payment endpoint",
    ". The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.",
    "Continue",
    ": We recommend integrating the",
    "continuePayment",
    "method of the SDK after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The create_payment API will inform you of this scenario via the",
    "sdk_action_required",
    "field of the response, which will be returned as true. The",
    "yuno.continuePayment()",
    "function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary. You need to call the following method:",
    "Swift",
    "Yuno",
    ".continuePayment",
    "(",
    "showPaymentStatus",
    ":",
    "Bool",
    ")",
    "The",
    "showPaymentStatus",
    "parameter is used to determine whether the payment status should be displayed or not. By passing",
    "true",
    "as an argument, the payment status might be shown, while passing",
    "false",
    "could indicate that the payment status should not be displayed.",
    "Note",
    "In Yuno's iOS Lite SDK, the default value for",
    "showPaymentStatus",
    "is",
    "true",
    ".",
    "Callback",
    "After the payment is completed, the SDK can return different transaction states:",
    "success",
    ",",
    "fail",
    ",",
    "processing",
    ",",
    "reject",
    ",",
    "internalError",
    ", and",
    "userCancell",
    ".  The descriptions of each transaction state is presented in the table below.",
    "Transaction state",
    "Description",
    "success",
    "Indicates that the transaction or payment process has been completed successfully.",
    "fail",
    "This state indicates that the transaction or payment process has failed. It means that there was an error or issue during the payment process, preventing it from being completed successfully",
    "processing",
    "Indicates that the transaction or payment process is currently being processed. It is typically used when there is a delay in processing the payment, such as waiting for approval from a third-party service or financial institution.",
    "reject",
    "This state indicates that the transaction has been rejected. The rejection can occur for various reasons, such as insufficient funds, fraudulent activity, or the request violates certain rules or policies.",
    "internalError",
    "It means that an unexpected error occurred within the system or infrastructure handling the payment process. This state suggests that there was a problem on the server or backend side rather than an issue with the user's input or request.",
    "userCancell",
    "This state indicates that the user has voluntarily canceled or aborted the transaction or payment process. This state is typically used when there is an option for the user to cancel or abandon the payment process.",
    "In order to get the transaction state, you have to implement the delegate presented in the following piece of code:",
    "Swift",
    "enum",
    "Result",
    "{",
    "case",
    "reject",
    ",",
    "success",
    ",",
    "fail",
    ",",
    "processing",
    ",",
    "internalError",
    ",",
    "userCancell",
    "}",
    "func",
    "yunoPaymentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "{",
    "...",
    "}",
    "func",
    "yunoEnrollmentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "{",
    "...",
    "}",
    "Complementary Features",
    "Yuno iOS SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Loader",
    ": Control the use of the loader.",
    "Save card for future payments",
    ": In addition, you can display a checkbox for save or enroll cards using",
    "cardSaveEnable: true",
    ". Below you can find examples of the checkbox for both card form renders.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/enrollment-ios": [
    "Lite SDK (Enrollment)",
    "Suggest Edits",
    "Step 1: Include the library in your project.",
    "1.1. To add the Yuno SDK to your iOS project, you need to install the Yuno SDK. If you do not have a Podfile, follow the",
    "CocoaPods guide",
    "to create one. After creating the Podfile, you will integrate the Yuno SDK with Cocoapods by adding the line below to your Podfile.",
    "Ruby",
    "pod",
    "'YunoSDK'",
    ",",
    "'~> 1.1.22'",
    "1.2. After that, you need to run the installation:",
    "Ruby",
    "pod",
    "install",
    "You will also need to install the",
    "Swift Package Manager",
    ". With the Swift package set up, add YunoSDK as a dependency, as presented in the following code snippet;",
    "Swift",
    "dependencies",
    ":",
    "[",
    ".package",
    "(",
    "url",
    ":",
    "\"https://github.com/yuno-payments/yuno-sdk-ios.git\"",
    ",",
    ".upToNextMajor",
    "(",
    "from",
    ":",
    "\"1.1.17\"",
    "))",
    "]",
    "Step 2: Enroll a new payment method",
    "Yuno's iOS SDK provides an enrollment feature for payment methods integrated into Yuno. To display a view controller with the flow for integrating a new payment method, call the method presented in the following code snippet:",
    "Swift",
    "protocol",
    "YunoEnrollmentDelegate",
    ":",
    "AnyObject",
    "{",
    "var",
    "customerSession",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "countryCode",
    ":",
    "String",
    "{",
    "get",
    "}",
    "var",
    "language",
    ":",
    "String",
    "{",
    "get",
    "}",
    "func",
    "yunoEnrollmentResult",
    "(",
    "_",
    "result",
    ":",
    "Yuno",
    ".Result",
    ")",
    "}",
    "class",
    "ViewController",
    ":",
    "YunoEnrollmentDelegate",
    "{",
    "@IBAction",
    "func",
    "startEnrollment",
    "(",
    "sender",
    ":",
    "Any",
    ")",
    "{",
    "Yuno",
    ".enrollPayment",
    "(",
    "with",
    ":",
    "self",
    ",",
    "showPaymentStatus",
    ":",
    "Bool",
    ")",
    "}",
    "}",
    "The following table presents all the protocol requirements you have to provide and their descriptions.",
    "Parameter",
    "Description",
    "customerSession",
    "Refers to the current payment's customer session.",
    "countryCode",
    "This parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.",
    "language",
    "Defines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).",
    "yunoEnrollmentResult(\\_ result: Yuno.Result)",
    "This method is called when the enrollment process is completed, providing the result of the enrollment as a parameter of type",
    "Yuno.Result",
    ".",
    "The ViewController class is defined as a subclass of",
    "UIViewController",
    "and also adopts the",
    "YunoEnrollmentDelegate",
    "protocol. It includes an",
    "@IBAction",
    "function called",
    "startEnrollment(sender: Any)",
    "which is triggered when a specific action, such as a button press, occurs in the user interface.",
    "Complementary Features",
    "Yuno iOS SDK provides additional services and configurations you can use to improve customers' experience. Use the",
    "SDK Customizations",
    "to change the SDK appearance to match your brand or to configure the loader.",
    "Loader",
    ": Control the use of the loader.",
    "You also can choose one of the render options for the card form. Below you find screenshots presenting the difference between the",
    "cardFormType",
    "ONE_STEP",
    "and",
    "STEP_BY_STEP",
    ".",
    "Step by step",
    "One step",
    "SDK Customizations",
    ": Change the SDK appearance to match your brand."
  ],
  "https://docs.y.uno/docs/loader-1": [
    "Loader",
    "Suggest Edits",
    "Keep loader",
    "By default, Yuno will stop the loading after processing transaction operations. You can make it persist via YunoConfig by setting",
    "keepLoader: true",
    ".",
    "Swift",
    "Yuno",
    ".initialize",
    "(",
    "apiKey",
    ":",
    "apiKey",
    ",",
    "config",
    ":",
    "YunoConfig",
    "(",
    "keepLoader",
    ":",
    "true",
    ")",
    ")",
    "This will make the loader persist until you call either of the following functions (this only applies to payment flow):",
    "Swift",
    "Yuno",
    ".hideLoader",
    "()",
    "or",
    "Swift",
    "Yuno",
    ".continuePayment",
    "(",
    "showPaymentStatus",
    ":",
    "Bool",
    ")"
  ],
  "https://docs.y.uno/docs/sdk-customizations-ios": [
    "SDK Customizations",
    "Suggest Edits",
    "Card form customization",
    "With",
    "YunoConfig",
    ", you can customize the card form using the",
    "cardFormFields",
    "property. You can decide in which order the fields will be shown. An example is presented in the following code piece:",
    "Swift",
    "let",
    "cardFormFields",
    ":",
    "[",
    "YunoCardField",
    "]",
    "=",
    "[",
    ".holderName",
    ",",
    ".expirationDateAndSecurityCode",
    ",",
    ".cardNumber",
    ",",
    ".documentType",
    ",",
    ".documentNumber",
    ",",
    ".saveCardCheck",
    "]",
    "Yuno",
    ".initialize",
    "(",
    "apiKey",
    ":",
    "apiKey",
    ",",
    "config",
    ":",
    "YunoConfig",
    "(",
    "cardFormFields",
    ":",
    "cardFormFields",
    ")",
    ")",
    "Appearance",
    "You can also customize the appearance of the SDK by setting up the appearance field.",
    "Swift",
    "let",
    "appearance",
    "=",
    "Yuno",
    ".Appearance",
    "(",
    "fontFamily",
    ":",
    "\"Climate Crisis\"",
    ",",
    "accentColor",
    ":",
    ".orange",
    ",",
    "buttonBackgroundColor",
    ":",
    ".yellow",
    ",",
    "buttonTitleColor",
    ":",
    ".black",
    ",",
    "buttonBorderColor",
    ":",
    ".black",
    ",",
    "secondaryButtonBackgroundColor",
    ":",
    ".yellow",
    ",",
    "secondaryButtonTitleColor",
    ":",
    ".black",
    ",",
    "secondaryButtonBorderColor",
    ":",
    ".black",
    ",",
    "disableButtonBackgroundColor",
    ":",
    ".gray",
    ",",
    "disableButtonTitleColor",
    ":",
    ".black",
    ")",
    "Yuno",
    ".initialize",
    "(",
    "apiKey",
    ":",
    "apiKey",
    ",",
    "config",
    ":",
    "YunoConfig",
    "(",
    "appearance",
    ":",
    "appearance",
    ")",
    ")"
  ],
  "https://docs.y.uno/docs/vtex": [
    "VTEX",
    "Suggest Edits",
    "Yuno and VTEX have joined forces to simplify payment processes for merchants worldwide. This partnership aims to streamline the payment experience and provide merchants with various payment methods catering to their customer's preferences.",
    "By integrating Yuno's payment orchestration platform with VTEX's e-commerce solution, merchants can easily manage payments and offer diverse payment options. Yuno ensures customers can choose their preferred payment method from local cards to digital wallets. Yuno's plugin allows your store to accept payments seamlessly without redirecting customers to external pages, enhancing the shopping experience and increasing the conversion rate.",
    "Yuno's plugin for VTEX is PCI compliant, ensuring that Yuno meets rigorous security standards when handling card data. Merchants can have peace of mind knowing that their customers' payment information is handled with utmost security and privacy.",
    "The seamless integration between Yuno and VTEX makes it easy for merchants to incorporate Yuno's payment orchestration system into their existing setup. This enables them to focus on delivering exceptional products and services while providing a smooth payment experience for their customers.",
    "Payment methods available",
    "Yuno offers several payment methods to meet your needs. The Yuno plugin on VTEX currently supports card payments, covering credit and debit cards. Our team is actively collaborating with VTEX to ensure that all Yuno connections are made available to you as soon as possible. We are committed to expanding the available payment options to enhance your experience.",
    "Plugin integration",
    "To start using the Yuno plugin on your VTEX store, you will need two essential elements:",
    "A VTEX store.",
    "You will use the Application Key and the Application Token from your store account. Check the VTEX",
    "Application Keys",
    "tutorials to understand how to set and access this information.",
    "Application Key: a private key generated when the Yuno account became productive.",
    "Application Token: a productive public key generated when the Conekta account became productive.",
    "A Yuno account.",
    "If you don't have a Yuno account, sign up at the",
    "Yuno Merchant Dashboard",
    ". You will use your Account ID, Public API Key, and Private API Key from your Yuno account.",
    "This guide",
    "presents how to access your API Keys on the Yuno Merchant Dashboard.",
    "Once you have this information, you can register the Yuno plugin affiliation. Follow the steps outlined in the",
    "Registering Yuno affiliation",
    "section. After completing the affiliation, you can",
    "configure payment conditions",
    "using the Yuno plugin. These two straightforward configuration processes will enable your clients on VTEX to access the Yuno checkout for making payments on their orders."
  ],
  "https://docs.y.uno/docs/registering-yuno-affiliation": [
    "Registering Yuno affiliation",
    "Suggest Edits",
    "The first step to connect the Yuno plugin to your VTEX store is to enable the plugin.  Below you find a step-by-step guide on how to register the affiliation.",
    "Log into your VTEX store account.",
    "In the VTEX Admin, navigate to",
    "Store Settings",
    ">",
    "Payment",
    ">",
    "Settings",
    ". Alternatively, you can use the search bar at the top of the page and type",
    "Settings",
    "to find it.",
    "Select the",
    "Gateway Affiliations",
    "tab, then click the",
    "+",
    "button to add a new affiliation.",
    "You will see a list of plugins. Locate the Yuno plugin and click on it.",
    "On the new page, enter the necessary information for the affiliation. We recommend using \"Yuno\" as the affiliation name. Fill in the VTEX account details (Application Key and Application Token) as well as the Yuno account details (Account ID, Public API Key, and Secret API Key). Check the",
    "Get your credentials guide",
    "to learn how to access your account details. For Payment settlement, we recommend you select",
    "Use Recommended Payment Processor Behavior",
    ".",
    "Once you have entered all the required information, click on the",
    "Save",
    "button to save the affiliation.",
    "After registering the Yuno plugin affiliation, you can proceed to configure the payment methods that will be processed by Yuno. Check the",
    "Configuring payment conditions",
    "section to learn how to add payment options to your VTEX account using Yuno."
  ],
  "https://docs.y.uno/docs/configuring-payment-conditions": [
    "Configuring payment conditions",
    "Suggest Edits",
    "After integrating the Yuno plugin into your VTEX account, you can take advantage of Yuno solutions. In this step, you will configure payment conditions on the VTEX platform. Payment conditions are the methods of payment displayed on the website for checkout. This functionality enables you to configure a range of choices, including installment plans and interest rates.",
    "You can configure payment conditions for each payment available on VTEX. To help you understand the process, the step-by-step guide below presents how to configure a payment condition when the user selects Visa credit card as the payment method.",
    "First, navigate to",
    "Store Settings",
    ">",
    "Payment",
    ">",
    "Settings",
    "and select",
    "Payment Conditions",
    ".",
    "On this page, you find all already configured payment conditions. To add a new one, click the",
    "+",
    "button.",
    "Choose the payment condition to configure. In this example, Visa credit card was chosen.",
    "On the new page, for",
    "Process with affiliation",
    "select",
    "Yuno",
    ". This ensures that Yuno will be your processing gateway for Visa credit card payments. You can also add conditions and configurations for full or installment payments on this page.",
    "Click on",
    "Save",
    ".",
    "After concluding step 5, you have configured and made the Visa credit card payment method available for your clients. Returning to the",
    "Payment Conditions",
    "page, you can confirm it is active. For further information on configuring payment conditions considering installments with or without interest, check the",
    "VTEX page",
    ". Now, when your customers arrive at the checkout phase and select credit card as the payment method, the Yuno checkout will gather all the information required for fraud screening and three d secure services in the background while using VTEX credit card form:"
  ],
  "https://docs.y.uno/docs/webhooks": [
    "Webhooks",
    "Suggest Edits",
    "What is a webhook",
    "Webhooks enable apps to provide real-time information whenever an event happens without needing constant requests. They are a passive method to receive data between two systems through an HTTP POST. After configuring the Yuno webhooks, you will receive event notifications every time an activity or a function is generated within the Yuno flow.",
    "Why do we recommend you use webhooks?",
    "Webhooks are the best way to ensure your system is up-to-date with payment progress and status. Since the event notifications trigger automatically, your system won't need to perform recurrent requests to Yuno. You will process the payment information on demand.",
    "What do you need to know before start using webhooks?",
    "To start using Yuno’s webhooks, you need to build a public REST API to receive event notifications (POST request). That means the REST API you will build should not require any authentication or access restriction through a header. Despite using a public API, the communication system is very safe since Yuno event notifications will not be available to the public and will use a unique URL to communicate only to your REST API."
  ],
  "https://docs.y.uno/docs/configure-webhooks": [
    "Configure Webhooks",
    "Suggest Edits",
    "To configure your Webhooks, you need to provide Yuno's  with:",
    "URL to receive notifications",
    "API_key",
    "(x-api-key) and",
    "API_secret",
    "(x-secret) from your side (with no format restrictions) for us to send in the notification header so your dev team can identify Yuno Webhooks.",
    "A name to identify each endpoint in the dashboard.",
    "Once configured, you'll need to define which events you want to list for the enabled webhook. The webhook will be sent whenever one or more registered events occur, avoiding constant searches for answers.",
    "You can configure different webhooks using the",
    "Yuno Merchant Dashboard",
    ". At the",
    "Developers",
    "tab, you can choose",
    "Webhooks",
    ". To create a new webhook, you need to name it, define the endpoint, and select the trigger event. The image below shows the side panel to add a webhook.",
    "In the",
    "Yuno Merchant Dashboard",
    "Developers tab, you can activate and deactivate webhooks using the",
    "Status",
    "toggle button.",
    "Access the",
    "Webhooks Examples",
    "page to check examples for payment and enrollment notification events.",
    "Receipt confirmation process",
    "Yuno webhooks expect to receive an HTTP 200 OK status as a response to indicate that the webhook was received. The merchant system response does not need to provide any information on the body request, only the HTTP 200 status. In case of not receiving a response at the specified time, Yuno webhooks will send the event notification up to seven times to avoid information loss. The table below presents the webhooks notification schedule and the confirmation waiting time.",
    "Event",
    "Deadline after the first try",
    "Confirmation waiting time",
    "First try",
    "-",
    "23 seconds",
    "Second try",
    "5 minutes",
    "7 seconds",
    "Third try",
    "50 minutes",
    "7 seconds",
    "Fourth try",
    "6 hours",
    "7 seconds",
    "Fifth try",
    "24 hours",
    "7 seconds",
    "Sixth try",
    "48 hours",
    "7 seconds",
    "Seventh try",
    "96 hours",
    "7 seconds",
    "Webhooks event types",
    "Depending on the type of event, you will receive a different type of webhook and event. The next table presents the possible event types for enrollments and payments currently available.",
    "type",
    "type_event",
    "enrollment",
    "enroll",
    "enrollment",
    "unenroll",
    "enrollment",
    "expiration",
    "payment",
    "purchase",
    "payment",
    "authorize",
    "payment",
    "capture",
    "payment",
    "refund",
    "payment",
    "cancel",
    "payment",
    "verify",
    "payment",
    "chargeback"
  ],
  "https://docs.y.uno/docs/examples": [
    "Object and Examples",
    "Suggest Edits",
    "Webhook attributes",
    "The attributes of the JSON for the Yuno webhooks are listed below:",
    "account_id",
    "string",
    "The unique identifier of the account in Yuno (MAX 64 ; MIN 36).",
    "type",
    "string",
    "Specifies the notification type.",
    "type_event",
    "string",
    "Specifies the event notification type.",
    "version",
    "string",
    "Specifies the version of the webhook sent. Currently 2.",
    "retry",
    "string",
    "Specifies the number of retries for that notification.",
    "data",
    "string",
    "Specifies the",
    "payment",
    "(for payment type) or",
    "payment method object",
    "(for enrollment).",
    "Examples",
    "Yuno provides several webhooks related to enrollment and payment notifications. Here you will find some examples of data structures related to each event.",
    "Payment",
    "Payment Webhook V2",
    "The next JSON object presents an example of a data structure related to a payment event from Webhook V2.",
    "JSON",
    "{",
    "\"account_id\"",
    ":",
    "\"f7c5fe77-721b-49c2-84d3-957748df3c2c\"",
    ",",
    "\"type\"",
    ":",
    "\"payment\"",
    ",",
    "\"type_event\"",
    ":",
    "\"payment.purchase\"",
    ",",
    "\"version\"",
    ":",
    "2",
    ",",
    "\"retry\"",
    ":",
    "0",
    ",",
    "\"data\"",
    ": {",
    "\"payment\"",
    ":{",
    "\"id\"",
    ":",
    "\"f42cfadc-6725-4d2e-8bab-5b33344a9ea8\"",
    ",",
    "\"account_code\"",
    ":",
    "\"dbf0c133-86bc-4be0-94a5-ca2ff6778451\"",
    ",",
    "\"additional_data\"",
    ": {",
    "\"order\"",
    ": {",
    "\"fee_amount\"",
    ":",
    "null",
    ",",
    "\"items\"",
    ": [],",
    "\"shipping_amount\"",
    ":",
    "null",
    "}\n        },",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"value\"",
    ":",
    "436",
    "},",
    "\"checkout\"",
    ": {",
    "\"sdk_action_required\"",
    ":",
    "false",
    ",",
    "\"session\"",
    ":",
    "\"69405158-638c-4f2e-891b-9620207ded1e\"",
    "},",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2022-05-20T02:00:40.587422Z\"",
    ",",
    "\"customer_payer\"",
    ": {",
    "\"billing_address\"",
    ": {",
    "\"address_line1\"",
    ":",
    "null",
    ",",
    "\"address_line2\"",
    ":",
    "null",
    ",",
    "\"city\"",
    ":",
    "\"Bogota\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "},",
    "\"browser_info\"",
    ": {",
    "\"accept_header\"",
    ":",
    "\"string\"",
    ",",
    "\"color_depth\"",
    ":",
    "\"string\"",
    ",",
    "\"javascript_enabled\"",
    ":",
    "\"string\"",
    ",",
    "\"language\"",
    ":",
    "\"string\"",
    ",",
    "\"screen_height\"",
    ":",
    "\"string\"",
    ",",
    "\"screen_width\"",
    ":",
    "\"string\"",
    ",",
    "\"user_agent\"",
    ":",
    "\"string\"",
    "},",
    "\"date_of_birth\"",
    ":",
    "\"1990-02-28\"",
    ",",
    "\"device_fingerprint\"",
    ":",
    "\"hi88287gbd8d7d782ge....\"",
    ",",
    "\"document\"",
    ": {",
    "\"document_number\"",
    ":",
    "\"351.040.753-97\"",
    ",",
    "\"document_type\"",
    ":",
    "\"CPF\"",
    "},",
    "\"email\"",
    ":",
    "\"pepitoperez@y.uno\"",
    ",",
    "\"first_name\"",
    ":",
    "\"Pepito\"",
    ",",
    "\"gender\"",
    ":",
    "\"MALE\"",
    ",",
    "\"id\"",
    ":",
    "172",
    ",",
    "\"ip_address\"",
    ":",
    "\"192.168.123.167\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Perez\"",
    ",",
    "\"nationality\"",
    ":",
    "\"BR\"",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"example00234\"",
    ",",
    "\"phone\"",
    ": {",
    "\"country_code\"",
    ":",
    "\"57\"",
    ",",
    "\"number\"",
    ":",
    "\"3132450765\"",
    "},",
    "\"shipping_address\"",
    ": {",
    "\"address_line1\"",
    ":",
    "null",
    ",",
    "\"address_line2\"",
    ":",
    "null",
    ",",
    "\"city\"",
    ":",
    "\"Bogota\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "}\n        },",
    "\"description\"",
    ":",
    "\"Test Dlocal 09052022-21\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000022\"",
    ",",
    "\"organization_code\"",
    ":",
    "\"95f37072-2afd-4dab-b256-88ca61e43c9d\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"transactions\"",
    ": {",
    "\"amount\"",
    ":",
    "436",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"id\"",
    ":",
    "\"d30cf2c7-5f0b-46ae-b949-34eb24e2ae8b\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2022-05-20T02:00:40.596002Z\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"token\"",
    ":",
    "\"49ba355c-d03a-4fe2-9233-cdddba690d97\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vault_on_success\"",
    ":",
    "false",
    ",",
    "\"vaulted_token\"",
    ":",
    "\"49ba355c-d03a-4fe2-9233-cdddba690d97\"",
    ",",
    "\"payment_method_detail\"",
    ":{",
    "\"card\"",
    ":{",
    "\"verify\"",
    ":",
    "null",
    ",",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "null",
    ",",
    "\"installments_amount\"",
    ":",
    "null",
    ",",
    "\"installments_type\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ":{",
    "\"holder_name\"",
    ":",
    "\"Fannie Weissnat\"",
    ",",
    "\"iin\"",
    ":",
    "\"41961111\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0010\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"METABANK\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"PREPAID RELOADABLE\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    "}\n                }\n            },",
    "\"provider_data\"",
    ": {",
    "\"id\"",
    ":",
    "\"DLOCAL\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"2104911d-5df9-429e-8488-ad41abea1a4b\"",
    ",",
    "\"account_id\"",
    ":",
    "\"9990128\"",
    ",",
    "\"status\"",
    ":",
    "\"accredited\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"approved\"",
    ",",
    "\"raw_response\"",
    ":",
    "\"JSON\"",
    "},",
    "\"provider_id\"",
    ":",
    "\"DLOCAL\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2022-05-20T02:01:05.509007Z\"",
    "},",
    "\"subscription_id\"",
    ":",
    "null",
    ",",
    "\"payment_link_id\"",
    ":",
    "null",
    ",",
    "\"updated_at\"",
    ":",
    "\"2022-05-20T02:01:05.509009Z\"",
    "}\n    }\n  \n  }",
    "Payment Webhook V1",
    "The next JSON object presents an example of a data structure related to a payment event from Webhook V1.",
    "JSON",
    "{",
    "\"payment\"",
    ":{",
    "\"code\"",
    ":",
    "\"b3da6717-7949-454e-8699-e449bfaccb69\"",
    ",",
    "\"id\"",
    ":",
    "\"b3da6717-7949-454e-8699-e449bfaccb69\"",
    ",",
    "\"idempotency_key\"",
    ":",
    "\"28f14927-421b-4424-b4d2-5de4d83ca138\"",
    ",",
    "\"organization_code\"",
    ":",
    "\"9c99108c-7681-4d48-acca-bce037685e99\"",
    ",",
    "\"account_code\"",
    ":",
    "\"c004cfd7-0c65-4add-b9b3-3d7e3949c9f1\"",
    ",",
    "\"account_id\"",
    ":",
    "\"c004cfd7-0c65-4add-b9b3-3d7e3949c9f1\"",
    ",",
    "\"description\"",
    ":",
    "\"test description\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"APPROVED\"",
    ",",
    "\"order_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2023-03-23T00:26:38.093810Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2023-03-23T00:26:51.285333Z\"",
    ",",
    "\"amount\"",
    ":{",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "2000.0",
    ",",
    "\"refunded\"",
    ":",
    "0.0",
    ",",
    "\"captured\"",
    ":",
    "0.0",
    "},",
    "\"checkout\"",
    ":{",
    "\"session\"",
    ":",
    "\"fb98b19d-39c0-42d2-bed6-438605458964\"",
    ",",
    "\"sdk_action_required\"",
    ":",
    "false",
    "},",
    "\"customer_payer\"",
    ":{",
    "\"code\"",
    ":",
    "\"8122d1f5-c07d-4d88-9dfe-a09ccdaeda0b\"",
    ",",
    "\"id\"",
    ":",
    "\"8122d1f5-c07d-4d88-9dfe-a09ccdaeda0b\"",
    ",",
    "\"organization_customer_external_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"first_name\"",
    ":",
    "\"Aaron\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Hegmann\"",
    ",",
    "\"gender\"",
    ":",
    "\"F\"",
    ",",
    "\"date_of_birth\"",
    ":",
    "\"1990-02-28\"",
    ",",
    "\"email\"",
    ":",
    "\"andrea@y.uno\"",
    ",",
    "\"nationality\"",
    ":",
    "\"CO\"",
    ",",
    "\"ip_address\"",
    ":",
    "\"192.168.123.167\"",
    ",",
    "\"device_fingerprint\"",
    ":",
    "\"278994bb-9ece-5c63-8c44-c03481851625\"",
    ",",
    "\"browser_info\"",
    ":",
    "null",
    ",",
    "\"document\"",
    ":{",
    "\"document_number\"",
    ":",
    "\"1032765432\"",
    ",",
    "\"document_type\"",
    ":",
    "\"CC\"",
    "},",
    "\"billing_address\"",
    ":{",
    "\"address_line_1\"",
    ":",
    "\"Calle 34 # 56 - 78\"",
    ",",
    "\"address_line_2\"",
    ":",
    "\"Apartamento 502, Torre I\"",
    ",",
    "\"city\"",
    ":",
    "\"Bogotá\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "},",
    "\"shipping_address\"",
    ":{",
    "\"address_line_1\"",
    ":",
    "\"Calle 34 # 56 - 78\"",
    ",",
    "\"address_line_2\"",
    ":",
    "\"Apartamento 502, Torre I\"",
    ",",
    "\"city\"",
    ":",
    "\"Bogotá\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "},",
    "\"phone\"",
    ":{",
    "\"country_code\"",
    ":",
    "\"57\"",
    ",",
    "\"number\"",
    ":",
    "\"3991111111\"",
    "}\n      },",
    "\"additional_data\"",
    ":{",
    "\"order\"",
    ":{",
    "\"shipping_amount\"",
    ":",
    "0.0",
    ",",
    "\"fee_amount\"",
    ":",
    "0.0",
    ",",
    "\"items\"",
    ":[\n               {",
    "\"id\"",
    ":",
    "\"123AD\"",
    ",",
    "\"name\"",
    ":",
    "\"Skirt\"",
    ",",
    "\"quantity\"",
    ":",
    "1",
    ",",
    "\"unit_amount\"",
    ":",
    "2000.0",
    ",",
    "\"category\"",
    ":",
    "\"Clothes\"",
    ",",
    "\"brand\"",
    ":",
    "\"XYZ\"",
    ",",
    "\"sku_code\"",
    ":",
    "\"8765432109\"",
    ",",
    "\"manufacture_part_number\"",
    ":",
    "\"XYZ123456\"",
    "}\n            ]\n         },",
    "\"airline\"",
    ":",
    "null",
    "},",
    "\"transactions\"",
    ":{",
    "\"code\"",
    ":",
    "\"98c80022-fe05-4b9b-b478-2e102fc72cc3\"",
    ",",
    "\"id\"",
    ":",
    "\"98c80022-fe05-4b9b-b478-2e102fc72cc3\"",
    ",",
    "\"type\"",
    ":",
    "\"PURCHASE\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"amount\"",
    ":",
    "2000.0",
    ",",
    "\"provider_id\"",
    ":",
    "\"KUSHKI\"",
    ",",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "null",
    ",",
    "\"response_message\"",
    ":",
    "\"Transaction successful\"",
    ",",
    "\"reason\"",
    ":",
    "null",
    ",",
    "\"description\"",
    ":",
    "\"test description\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2023-03-23T00:26:38.290239Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2023-03-23T00:26:51.258039Z\"",
    ",",
    "\"payment_method\"",
    ":{",
    "\"token\"",
    ":",
    "\"e12440ca-920c-4aab-b656-6ed63f9ed5ac\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vaulted_token\"",
    ":",
    "null",
    ",",
    "\"vault_on_success\"",
    ":",
    "false",
    ",",
    "\"payment_method_detail\"",
    ":{",
    "\"card\"",
    ":{",
    "\"verify\"",
    ":",
    "null",
    ",",
    "\"capture\"",
    ":",
    "false",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "null",
    ",",
    "\"installments_amount\"",
    ":",
    "null",
    ",",
    "\"installments_type\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ":{",
    "\"holder_name\"",
    ":",
    "\"APROBADO\"",
    ",",
    "\"iin\"",
    ":",
    "\"54519515\"",
    ",",
    "\"lfd\"",
    ":",
    "\"5480\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"MASTERCARD\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"BANCO DE LA PRODUCCION S.A. (PRODUBANCO)\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BLACK\"",
    ",",
    "\"type\"",
    ":",
    "\"CREDIT\"",
    "}\n               },",
    "\"wallet\"",
    ":",
    "null",
    ",",
    "\"bnpl\"",
    ":",
    "null",
    ",",
    "\"bank_transfer\"",
    ":",
    "null",
    ",",
    "\"payment_link\"",
    ":",
    "null",
    "}\n         },",
    "\"provider\"",
    ":{",
    "\"provider_transaction_id\"",
    ":",
    "\"488990863216107201\"",
    "},",
    "\"provider_data\"",
    ":{",
    "\"raw_response\"",
    ":{",
    "\"details\"",
    ":{",
    "\"amount\"",
    ":{",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"ice\"",
    ":",
    "0",
    ",",
    "\"iva\"",
    ":",
    "0",
    ",",
    "\"subtotalIva\"",
    ":",
    "0",
    ",",
    "\"subtotalIva0\"",
    ":",
    "2000",
    "},",
    "\"approvalCode\"",
    ":",
    "\"000000\"",
    ",",
    "\"approvedTransactionAmount\"",
    ":",
    "2000",
    ",",
    "\"binInfo\"",
    ":{",
    "\"bank\"",
    ":",
    "\"Banco de la Produccion S.A. (PRODUBANCO)\"",
    ",",
    "\"bindCard\"",
    ":",
    "\"545195\"",
    ",",
    "\"cardCountry\"",
    ":",
    "\"Ecuador\"",
    ",",
    "\"lastFourDigits\"",
    ":",
    "\"5480\"",
    ",",
    "\"type\"",
    ":",
    "\"credit\"",
    "},",
    "\"cardHolderName\"",
    ":",
    "\"APROBADO\"",
    ",",
    "\"created\"",
    ":",
    "1679531210000",
    ",",
    "\"merchantId\"",
    ":",
    "\"20000000107058310000\"",
    ",",
    "\"merchantName\"",
    ":",
    "\"kushkiCOSBX Colombia\"",
    ",",
    "\"paymentBrand\"",
    ":",
    "\"Mastercard\"",
    ",",
    "\"processorBankName\"",
    ":",
    "\"0032~BANCO INTERNACIONAL\"",
    ",",
    "\"requestAmount\"",
    ":",
    "2000",
    ",",
    "\"responseCode\"",
    ":",
    "\"000\"",
    ",",
    "\"responseText\"",
    ":",
    "\"Transacción aprobada\"",
    ",",
    "\"transactionId\"",
    ":",
    "\"091607275430589119\"",
    ",",
    "\"transactionReference\"",
    ":",
    "\"eb6eb9e1-68d3-46be-8a0b-41ec8ff3ad73\"",
    ",",
    "\"transactionStatus\"",
    ":",
    "\"APPROVAL\"",
    ",",
    "\"transactionType\"",
    ":",
    "\"SALE\"",
    "},",
    "\"ticketNumber\"",
    ":",
    "\"488990863216107201\"",
    ",",
    "\"transactionReference\"",
    ":",
    "\"eb6eb9e1-68d3-46be-8a0b-41ec8ff3ad73\"",
    "},",
    "\"id\"",
    ":",
    "\"KUSHKI\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"488990863216107201\"",
    ",",
    "\"account_id\"",
    ":",
    "null",
    ",",
    "\"status\"",
    ":",
    "\"APPROVAL\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"Transacción aprobada\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transacción aprobada\"",
    "}\n      },",
    "\"callback_url\"",
    ":",
    "null",
    ",",
    "\"workflow\"",
    ":",
    "\"CHECKOUT\"",
    ",",
    "\"split\"",
    ":[ \n      ],",
    "\"subscription_id\"",
    ":",
    "null",
    ",",
    "\"payment_link_id\"",
    ":",
    "null",
    "}\n}",
    "Chargeback Webhook V1",
    "The next JSON object presents an example of a data structure related to a payment event from Webhook V1.",
    "JSON",
    "{",
    "\"payment\"",
    ":{",
    "\"code\"",
    ":",
    "\"b3da6717-7949-454e-8699-e449bfaccb69\"",
    ",",
    "\"id\"",
    ":",
    "\"b3da6717-7949-454e-8699-e449bfaccb69\"",
    ",",
    "\"idempotency_key\"",
    ":",
    "\"28f14927-421b-4424-b4d2-5de4d83ca138\"",
    ",",
    "\"organization_code\"",
    ":",
    "\"9c99108c-7681-4d48-acca-bce037685e99\"",
    ",",
    "\"account_code\"",
    ":",
    "\"c004cfd7-0c65-4add-b9b3-3d7e3949c9f1\"",
    ",",
    "\"account_id\"",
    ":",
    "\"c004cfd7-0c65-4add-b9b3-3d7e3949c9f1\"",
    ",",
    "\"description\"",
    ":",
    "\"test description\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"status\"",
    ":",
    "\"CHARGEBACK\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"LOST\"",
    ",",
    "\"order_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2023-03-23T00:26:38.093810Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2023-03-23T00:26:51.285333Z\"",
    ",",
    "\"amount\"",
    ":{",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "2000.0",
    ",",
    "\"refunded\"",
    ":",
    "0.0",
    ",",
    "\"captured\"",
    ":",
    "0.0",
    "},",
    "\"checkout\"",
    ":{",
    "\"session\"",
    ":",
    "\"fb98b19d-39c0-42d2-bed6-438605458964\"",
    ",",
    "\"sdk_action_required\"",
    ":",
    "false",
    "},",
    "\"customer_payer\"",
    ":{",
    "\"code\"",
    ":",
    "\"8122d1f5-c07d-4d88-9dfe-a09ccdaeda0b\"",
    ",",
    "\"id\"",
    ":",
    "\"8122d1f5-c07d-4d88-9dfe-a09ccdaeda0b\"",
    ",",
    "\"organization_customer_external_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"1679531154456\"",
    ",",
    "\"first_name\"",
    ":",
    "\"Aaron\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Hegmann\"",
    ",",
    "\"gender\"",
    ":",
    "\"F\"",
    ",",
    "\"date_of_birth\"",
    ":",
    "\"1990-02-28\"",
    ",",
    "\"email\"",
    ":",
    "\"andrea@y.uno\"",
    ",",
    "\"nationality\"",
    ":",
    "\"CO\"",
    ",",
    "\"ip_address\"",
    ":",
    "\"192.168.123.167\"",
    ",",
    "\"device_fingerprint\"",
    ":",
    "\"278994bb-9ece-5c63-8c44-c03481851625\"",
    ",",
    "\"browser_info\"",
    ":",
    "null",
    ",",
    "\"document\"",
    ":{",
    "\"document_number\"",
    ":",
    "\"1032765432\"",
    ",",
    "\"document_type\"",
    ":",
    "\"CC\"",
    "},",
    "\"billing_address\"",
    ":{",
    "\"address_line_1\"",
    ":",
    "\"Calle 34 # 56 - 78\"",
    ",",
    "\"address_line_2\"",
    ":",
    "\"Apartamento 502, Torre I\"",
    ",",
    "\"city\"",
    ":",
    "\"Bogotá\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "},",
    "\"shipping_address\"",
    ":{",
    "\"address_line_1\"",
    ":",
    "\"Calle 34 # 56 - 78\"",
    ",",
    "\"address_line_2\"",
    ":",
    "\"Apartamento 502, Torre I\"",
    ",",
    "\"city\"",
    ":",
    "\"Bogotá\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"state\"",
    ":",
    "\"Cundinamarca\"",
    ",",
    "\"zip_code\"",
    ":",
    "\"111111\"",
    "},",
    "\"phone\"",
    ":{",
    "\"country_code\"",
    ":",
    "\"57\"",
    ",",
    "\"number\"",
    ":",
    "\"3991111111\"",
    "}\n      },",
    "\"additional_data\"",
    ":{",
    "\"order\"",
    ":{",
    "\"shipping_amount\"",
    ":",
    "0.0",
    ",",
    "\"fee_amount\"",
    ":",
    "0.0",
    ",",
    "\"items\"",
    ":[\n               {",
    "\"id\"",
    ":",
    "\"123AD\"",
    ",",
    "\"name\"",
    ":",
    "\"Skirt\"",
    ",",
    "\"quantity\"",
    ":",
    "1",
    ",",
    "\"unit_amount\"",
    ":",
    "2000.0",
    ",",
    "\"category\"",
    ":",
    "\"Clothes\"",
    ",",
    "\"brand\"",
    ":",
    "\"XYZ\"",
    ",",
    "\"sku_code\"",
    ":",
    "\"8765432109\"",
    ",",
    "\"manufacture_part_number\"",
    ":",
    "\"XYZ123456\"",
    "}\n            ]\n         },",
    "\"airline\"",
    ":",
    "null",
    "},",
    "\"transactions\"",
    ":{",
    "\"code\"",
    ":",
    "\"98c80022-fe05-4b9b-b478-2e102fc72cc3\"",
    ",",
    "\"id\"",
    ":",
    "\"98c80022-fe05-4b9b-b478-2e102fc72cc3\"",
    ",",
    "\"type\"",
    ":",
    "\"CHARGEBACK\"",
    ",",
    "\"status\"",
    ":",
    "\"LOST\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"amount\"",
    ":",
    "2000.0",
    ",",
    "\"provider_id\"",
    ":",
    "\"KUSHKI\"",
    ",",
    "\"response_code\"",
    ":",
    "\"CHARGEBACK\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "null",
    ",",
    "\"response_message\"",
    ":",
    "\"Transaction successful\"",
    ",",
    "\"reason\"",
    ":",
    "null",
    ",",
    "\"description\"",
    ":",
    "\"test description\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2023-03-23T00:26:38.290239Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2023-03-23T00:26:51.258039Z\"",
    ",",
    "\"payment_method\"",
    ":{",
    "\"token\"",
    ":",
    "\"e12440ca-920c-4aab-b656-6ed63f9ed5ac\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vaulted_token\"",
    ":",
    "null",
    ",",
    "\"vault_on_success\"",
    ":",
    "false",
    ",",
    "\"payment_method_detail\"",
    ":{",
    "\"card\"",
    ":{",
    "\"verify\"",
    ":",
    "null",
    ",",
    "\"capture\"",
    ":",
    "false",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "null",
    ",",
    "\"installments_amount\"",
    ":",
    "null",
    ",",
    "\"installments_type\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ":{",
    "\"holder_name\"",
    ":",
    "\"APROBADO\"",
    ",",
    "\"iin\"",
    ":",
    "\"54519515\"",
    ",",
    "\"lfd\"",
    ":",
    "\"5480\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"MASTERCARD\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"BANCO DE LA PRODUCCION S.A. (PRODUBANCO)\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BLACK\"",
    ",",
    "\"type\"",
    ":",
    "\"CREDIT\"",
    "}\n               },",
    "\"wallet\"",
    ":",
    "null",
    ",",
    "\"bnpl\"",
    ":",
    "null",
    ",",
    "\"bank_transfer\"",
    ":",
    "null",
    ",",
    "\"payment_link\"",
    ":",
    "null",
    "}\n         },",
    "\"provider\"",
    ":{",
    "\"provider_transaction_id\"",
    ":",
    "\"488990863216107201\"",
    "},",
    "\"provider_data\"",
    ":{",
    "\"raw_response\"",
    ":{\n               },",
    "\"id\"",
    ":",
    "\"KUSHKI\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"488990863216107201\"",
    ",",
    "\"account_id\"",
    ":",
    "null",
    ",",
    "\"status\"",
    ":",
    "\"CHARGEBACK\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"\"",
    ",",
    "\"response_message\"",
    ":",
    "\"\"",
    "}\n      },",
    "\"callback_url\"",
    ":",
    "null",
    ",",
    "\"workflow\"",
    ":",
    "\"SDK_CHECKOUT\"",
    ",",
    "\"split\"",
    ":[\n         \n      ]\n   }\n}",
    "Enrollment",
    "JSON",
    "{",
    "\"account_id\"",
    ":",
    "\"f7c5fe77-721b-49c2-84d3-957748df3c2c\"",
    ",",
    "\"type\"",
    ":",
    "\"enrollment\"",
    ",",
    "\"type_event\"",
    ":",
    "\"enrollment.enroll\"",
    ",",
    "\"version\"",
    ":",
    "2",
    ",",
    "\"retry\"",
    ":",
    "0",
    ",",
    "\"data\"",
    ": {",
    "\"payment_method\"",
    ": {",
    "\"id\"",
    ":",
    "\"f7c5fe77-721b-49c2-84d3-957748df3c2c\"",
    ",",
    "\"account_id\"",
    ":",
    "\"d9cd3ef2-330a-45a4-b2a3-19e6502d2c92\"",
    ",",
    "\"name\"",
    ":",
    "\"VISA****1111\"",
    ",",
    "\"description\"",
    ":",
    "\"VISA****1111\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"country\"",
    ":",
    "\"UY\"",
    ",",
    "\"customer_id\"",
    ":",
    "\"3769a708-28d5-4bde-b559-4114d5a8fb9c\"",
    ",",
    "\"status\"",
    ":",
    "\"ENROLLED\"",
    ",",
    "\"enrollment\"",
    ":{",
    "\"sdk_action_required\"",
    ":",
    "true",
    ",",
    "\"session\"",
    ":",
    "\"830f66cd-6f14-4ac1-b5e8-45d28ecf0cf6\"",
    "},",
    "\"created_at\"",
    ":",
    "\"2023-01-30T14:09:04.469723Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2023-01-30T14:09:07.256240Z\"",
    "}\n}"
  ],
  "https://docs.y.uno/docs/enroll-payment-methods": [
    "Enroll Payment Methods",
    "Suggest Edits",
    "On this page, you will find a walk-through guide on enrolling a payment method into a customer account.",
    "Requirements",
    "Before starting the enrollment process, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which are composed by:",
    "public-api-key",
    "private-secrete-key",
    "account_id",
    "Set up your connections",
    "on your Yuno Dashboard account. Add a payment method that requires enrollment.",
    "Build a route",
    "for the payment method to define how it will be processed.",
    "Configure the checkout builder",
    "to make your connected payments available.",
    "Steps summary",
    "To enroll a payment method into a customer account, you will follow the steps listed below.",
    "Create a customer",
    "Create Customer Session",
    "(Exclusive for Checkout workflow)",
    "(Optional) Retrieve Payment Methods Available to Enroll -",
    "Checkout workflow",
    "/",
    "Direct workflow",
    "Enroll Payment Method",
    "Checkout workflow",
    "/",
    "Direct workflow",
    "Retrieve Payment Methods",
    "Checkout workflow",
    "/",
    "Direct workflow",
    "Enroll a payment method",
    "Step 1: Create a customer",
    "Use the",
    "Create Customer",
    "to register the customer info. You will need to provide personal customer information. In addition, you also need to supply the",
    "merchant_customer_id",
    ", a unique identifier for the customer used on your system.",
    "Customer complementary information",
    "When creating a",
    "Customer",
    ", certain information is not required but can improve the user's payment experience if provided. Phone, billing address, and shipping address are examples of not mandatory data you can provide.",
    "If you add optional information, be aware of the required mandatory fields.",
    "At the end of the create a customer process, you will receive an",
    "id",
    ", which identifies the user within the Yuno system. If you are enrolling a payment method for an existing user, who was previously created and already had an",
    "id",
    ", you can skip this step.",
    "Step 2: Create a customer session",
    "Customer session requirement",
    "Only the Checkout workflow requires the utilization of a customer session. If you are using the Direct workflow (Only available for PCI complaint merchants), you may proceed directly to Step 3 since you will solely be using the",
    "id",
    "generated in Step 1.",
    "After creating the customer, you will create a customer session to identify and store customers' information regarding payment preferences. Use the endpoint",
    "Create Customer Session",
    "to perform the request. Notice that the",
    "customer_id",
    "required to perform the request is the",
    "id",
    "you received when creating the customer in",
    "Step 1",
    ".",
    "From the response of the endpoint",
    "Create Customer Session",
    ", you will receive the",
    "customer_session",
    ". It will be used in the payment method enrollment process.",
    "Step 3: Retrieve payment methods to enroll",
    "This is an",
    "optional step",
    "where you can list all available payment methods the customer can enroll in. If you know which payment method the user will enroll in, you can proceed to",
    "Step 4",
    ".",
    "To list the available payment methods, you can use one of the available Retrieve Payment Methods To Enroll endpoints. If you are using the",
    "Checkout workflow",
    ", you will inform the",
    "customer_session",
    "on the request. While if you are using the",
    "Direct workflow",
    ", you will provide the",
    "customer_id",
    ", which refers to the",
    "id",
    "created in Step 1.",
    "The response to the endpoint",
    "Retrieve Payment Methods To Enroll",
    "will contain only the",
    "payment_methods",
    "parameter. It will provide an array of objects with all available payment methods to enroll. You will use the",
    "type",
    "information to enroll the payment method on the next step.",
    "Which payment methods will be available?",
    "When you retrieve the payment methods available to enroll, only the ones which you have connected, created a route, and added to you checkout will be present on the response.",
    "Step 4: Enroll a payment method",
    "After defining the payment method, you can perform the enrollment using one of the Enroll Payment Method endpoints:",
    "Checkout workflow",
    ": Provide the",
    "type",
    "related to the chosen payment method to the parameter",
    "payment_method_type",
    ".",
    "Direct workflow",
    ": Provide the",
    "type",
    "related to the chosen payment method to the parameter",
    "type",
    ". (Only available for Card payment methods for PCI compliant merchants)",
    "The user must be redirected to the payment provider page to complete the enrollment process. You will receive this URL in Step 5.",
    "Step 5: Retrieve payment methods",
    "To successfully enroll in the payment method, the customer must provide authorization on the payment provider page. To receive the URL, use one of the following endpoints depending on the workflow you are using:",
    "Checkout workflow: Use the endpoint",
    "Retrieve Payment Method by Customer Session",
    "providing the",
    "customer_session",
    "generated in Step 2. The URL to redirect the user will be available in the parameter",
    "provider.redirect.init_url",
    ".",
    "Direct workflow: For the Direct workflow, as it is only available for card enrollments, you will receive the final status in the previous step.",
    "Redirect the user so they provide the required authorization. After the enrollment, you can proceed to the checkout session creation on the next step.",
    "To confirm the enrollment, you can retrieve the enrolled payment methods. The",
    "status",
    "of the enrolled payment method should be",
    "ENROLLED",
    "."
  ],
  "https://docs.y.uno/docs/card-verification": [
    "Card verification",
    "Suggest Edits",
    "Yuno lets you verify if the customer's credit card is real and is working. Our Credit Card Verification API is designed to empower your applications with a robust mechanism for validating credit card transactions, ensuring a seamless and secure payment experience for your users. This operation does not create any charges for your client.",
    "Advantages",
    "With the Yuno card verification service, you can protect your business in real time:",
    "Real-time Verification",
    ": Instantly validate credit card details to ensure accuracy and authenticity.",
    "Fraud Prevention",
    ": Mitigate the risk of fraudulent transactions by verifying the legitimacy of credit card information.",
    "Seamless Integration",
    ": Easily integrate our API into your existing payment processing system, minimizing development time and effort.",
    "Integration",
    "First, you need to define a route to use the card verification feature. When configuring the route, be sure to select:",
    "Card",
    "as payment method.",
    "Define the",
    "Transaction type",
    "Equal",
    "to",
    "VERIFY",
    ".",
    "With the above configurations, all card verifications will be processed following the configuration of the created route.",
    "Select the correct provider",
    "The credit card verification process isn't provided by all providers. Always contact your technical account manager to verify which providers support card verification.",
    "In addition to creating the route, you need to choose when to use the validation. You can verify cards during the",
    "enrollment process",
    "or while making a credit",
    "card payment",
    ". Depending on your chosen process, you should use different endpoints or SDK functions.",
    "Verify the card at the enrollment",
    "You can verify the card at the enrollment whether you are using the Direct or SDK integrations.",
    "SDK integration",
    "If you are using an integration based on SDKs, you need to define the",
    "verify",
    "object, informing the",
    "currency",
    "and",
    "vault_on_success = true",
    "when performing the enrollment. The code block below presents an example of card verification requests and responses using the SDK.",
    "Request",
    "Response",
    "{",
    "\"payment_method_type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"verify\"",
    ": {",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"currency\"",
    ":",
    "\"BRL\"",
    "}\n}",
    "{",
    "\"id\"",
    ":",
    "\"fbc68364-0456-41b6-9743-1acb07d55f14\"",
    ",",
    "\"idempotency_key\"",
    ":",
    "null",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"name\"",
    ":",
    "\"Card\"",
    ",",
    "\"description\"",
    ":",
    "\"Card\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"status\"",
    ":",
    "\"READY_TO_ENROLL\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2024-01-31T14:44:33.552281Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T14:44:33.552283Z\"",
    ",",
    "\"enrollment\"",
    ": {",
    "\"session\"",
    ":",
    "\"232b123d-c4d9-4ddc-b776-e0b0eaa6bb8b\"",
    ",",
    "\"sdk_required_action\"",
    ":",
    "true",
    "},",
    "\"provider\"",
    ": {",
    "\"id\"",
    ":",
    "\"YUNO\"",
    ",",
    "\"type\"",
    ":",
    "\"YUNO\"",
    ",",
    "\"provider_status\"",
    ":",
    "null",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"first_name\"",
    ":",
    "\"Fernando\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Iglesias\"",
    ",",
    "\"email\"",
    ":",
    "\"Anastasia.Kirlin16@yahoo.com\"",
    ",",
    "\"gender\"",
    ":",
    "null",
    ",",
    "\"date_of_birth\"",
    ":",
    "null",
    ",",
    "\"document\"",
    ":",
    "null",
    ",",
    "\"phone\"",
    ":",
    "null",
    ",",
    "\"billing_address\"",
    ":",
    "null",
    "},",
    "\"verify\"",
    ": {",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"payment\"",
    ":",
    "null",
    "},",
    "\"preferred\"",
    ":",
    "null",
    "}",
    "Access the",
    "SDK integration",
    "page for additional information related to the enrollment process.",
    "Direct integration",
    "To verify the card at the enrollment with the Direct integration, you will use the",
    "Enroll Payment Method",
    "endpoint. In addition to the",
    "card_data",
    "object, you need to provide the",
    "verify",
    "object. Inside of the",
    "verify",
    "object you define the",
    "currency",
    "and provide",
    "vault_on_success = true",
    ". The code block below presents an example of card verification requests and responses using the",
    "Enroll Payment Method",
    ".",
    "Request",
    "Response",
    "{",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"card_data\"",
    ": {",
    "\"holder_name\"",
    ":",
    "\"Pepito Perez2\"",
    ",",
    "\"expiration_month\"",
    ":",
    "10",
    ",",
    "\"expiration_year\"",
    ":",
    "24",
    ",",
    "\"number\"",
    ":",
    "\"4988080000000000\"",
    ",",
    "\"security_code\"",
    ":",
    "\"123\"",
    "},",
    "\"verify\"",
    ": {",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"currency\"",
    ":",
    "\"BRL\"",
    "}\n}",
    "{",
    "\"name\"",
    ":",
    "\"VISA ****0000\"",
    ",",
    "\"description\"",
    ":",
    "\"VISA ****0000\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"status\"",
    ":",
    "\"ENROLLED\"",
    ",",
    "\"sub_status\"",
    ":",
    "null",
    ",",
    "\"vaulted_token\"",
    ":",
    "\"5d4d8b95-c6f8-4336-b051-9eb06a436139\"",
    ",",
    "\"callback_url\"",
    ":",
    "null",
    ",",
    "\"action\"",
    ":",
    "\"FORM\"",
    ",",
    "\"redirect_url\"",
    ":",
    "null",
    ",",
    "\"created_at\"",
    ":",
    "\"2024-01-31T14:47:39.643700Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T14:47:39.643701Z\"",
    ",",
    "\"card_data\"",
    ": {",
    "\"iin\"",
    ":",
    "\"49880800\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0000\"",
    ",",
    "\"expiration_month\"",
    ":",
    "10",
    ",",
    "\"expiration_year\"",
    ":",
    "24",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer\"",
    ":",
    "null",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BUSINESS ENHANCED\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    "},",
    "\"last_successfully_used\"",
    ":",
    "null",
    ",",
    "\"last_successfully_used_at\"",
    ":",
    "null",
    ",",
    "\"preferred\"",
    ":",
    "null",
    ",",
    "\"verify\"",
    ": {",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"payment\"",
    ": {",
    "\"id\"",
    ":",
    "\"0aacd66c-6933-4827-813f-8d76637f874d\"",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"description\"",
    ":",
    "\"VERIFY CARD\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"VERIFIED\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"VERIFY_CARD_5d4d8b95-c6f8-4336-b051-9eb06a436139\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2024-01-31T14:47:39.717571Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T14:47:41.617945Z\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"value\"",
    ":",
    "0",
    ",",
    "\"refunded\"",
    ":",
    "0",
    ",",
    "\"captured\"",
    ":",
    "0",
    "},",
    "\"transactions\"",
    ": [\n                {",
    "\"id\"",
    ":",
    "\"ead4ed19-5998-4b40-9910-d2dfe25b9fe0\"",
    ",",
    "\"type\"",
    ":",
    "\"VERIFY\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transaction successful\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"VERIFY_CARD_5d4d8b95-c6f8-4336-b051-9eb06a436139\"",
    ",",
    "\"provider_data\"",
    ": {",
    "\"id\"",
    ":",
    "\"CIELO\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"\"",
    ",",
    "\"account_id\"",
    ":",
    "\"\"",
    ",",
    "\"status\"",
    ":",
    "\"true\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"response_code\"",
    ":",
    "null",
    ",",
    "\"raw_response\"",
    ": {",
    "\"ReturnCode\"",
    ":",
    "\"00\"",
    ",",
    "\"ReturnMessage\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"Valid\"",
    ":",
    "true",
    "},",
    "\"third_party_transaction_id\"",
    ":",
    "null",
    ",",
    "\"third_party_account_id\"",
    ":",
    "null",
    "},",
    "\"created_at\"",
    ":",
    "\"2024-01-31T14:47:39.827470Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T14:47:41.567732Z\"",
    "}\n            ]\n        }\n    }\n}",
    "The verify feature at the enrollment is only available for PCI-compliant merchants when using the Direct integration.",
    "Verify the card at the payment",
    "If you want to verify the card using a payment operation, you need to fulfill two requirements:",
    "Inform",
    "amount.value=0",
    ".",
    "Add",
    "verify = true",
    "inside of the",
    "payment_method.detail.card.",
    "object.",
    "Following the above instructions, the resulting operation won't result in any charges for your client.",
    "SDK integration",
    "The code block below presents an example of card verification using the payment operation for an SDK integration.",
    "Request",
    "Response",
    "{",
    "\"description\"",
    ":",
    "\"Test Cards\"",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000022\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"Pago de test 001\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"value\"",
    ":",
    "0",
    "},",
    "\"checkout\"",
    ": {",
    "\"session\"",
    ":",
    "\"5752d02a-64d2-4953-b8f7-defff1e1b7e6\"",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "\"9d58f32a-1ec9-4092-94b2-6725363ab447\"",
    "},",
    "\"payment_method\"",
    ": {",
    "\"token\"",
    ":",
    "\"2c37e3b7-8b06-4e8b-a212-334d7c77e349\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"verify\"",
    ":",
    "true",
    "}\n        }\n    }\n}",
    "{",
    "\"id\"",
    ":",
    "\"47646d8b-1f99-4097-9df2-3097bf318bb9\"",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"description\"",
    ":",
    "\"Test Cards\"",
    ",",
    "\"country\"",
    ":",
    "\"BR\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"VERIFIED\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000022\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2024-01-31T15:19:03.599525Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T15:19:06.992590Z\"",
    ",",
    "\"amount\"",
    ": {",
    "\"captured\"",
    ":",
    "0",
    ",",
    "\"currency\"",
    ":",
    "\"BRL\"",
    ",",
    "\"refunded\"",
    ":",
    "0",
    ",",
    "\"value\"",
    ":",
    "0",
    "},",
    "\"checkout\"",
    ": {",
    "\"session\"",
    ":",
    "\"5752d02a-64d2-4953-b8f7-defff1e1b7e6\"",
    ",",
    "\"sdk_action_required\"",
    ":",
    "false",
    "},",
    "\"payment_method\"",
    ": {",
    "\"vaulted_token\"",
    ":",
    "\"1f275d9f-a60a-4643-a5b0-ae6e40019fd1\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"token\"",
    ":",
    "\"2c37e3b7-8b06-4e8b-a212-334d7c77e349\"",
    ",",
    "\"payment_method_detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"verify\"",
    ":",
    "true",
    ",",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "0",
    ",",
    "\"installments_type\"",
    ":",
    "\"\"",
    ",",
    "\"installment_amount\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ": {",
    "\"holder_name\"",
    ":",
    "\"Pepito Perez2\"",
    ",",
    "\"iin\"",
    ":",
    "\"49880800\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0000\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"DEUTSCHE BANK AG INDIA\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BUSINESS ENHANCED\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    ",",
    "\"three_d_secure\"",
    ": {",
    "\"version\"",
    ":",
    "null",
    ",",
    "\"electronic_commerce_indicator\"",
    ":",
    "null",
    ",",
    "\"cryptogram\"",
    ":",
    "null",
    ",",
    "\"transaction_id\"",
    ":",
    "null",
    ",",
    "\"directory_server_transaction_id\"",
    ":",
    "null",
    ",",
    "\"pares_status\"",
    ":",
    "null",
    ",",
    "\"acs_id\"",
    ":",
    "null",
    "}\n                }\n            }\n        }\n    },",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "\"9d58f32a-1ec9-4092-94b2-6725363ab447\"",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"1706712254\"",
    ",",
    "\"first_name\"",
    ":",
    "\"Fernando\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Iglesias\"",
    ",",
    "\"gender\"",
    ":",
    "\"\"",
    ",",
    "\"date_of_birth\"",
    ":",
    "null",
    ",",
    "\"email\"",
    ":",
    "\"Anastasia.Kirlin16@yahoo.com\"",
    ",",
    "\"nationality\"",
    ":",
    "null",
    ",",
    "\"ip_address\"",
    ":",
    "\"181.117.11.229\"",
    ",",
    "\"device_fingerprint\"",
    ":",
    "null",
    ",",
    "\"browser_info\"",
    ": {",
    "\"user_agent\"",
    ":",
    "\"\"",
    ",",
    "\"accept_header\"",
    ":",
    "\"\"",
    ",",
    "\"accept_content\"",
    ":",
    "null",
    ",",
    "\"accept_browser\"",
    ":",
    "null",
    ",",
    "\"color_depth\"",
    ":",
    "\"\"",
    ",",
    "\"screen_height\"",
    ":",
    "\"\"",
    ",",
    "\"screen_width\"",
    ":",
    "\"\"",
    ",",
    "\"javascript_enabled\"",
    ":",
    "null",
    ",",
    "\"java_enabled\"",
    ":",
    "null",
    ",",
    "\"browser_time_difference\"",
    ":",
    "null",
    ",",
    "\"language\"",
    ":",
    "\"\"",
    "},",
    "\"document\"",
    ": {",
    "\"document_type\"",
    ":",
    "\"DNI\"",
    ",",
    "\"document_number\"",
    ":",
    "\"38799992\"",
    "},",
    "\"phone\"",
    ":",
    "null",
    ",",
    "\"billing_address\"",
    ":",
    "null",
    ",",
    "\"shipping_address\"",
    ":",
    "null",
    "},",
    "\"additional_data\"",
    ":",
    "null",
    ",",
    "\"taxes\"",
    ":",
    "null",
    ",",
    "\"transactions\"",
    ": {",
    "\"id\"",
    ":",
    "\"9be01510-afab-450a-86cc-916d0d4cd8a5\"",
    ",",
    "\"type\"",
    ":",
    "\"VERIFY\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"amount\"",
    ":",
    "0",
    ",",
    "\"provider_id\"",
    ":",
    "\"CIELO\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"vaulted_token\"",
    ":",
    "\"1f275d9f-a60a-4643-a5b0-ae6e40019fd1\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vault_on_success\"",
    ":",
    "true",
    ",",
    "\"token\"",
    ":",
    "\"2c37e3b7-8b06-4e8b-a212-334d7c77e349\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"verify\"",
    ":",
    "true",
    ",",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "0",
    ",",
    "\"installments_type\"",
    ":",
    "\"\"",
    ",",
    "\"installment_amount\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ": {",
    "\"holder_name\"",
    ":",
    "\"Pepito Perez2\"",
    ",",
    "\"iin\"",
    ":",
    "\"49880800\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0000\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"DEUTSCHE BANK AG INDIA\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BUSINESS ENHANCED\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    ",",
    "\"three_d_secure\"",
    ": {",
    "\"version\"",
    ":",
    "null",
    ",",
    "\"electronic_commerce_indicator\"",
    ":",
    "null",
    ",",
    "\"cryptogram\"",
    ":",
    "null",
    ",",
    "\"transaction_id\"",
    ":",
    "null",
    ",",
    "\"directory_server_transaction_id\"",
    ":",
    "null",
    ",",
    "\"pares_status\"",
    ":",
    "null",
    ",",
    "\"acs_id\"",
    ":",
    "null",
    "}\n                    }\n                }\n            }\n        },",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transaction successful\"",
    ",",
    "\"reason\"",
    ":",
    "null",
    ",",
    "\"description\"",
    ":",
    "\"Test Cards\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"Pago de test 001\"",
    ",",
    "\"provider_data\"",
    ": {",
    "\"id\"",
    ":",
    "\"CIELO\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"\"",
    ",",
    "\"account_id\"",
    ":",
    "\"\"",
    ",",
    "\"status\"",
    ":",
    "\"true\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"raw_response\"",
    ": {",
    "\"ReturnCode\"",
    ":",
    "\"00\"",
    ",",
    "\"ReturnMessage\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"Valid\"",
    ":",
    "true",
    "},",
    "\"third_party_transaction_id\"",
    ":",
    "\"\"",
    ",",
    "\"third_party_account_id\"",
    ":",
    "\"\"",
    "},",
    "\"created_at\"",
    ":",
    "\"2024-01-31T15:19:03.704095Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T15:19:06.639476Z\"",
    "},",
    "\"split\"",
    ": [],",
    "\"callback_url\"",
    ":",
    "\"https://google.com/?checkoutSession=5752d02a-64d2-4953-b8f7-defff1e1b7e6\"",
    ",",
    "\"workflow\"",
    ":",
    "\"SDK_CHECKOUT\"",
    ",",
    "\"metadata\"",
    ": [],",
    "\"fraud_screening\"",
    ":",
    "null",
    ",",
    "\"payment_link_id\"",
    ":",
    "\"\"",
    ",",
    "\"subscription_code\"",
    ":",
    "null",
    "}",
    "Direct Integration",
    "The code block below presents an example of card verification using the payment operation for a Direct integration.",
    "Request",
    "Response",
    "{",
    "\"description\"",
    ":",
    "\"SUCCESSFUL\"",
    ",",
    "\"account_id\"",
    ":",
    "\"{{account-code}}\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000023\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"reference-{{$randomUUID}}\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "0",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"first_name\"",
    ":",
    "\"Pepito\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Perez\"",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"example00234\"",
    ",",
    "\"document\"",
    ": {",
    "\"document_type\"",
    ":",
    "\"CC\"",
    ",",
    "\"document_number\"",
    ":",
    "\"38799999\"",
    "}   \n    },",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"verify\"",
    ":",
    "true",
    ",",
    "\"card_data\"",
    ": {",
    "\"number\"",
    ":",
    "\"4988080000000000\"",
    ",",
    "\"holder_name\"",
    ":",
    "\"JOHN DOE\"",
    ",",
    "\"expiration_month\"",
    ":",
    "10",
    ",",
    "\"expiration_year\"",
    ":",
    "24",
    ",",
    "\"security_code\"",
    ":",
    "\"456\"",
    "}\n            }\n        }\n    }\n}",
    "{",
    "\"id\"",
    ":",
    "\"bcb42b81-c729-48cb-b782-1a0b6b706b31\"",
    ",",
    "\"account_id\"",
    ":",
    "\"493e9374-510a-4201-9e09-de669d75f256\"",
    ",",
    "\"description\"",
    ":",
    "\"SUCCESSFUL\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"VERIFIED\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000023\"",
    ",",
    "\"created_at\"",
    ":",
    "\"2024-01-31T15:07:04.513703Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T15:07:06.573556Z\"",
    ",",
    "\"amount\"",
    ": {",
    "\"captured\"",
    ":",
    "0",
    ",",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"refunded\"",
    ":",
    "0",
    ",",
    "\"value\"",
    ":",
    "0",
    "},",
    "\"checkout\"",
    ": {",
    "\"session\"",
    ":",
    "\"\"",
    ",",
    "\"sdk_action_required\"",
    ":",
    "false",
    "},",
    "\"payment_method\"",
    ": {",
    "\"vaulted_token\"",
    ":",
    "\"\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vault_on_success\"",
    ":",
    "false",
    ",",
    "\"token\"",
    ":",
    "\"\"",
    ",",
    "\"payment_method_detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"verify\"",
    ":",
    "true",
    ",",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "0",
    ",",
    "\"installments_type\"",
    ":",
    "\"\"",
    ",",
    "\"installment_amount\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ": {",
    "\"holder_name\"",
    ":",
    "\"JOHN DOE\"",
    ",",
    "\"iin\"",
    ":",
    "\"49880800\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0000\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"DEUTSCHE BANK AG INDIA\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BUSINESS ENHANCED\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    ",",
    "\"three_d_secure\"",
    ": {",
    "\"version\"",
    ":",
    "null",
    ",",
    "\"electronic_commerce_indicator\"",
    ":",
    "null",
    ",",
    "\"cryptogram\"",
    ":",
    "null",
    ",",
    "\"transaction_id\"",
    ":",
    "null",
    ",",
    "\"directory_server_transaction_id\"",
    ":",
    "null",
    ",",
    "\"pares_status\"",
    ":",
    "null",
    ",",
    "\"acs_id\"",
    ":",
    "null",
    "}\n                }\n            }\n        }\n    },",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "null",
    ",",
    "\"merchant_customer_id\"",
    ":",
    "\"example00234\"",
    ",",
    "\"first_name\"",
    ":",
    "\"Pepito\"",
    ",",
    "\"last_name\"",
    ":",
    "\"Perez\"",
    ",",
    "\"gender\"",
    ":",
    "null",
    ",",
    "\"date_of_birth\"",
    ":",
    "null",
    ",",
    "\"email\"",
    ":",
    "null",
    ",",
    "\"nationality\"",
    ":",
    "null",
    ",",
    "\"ip_address\"",
    ":",
    "null",
    ",",
    "\"device_fingerprint\"",
    ":",
    "null",
    ",",
    "\"browser_info\"",
    ": {",
    "\"user_agent\"",
    ":",
    "\"\"",
    ",",
    "\"accept_header\"",
    ":",
    "\"\"",
    ",",
    "\"accept_content\"",
    ":",
    "null",
    ",",
    "\"accept_browser\"",
    ":",
    "null",
    ",",
    "\"color_depth\"",
    ":",
    "\"\"",
    ",",
    "\"screen_height\"",
    ":",
    "\"\"",
    ",",
    "\"screen_width\"",
    ":",
    "\"\"",
    ",",
    "\"javascript_enabled\"",
    ":",
    "null",
    ",",
    "\"java_enabled\"",
    ":",
    "null",
    ",",
    "\"browser_time_difference\"",
    ":",
    "null",
    ",",
    "\"language\"",
    ":",
    "\"\"",
    "},",
    "\"document\"",
    ": {",
    "\"document_type\"",
    ":",
    "\"CC\"",
    ",",
    "\"document_number\"",
    ":",
    "\"38799999\"",
    "},",
    "\"phone\"",
    ":",
    "null",
    ",",
    "\"billing_address\"",
    ":",
    "null",
    ",",
    "\"shipping_address\"",
    ":",
    "null",
    "},",
    "\"additional_data\"",
    ":",
    "null",
    ",",
    "\"taxes\"",
    ":",
    "null",
    ",",
    "\"transactions\"",
    ": {",
    "\"id\"",
    ":",
    "\"f0da4c61-0c39-493b-a274-16d204fefad9\"",
    ",",
    "\"type\"",
    ":",
    "\"VERIFY\"",
    ",",
    "\"status\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"category\"",
    ":",
    "\"CARD\"",
    ",",
    "\"amount\"",
    ":",
    "0",
    ",",
    "\"provider_id\"",
    ":",
    "\"CIELO\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"vaulted_token\"",
    ":",
    "\"\"",
    ",",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vault_on_success\"",
    ":",
    "false",
    ",",
    "\"token\"",
    ":",
    "\"\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"verify\"",
    ":",
    "true",
    ",",
    "\"capture\"",
    ":",
    "true",
    ",",
    "\"installments\"",
    ":",
    "1",
    ",",
    "\"first_installment_deferral\"",
    ":",
    "0",
    ",",
    "\"installments_type\"",
    ":",
    "\"\"",
    ",",
    "\"installment_amount\"",
    ":",
    "null",
    ",",
    "\"soft_descriptor\"",
    ":",
    "\"\"",
    ",",
    "\"authorization_code\"",
    ":",
    "\"\"",
    ",",
    "\"retrieval_reference_number\"",
    ":",
    "\"\"",
    ",",
    "\"voucher\"",
    ":",
    "null",
    ",",
    "\"card_data\"",
    ": {",
    "\"holder_name\"",
    ":",
    "\"JOHN DOE\"",
    ",",
    "\"iin\"",
    ":",
    "\"49880800\"",
    ",",
    "\"lfd\"",
    ":",
    "\"0000\"",
    ",",
    "\"number_length\"",
    ":",
    "16",
    ",",
    "\"security_code_length\"",
    ":",
    "3",
    ",",
    "\"brand\"",
    ":",
    "\"VISA\"",
    ",",
    "\"issuer_name\"",
    ":",
    "\"DEUTSCHE BANK AG INDIA\"",
    ",",
    "\"issuer_code\"",
    ":",
    "null",
    ",",
    "\"category\"",
    ":",
    "\"BUSINESS ENHANCED\"",
    ",",
    "\"type\"",
    ":",
    "\"DEBIT\"",
    ",",
    "\"three_d_secure\"",
    ": {",
    "\"version\"",
    ":",
    "null",
    ",",
    "\"electronic_commerce_indicator\"",
    ":",
    "null",
    ",",
    "\"cryptogram\"",
    ":",
    "null",
    ",",
    "\"transaction_id\"",
    ":",
    "null",
    ",",
    "\"directory_server_transaction_id\"",
    ":",
    "null",
    ",",
    "\"pares_status\"",
    ":",
    "null",
    ",",
    "\"acs_id\"",
    ":",
    "null",
    "}\n                    }\n                }\n            }\n        },",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transaction successful\"",
    ",",
    "\"reason\"",
    ":",
    "null",
    ",",
    "\"description\"",
    ":",
    "\"SUCCESSFUL\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"reference-d3286de8-0c0b-4681-b29c-0a82a67de8ba\"",
    ",",
    "\"provider_data\"",
    ": {",
    "\"id\"",
    ":",
    "\"CIELO\"",
    ",",
    "\"transaction_id\"",
    ":",
    "\"\"",
    ",",
    "\"account_id\"",
    ":",
    "\"\"",
    ",",
    "\"status\"",
    ":",
    "\"true\"",
    ",",
    "\"sub_status\"",
    ":",
    "\"\"",
    ",",
    "\"status_detail\"",
    ":",
    "\"\"",
    ",",
    "\"response_message\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"response_code\"",
    ":",
    "\"SUCCEEDED\"",
    ",",
    "\"raw_response\"",
    ": {",
    "\"ReturnCode\"",
    ":",
    "\"00\"",
    ",",
    "\"ReturnMessage\"",
    ":",
    "\"Transacao autorizada\"",
    ",",
    "\"Valid\"",
    ":",
    "true",
    "},",
    "\"third_party_transaction_id\"",
    ":",
    "\"\"",
    ",",
    "\"third_party_account_id\"",
    ":",
    "\"\"",
    "},",
    "\"created_at\"",
    ":",
    "\"2024-01-31T15:07:04.628781Z\"",
    ",",
    "\"updated_at\"",
    ":",
    "\"2024-01-31T15:07:06.512878Z\"",
    "},",
    "\"split\"",
    ": [],",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"metadata\"",
    ": [],",
    "\"fraud_screening\"",
    ":",
    "null",
    ",",
    "\"payment_link_id\"",
    ":",
    "\"\"",
    ",",
    "\"subscription_code\"",
    ":",
    "null",
    "}",
    "The verify feature at the payment is only available for PCI-compliant merchants when using the Direct integration."
  ],
  "https://docs.y.uno/docs/token-migration-process": [
    "Token Migration Process",
    "Suggest Edits",
    "Token migration is the process by which the card numbers stored in a provider are transferred to Yuno's vault. This process involves the generation of a new token for each card.",
    "First step",
    "To initiate the token migration process, contact your business advisor at Yuno to assess the viability and schedule of the procedure.",
    "Importing cards from a gateway account",
    "The token migration process deals with confidential information. Therefore, a secure procedure needs to be followed. To import card data to Yuno from an existing gateway, you need to follow these steps:",
    "First, you will communicate with your existing third-party vault/gateway, requesting an export of the payment method data. Follow their specified process and protocols.",
    "Review the data format received from the third-party vault/gateway. The data provided to Yuno must follow a specific",
    "data format",
    "to perform the migration successfully.",
    "Submit a formal request to Yuno, providing the environment key where the data will be imported following Yuno's data transfer procedures. The gateway's process and response to the export request will determine the data transfer process.",
    "If the gateway requires SFTP setup for the transfer, our PGP key will be shared with them to obtain the necessary credentials. (Note: S/MIME encryption with an RSA key of at least 2048 bits will be used.)",
    "If Yuno's SFTP is preferred, we will request the public PGP key of the third-party vault/gateway. The key will encrypt credentials for a Yuno-created SFTP server, where the gateway can drop the exported payment methods for us to retrieve. Ideally, the public PGP key of the gateway should be hosted on a publicly accessible page.",
    "Your responsibilities when migrating tokens",
    "You are responsible for managing communication with your gateway provider throughout the migration process. The Yuno team will support and collaborate directly with the third-party vault/gateway to facilitate the importing process. However, you need to manage the process.",
    "In addition, the customer subscription information, including amounts, dates, etc., must be obtained directly from the exporting entity, as Yuno will not extract this data from encrypted files.",
    "The last step is to execute the migration. At this point, you will provide the user's data (the buyers) and their existing payment methods. Before continuing, you need to choose how to migrate the tokens to  Yuno.",
    "Migration options",
    "Currently, you can execute the token migration process using the Yuno API. You will use the API to add customers and enroll payment methods to them. Access the step-by-step guide on how to perform the token migration using the API using the button below:",
    "Token migration via API",
    "Data format",
    "Yuno defines a list of the required parameters for each customer and credit card to proceed with the migration process. The list of the required parameters is present below:",
    "Account ID",
    "Merchant customer ID",
    "First name",
    "Last name",
    "Email",
    "Country",
    "Document number",
    "Document type",
    "Payment method type",
    "Payment method ID",
    "Payment method token",
    "You can use the",
    "Customer Object",
    "and",
    "Payment Method Object",
    "to find all the possible parameters that can be used when importing/creating customers or enrolling payment objects.",
    "Different technical limitations associated with alternative payment methods may render them ineligible for migration between service providers. Contact the Yuno support team if you're contemplating the migration of alternative payment method tokens, such as Mercado Pago Wallet Connect, Bancolombia Tokenbox, etc., to the Yuno vault.",
    "Data transfer security",
    "All data throughout the migration process is encripted and transfered using a safe method, such as SFTP.",
    "Data validation",
    "To ensure efficient processing and prevent delays, please include the following information when communicating with Support:",
    "The external identifier name to be used for the import.",
    "An approximate count of the expected number of payment methods to be included (a rough estimate is acceptable).",
    "Any known data gaps, such as missing names or expiration dates.",
    "Yuno does not validate expiration dates during credit card import.",
    "Data protection",
    "When making payments through Yuno, the platform connects to payment processors. Yuno tokenizes and encrypts the data to ensure data security, simplifying the PCI compliance process. However, you remain responsible for managing and protecting your customer's (the buyer's) data. In addition, you are responsible for communicating any additional fees or other issues to your customer."
  ],
  "https://docs.y.uno/docs/via-api": [
    "Via API",
    "Suggest Edits",
    "On this page, you will find a walk-through guide on migrating tokens using the Yuno API endpoints. After completing the guide steps, you will have a list of customers with enrolled payment methods in their accounts.",
    "Requirements",
    "Before starting following the steps described in this guide, you need to:",
    "Have concluded the three steps related to the",
    "importing cards from a gateway account",
    "process.",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which are composed by:",
    "public-api-key",
    "private-secrete-key",
    "account_id",
    "Ensure to have concluded the steps and have the above data before following the guide.",
    "Migrate tokens via API",
    "Step 1: Create customers",
    "Use the",
    "Create Customer",
    "endpoint to create customers on the Yuno system. You can't enroll payment methods to customers that do not exist on the Yuno system. However, you can skip this step if customers already exist in Yuno.",
    "To register new customers, You will need to provide their personal information. In addition, you also need to supply the",
    "merchant_customer_id",
    ", a unique identifier for the customer used on your system.",
    "Customer complementary information",
    "When creating a",
    "Customer",
    ", certain information is not required but can improve the user's payment experience if provided. Phone, billing address, and shipping address are examples of not mandatory data you can provide.",
    "If you add optional information, be aware of the required mandatory fields.",
    "At the end of the create a customer process, you will receive an",
    "id",
    ", which identifies the user within the Yuno system. Use the",
    "id",
    "to enroll the existing payment methods.",
    "Step 2: Check the customer data (optional)",
    "After creating each customer, you can use the",
    "Retrieve Customer",
    "endpoint to confirm the registered customer information. To retrieve the customer data, you need to provide the",
    "id",
    "received when the customer was created.",
    "Step 3: Enroll a payment method",
    "To finish the migration process, you will use the third-party vault/gateway data to enroll payment methods for each customer on the Yuno system.",
    "Use the",
    "Enroll Payment Method",
    "endpoint to enroll the received payment methods. Notice that the",
    "customer_id",
    "required to perform the request is the",
    "id",
    "you received when creating the customer in",
    "Step 1",
    ". You will also need to provide the",
    "provider_data",
    "object with the external provider's token, as presented in the code snip below:",
    "JSON",
    "\"provider_data\"",
    ": {",
    "\"id\"",
    ":",
    "\"id_provider\"",
    ",",
    "\"payment_method_token\"",
    ":",
    "\"{payment_method_token}\"",
    "}",
    "Within the endpoint response, you will have access to the",
    "vaulted_token",
    "which identifies the enrolled payment method. You will use the received",
    "vaulted_token",
    "to perform future payments, making additional payment method information unnecessary.",
    "Step 4: Check the enrolled payment method (optional)",
    "After enrolling the payment method, you can use the",
    "Retrieve Enrolled Payment Methods",
    "endpoint to confirm that the payment method was enrolled correctly. Notice that the",
    "customer_id",
    "required to perform the request is the",
    "id",
    "you received when creating the customer in",
    "Step 1",
    "."
  ],
  "https://docs.y.uno/docs/3d-secure": [
    "3D Secure",
    "Suggest Edits",
    "What is 3D Secure 2",
    "3D Secure, or 3DS, is a security protocol for online payments to prevent the fraudulent use of credit cards in card-not-present (CNP) transactions. The protocol, developed in 1999, requires additional verification steps for customers during the purchase process to authenticate themselves and reduce the risk of fraud. The flux below presents a payment process using 3DS:",
    "Where:",
    "Merchant Plugin Interface (MPI) initiates the verification process by facilitating the secure exchange of information between (the merchant, scheme Directory server, and the cardholder’s issuing bank).",
    "Scheme Directory Server (DS) acts as a centralized database and facilitates the identification of the appropriate cardholder’s issuing bank and the corresponding authentication method to be used.",
    "Issuer Access Control Server (ACS) is responsible for verifying and validating the cardholder’s identity during a 3DS transaction. The Issuer ACS receives authentication requests and performs risk assessments and authentication checks based on the bank’s predefined rules and policies.",
    "3D Secure 2, or 3DS2, published in 2016, is an updated version of the original 3DS protocol and uses dynamic authentication methods such as biometrics and token-based authentication, whereas the original 3DS protocol relies on static passwords. 3DS2 aims to provide a better user experience with a more fluid flow for end users during authentication. EMVCo, an organization owned by major card brands, developed and managed both protocols. All major card brands stopped supporting the first version of 3DS on October 2022. Therefore, integrating the 3DS2 verification step is essential to ensure your customers' experience and security. Yuno already provides an easy 3DS2 integration for your business.",
    "Benefits of 3D Secure 2",
    "As mentioned, 3DS2 was developed to enhance the user experience and adapt the 3DS protocol to the modern payment landscape.",
    "Prepared for new technologies",
    "3DS2 was designed with the rise of smartphones in mind and allowed banks to offer innovative authentication experiences through their mobile banking apps, such as biometric authentication using fingerprints or facial recognition. Therefore, merchants can offer several authentication methods that align with consumer preferences and technological advancements, resulting in a more convenient and secure authentication process.",
    "Integration capabilities",
    "Regarding integration, 3DS2 includes an SDK component that enables native integration into mobile apps. As a result, merchants can authenticate transactions within their own apps. Now, the challenge flow happens directly within the mobile checkout flows, eliminating the need for full-page redirects and providing a more seamless user experience.",
    "Amount of data available for authentication",
    "3DS2 allows businesses to exchange ten times more data on each transaction to the cardholder's bank. This includes payment-specific data, such as shipping address, and contextual data, such as the customer's device ID or previous transaction history. This allows the bank to assess the transaction's risk level and potentially authenticate the payment without additional input from the cardholder. Therefore, a payment using 3DS2 protocols can face a",
    "frictionless flow",
    "or a",
    "challenge flow",
    "to complete the payment.",
    "Frictionless flow",
    "In a frictionless flow, the customer's data is confirmed without any manual data entry. It happens when the system recognizes and verifies the customer’s device, and the data is exchanged in the background. As the customer is identified and validated with this information, no additional requests are necessary from the payment systems.",
    "Challenge flow",
    "The challenge flow happens when the stored information isn't enough to validate the customer. As the customer's identity is not confirmed, the system requires an additional step to validate the customer, using a one-time password or biometric verification. Depending on the validation system, the customer may be redirected to a card issuer’s page to enter the necessary information.",
    "The use of 3DS2 results in a smoother and more frictionless user experience. The improved data flows and decision-making capabilities enabled by 3DS2 reduce the cart abandonment rate and improve the conversion rates.",
    "3D Secure 2 Payment",
    "Adding the 3DS2 verification step to the checkout process changes the normal workflow. Below is a flow chart of the complete checkout and the description of each step to better understand the process.",
    "The customer provides their card data to initiate the merchant checkout process.",
    "The merchant's system checks if it supports 3DS2.",
    "If the merchant does not support 3DS2, the checkout process proceeds with the regular payment workflow without using the 3DS2 verification.",
    "If the merchant supports 3DS2, Yuno sends the transaction information to the issuer's 3DS service provider to assess the transaction risk. This data includes cardholder and device information upon regional or market law restrictions, such as device ID, MAC address, geo-location, previous transactions, and more.",
    "The issuer's 3DS service provider determines if it is a high-risk transaction and if a challenge is necessary for additional verification.",
    "The payment proceeds to the authorization step if no challenge is necessary (frictionless flow).",
    "If a challenge is required (challenge flow), it is presented to the cardholder to verify their identity. This verification can use biometrics and/or two-factor authentication, such as a one-time password or a fingerprint.",
    "The system checks if the cardholder successfully completed the challenge.",
    "The payment proceeds to the authorization step if the cardholder successfully verifies their identity.",
    "If the cardholder fails to verify their identity, the payment is canceled.",
    "The merchant checks with the card issuer if the transaction is authorized.",
    "If the transaction is authorized, the payment is processed successfully.",
    "If the transaction is not authorized, the payment is canceled or declined.",
    "Configuration of a 3D secure 2 for yours payments",
    "You decide if your system will implement the 3DS2 or not. The 3DS2 verification step is added while defining your cards",
    "dynamic routing",
    ". When starting your card routes, you can add the 3DS2 step before defining the payment provider. In the case of adding the 3DS2 verification step, when a payment using a card is initialized, the Yuno system will analyze if the card needs an extra challenge. If an extra challenge is necessary, the user will be redirected to the bank environment to complete the authorization. On the other hand, the payment process will proceed normally.",
    "Yuno 3D secure 2 integration",
    "Yuno provides different ways to add 3DS2 security to your payment flow. The currently available options are the",
    "Direct",
    "and the",
    "Checkout",
    "integrations.",
    "Direct integration",
    "The Direct workflow is only available for PCI-compliant merchants. It provides a straightforward way to create a payment and validate user information, requiring the merchant to perform just one request to create the payment. To successfully implement the Direct integration, follow the steps outlined in the",
    "integration guideline",
    "and provide the required information as instructed.",
    "Checkout integration",
    "The Checkout workflow is part of the",
    "Checkout",
    "solution provided by Yuno.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/direct-workflow": [
    "Direct Workflow",
    "Suggest Edits",
    "Yuno provides a convenient 3DS payment option, which offers additional security and verification measures for online transactions. To perform 3DS payments within Yuno, you will use the",
    "DIRECT",
    "workflow. On this page, you will find a description of how to use 3DS DIRECT.",
    "3DS DIRECT",
    "To create payments with the 3DS DIRECT workflow, you need to fulfill some requirements.",
    "Requirements",
    "Before using 3DS DIRECT, you need to enable 3DS in your",
    "Yuno Dashboard",
    "and specify the scenarios in which you want your customers to be able to use it. These scenarios must be indicated on your CARD route. Additionally, you will require the following 3DS setup data in the payment provider connection:",
    "Acquirer BIN",
    ": This is the Bank Identification Number (BIN) used to clear and settle the transaction, along with the country in which it is licensed for use.",
    "Merchant ID",
    ": This is the affiliation number provided by the acquirer.",
    "Merchant Category Code (MCC)",
    ": The acquirer will provide a specific code representing your merchant category.",
    "Merchant's Name",
    ": Refers to the official name or business name of the company or entity conducting the commercial transaction.",
    "Merchant URL",
    ": The merchant's website or online platform.",
    "Country Code",
    ": The country where the payment needs to be processed, following the",
    "ISO 3166-1",
    "Standard Country Codes.",
    "Integration Workflow",
    "The Workflow to create a payment with 3DS is summarized in the image below.",
    "3DS Setup",
    "Before creating your payment, you'll need to use the",
    "Setup service",
    "with the card data so we can establish a connection with the 3DS service provider and get the",
    "three_d_secure_setup_id",
    "to continue with the payment.",
    "Once you get the setup_id, you'll need to initiate",
    "Yuno's web sdk",
    "so we can collect the user's device information and continue with the payment.",
    "How to create a payment",
    "To create a payment with 3DS DIRECT, you will use the",
    "Create Payment",
    "endpoint. To create the payment request, you need to provide:",
    "The",
    "card.data",
    "inside the corresponding",
    "payment_method",
    ".",
    "The",
    "card.three_d_secure_setup_id",
    "obtained in the 3DS Setup endpoint, also inside the corresponding",
    "payment_method",
    ".",
    "A",
    "callback_url",
    "to redirect the customer after completing the challenge, if required.",
    "As described on the",
    "3DS Card Verification",
    "page, a payment with 3DS may require an additional challenge to check the customer's identity. If an additional verification step is necessary related to a 3DS verification challenge, the response to the",
    "Create Payment",
    "endpoint will have the following:",
    "The",
    "PENDING/WAITING_ADDITIONAL_STEP",
    "status/sub status.",
    "A",
    "sdk_action_required",
    "set as",
    "true",
    ".",
    "A",
    "redirect_url",
    "defined in",
    "payment.payment_method.payment_method_detail.card",
    ".",
    "You are responsible for redirecting your customers to the URL provided by the",
    "redirect_url",
    "to complete the challenge. Once the customer successfully completes the 3DS challenge, they will be automatically redirected to the",
    "callback_url",
    ", which you provided when creating the payment with the",
    "Create Payment endpoint",
    ".",
    "The Yuno",
    "webhooks",
    "will promptly notify you about the outcome of the 3DS challenge and the final payment status. This ensures that you receive real-time updates on the progress and completion of the payment transaction. Also, you can always get the payment information by using our",
    "get payment service",
    ".",
    "Transactions status",
    "A 3DS transaction functions similarly to a regular purchase transaction. It progresses through different states that represent the authorization process. Once the 3DS transaction is marked as SUCCEEDED, Yuno proceeds to the processor and generates a PURCHASE transaction to charge the client. All possible states and their descriptions are described in the following table.",
    "Status",
    "Description",
    "CREATED",
    "Payment is created and waiting for Yuno's SDK session id.",
    "PENDING",
    "The challenge is required, and the",
    "redirect_url",
    "is returned by Yuno.",
    "IN_PROCESS",
    "The user is completing the challenge.",
    "SUCCEEDED",
    "The challenge was completed correctly.",
    "DECLINED",
    "The challenge was completed but declined by the bank.",
    "ERROR",
    "An error occurred while redirecting to the user's challenge.",
    "As mentioned before, if the payment is PENDING/WAITING_ADDITIONAL_STEP, the 3DS transaction is going to be PENDING when a Challenge is required. After the challenge is completed, either successfully or not, the payment and transaction are going to be updated to the corresponding states (SUCCEEDED or DECLINED)."
  ],
  "https://docs.y.uno/docs/pci-compliance": [
    "PCI Compliance",
    "Suggest Edits",
    "The user payment experience is related directly to how safe they feel when using your platform to make a payment. Clients are more likely to buy from merchants that keep their sensitive data safe, protecting users from cyber theft and fraud. Therefore, becoming PCI compliant makes you closer to a better user experience and gaining clients’ trust.",
    "Yuno Solution",
    "With Yuno's PCI-DSS Level 1 solution, you can securely tokenize your customers' payment information, reducing your PCI scope and ensuring data protection.",
    "Tokenization involves collecting sensitive payment details and generating a short-term, single-use token representing this information. Yuno handles and secures sensitive payment data, thereby maintaining PCI compliance on your behalf.  Tokenization offers the following advantages:",
    "Enhanced checkout experience",
    ": By storing payment methods as tokens, your customers can enjoy a smoother and faster checkout process.",
    "Support for subscription and recurring payments",
    ": Tokenized payment methods can be easily utilized for recurring payment scenarios, enabling seamless subscription billing.",
    "User control over sensitive information",
    ": Yuno enables users to manage their saved cards, giving them control and visibility over sensitive payment information.",
    "Yuno simplifies the process of making payments across different providers by tokenizing users' payment information. This means you only need to store a single token, making future payment transactions easier.",
    "What is PCI compliance?",
    "The Payment Card Industry Data Security Standard (PCI DSS) is a set of rules which merchants that store, process, or transmit cardholder data must follow. The PCI DSS aims to reduce payment card fraud by establishing the payment ecosystem's foundational security. Your business must meet the requirements and continually document and remediate processes handling cardholder data to be PCI compliant. Governments do not supervise PCI-compliant observance, but card brands can penalize merchants that are not in compliance.",
    "Who must be PCI compliant",
    "Any enterprise processing, transmitting, or storing individuals’ card data, no matter the size or number of transactions effectuated annually, must be PCI compliant. Therefore, if your business accepts cards as a payment method, it must follow the PCI rules. You still need to be certified even if your operation is based on a third-party solution to handle cardholder data. However, the compliant process is significantly simplified using third-party solutions like Yuno.",
    "PCI compliance levels",
    "As a consequence of the company's variety and transaction volume, four PCI compliance levels were defined. Depending on the level of compliance the companies fit, a different amount of security validation is required. The four PCI compliance levels are:",
    "Level 1: process more than 6M debit or credit card transactions annually",
    "Level 2: process between 1M-6M transactions annually",
    "Level 3: process between 20K-1M transactions annually",
    "Level 4: process less than 20K transactions annually",
    "While Level 1 merchants must undergo an internal audit performed by an authorized Qualified Security Assessor (QSA) once a year, other level merchants usually have to submit an Annual Self-Assessment Questionnaire (SAQ).",
    "How To Become PCI Compliant",
    "The PCI Security Standards Council developed the requirements to become PCI compliant. There are 12 essential requirements, but depending on the compliance level, you may be required to meet each of the 400+ security controls associated with base requirements, directives, and test procedures. The vast list of conditions involves components to ensure the safety regarding card data handling and storing, as well as annual validation cycles to control and provide the necessary security level.",
    "How Yuno helps you remain PCI compliant",
    "At first sight, the list of PCI requirements might seem complex and time-consuming, but the process is very straightforward. You can count on Yuno's help to ensure your cybersecurity, reputation, and long-term sales. Become PCI compliant!",
    "Using Yuno solutions, the transaction and cardholder data are tokenized. Therefore, merchants no more store or transmit card data through their system, dealing only with non-sensitive data. It is possible because cardholder data are replaced with a unique string of numbers, while Yuno safely stores and processes the sensitive data.",
    "Since your business reduces the contact and exposure of cardholder data, the PCI compliance process is simplified. Instead of an internal audition, you have to complete a questionnaire. Thus, your business saves costs and offers customers a more secure payment experience.",
    "Using a third-party service like Yuno, you will probably be required to fill out the SAQ A or SAQ D. If all cardholder data functions are outsourced, and your business systems or premises do not store, process, or transmit cardholder data, you would probably need to fill out the SAQ A, composed of 22 questions. On the other hand, if your business does not use outsourced systems and stores card data, you would probably need to fill out the SAQ D, composed of 329 questions.",
    "In the case of your business integrating the Yuno",
    "Direct Flow",
    ", you must share an Attestation of Compliance (AOC) signed by your company and a certified auditor.",
    "Take advantage of Yuno solutions",
    "To leverage the capabilities of Yuno's PCI-DSS Level 1 solution, you can utilize one of our integration options based on Yuno SDKs. Choose from Full Checkout, Lite Checkout, and Secure Fields, each offering unique features to suit your specific requirements. These SDKs are available for both mobile and JavaScript versions. For detailed information on Yuno's SDKs, please refer to the",
    "SDK guide",
    ".",
    "Where you can find more information",
    "For further information, you can use the",
    "PCI official page",
    ", where you will find complete documentation regarding data security standards. In addition, you can go directly to the",
    "PCI Document Library",
    "to download the SAQ Instructions and Guidelines and the last versions of the SAQ self-assessment questionnaires."
  ],
  "https://docs.y.uno/docs/payouts": [
    "Payouts",
    "Suggest Edits",
    "Yuno Payouts is an API solution designed to streamline the process of sending secure payouts to various beneficiaries, such as users, merchants, providers, and customers. By integrating our Payouts service, you can efficiently distribute funds to multiple recipients while ensuring their security.",
    "With our flexible API, you can create one or multiple payout requests without restrictions on the number of records. Our service allows you to make payments to any bank in the processing country, leveraging regional capabilities.",
    "Benefits of using Yuno Payouts",
    "Centralization",
    ": The Payout service saves you time and costs by centralizing all your payment operations in one place. You no longer need to manage payments across multiple systems or interfaces.",
    "Control",
    ": Our Payouts feature makes managing your account funds and the balance easier. You can cancel payment orders before they are sent to the bank, giving you more control over your financial transactions.",
    "Information",
    ": Stay informed about payment statuses with our customizable notifications. You can receive real-time updates on any changes in the payment order status tailored to your preferences.",
    "Localization",
    ": By depositing funds directly into your partners' local bank accounts, you can pay them in their preferred currency, eliminating the need for foreign currency conversions and saving them from extra fees and taxes.",
    "Payout Flow",
    "You need to have a Yuno account and have integration with the Yuno API.",
    "Using the",
    "Create Payout",
    "endpoint, you can create a payment operation to transfer funds to one or more beneficiaries.",
    "Yuno will send the payout request to the provider, which will analyze the available fund to authorize the payment.",
    "(Optional)",
    "If you choose to hold the payment, you will need to use the",
    "Release Payout",
    "endpoint to complete the payout process.",
    "You can access the",
    "Payout",
    "page on the API Reference for a more in-depth description of the Payout workflow. On this page, you will find a graphical workflow presentation and further explanation of the Payout states process.",
    "Note that activating the Yuno Payouts service requires a security and risk analysis. To learn more about this service or request its activation, contact Yuno support.",
    "Simplify your payment processes, enhance partner satisfaction, and take control of your payout operations with Yuno Payouts."
  ],
  "https://docs.y.uno/docs/installments": [
    "Installments",
    "Suggest Edits",
    "In this section, you'll discover how Yuno supports payments in installments, offering you and your customers the flexibility to make large purchases more affordable. Explore the benefits of this feature and understand the difference between \"Merchant\" and \"Provider\" installments for a tailored payment solution.",
    "Accept card payments in installments",
    "Yuno supports payments in installments, which allows you to spread out the cost of a purchase over a longer period of time. This is a great way to make a large purchase more affordable or to free up cash flow for other expenses.",
    "Benefits of Using Payments in Installments",
    "There are several benefits to using installment payments for your customers:",
    "Affordability",
    ": Paying in installments can make a large purchase more affordable by spreading out the cost over a longer period of time. This can be especially helpful if the customer doesn't have the full amount of money available upfront.",
    "Flexibility",
    ": With payments in installments, you can offer your customer a payment plan that best suits their need. They can usually choose the number of months to pay off the purchase, as well as the amount of each payment.",
    "Convenience",
    ": Payments in installments can be a convenient way to make a purchase. Customers can usually make payments online or by phone, and they don't have to worry about writing checks or carrying cash.",
    "Merchant vs. Provider Installments",
    "Installment implementation varies depending on the origin and your commercial agreements. There are two options merchants can use, one defined by themselves and the other according to the providers' definition:",
    "Merchant",
    ": In this case, the merchant manages its own installment options through individual payment processors, determining the available installment choices for customers within Yuno.",
    "Provider",
    ": When the merchant lacks predefined installment agreements, they rely on the payment processor's installment options. We work with your chosen provider to access the available installments to offer your customers for each transaction.",
    "To have additional information regarding how to configure each option, you can access the",
    "Merchant Installments",
    "or the",
    "Provider Installments",
    "pages."
  ],
  "https://docs.y.uno/docs/merchant-installments": [
    "Merchant Installments",
    "Suggest Edits",
    "You can use the Merchant Installments options when you, the merchant, have your own commercial agreements and installment capabilities defined within your payment processors. In this case, you are responsible for handling the logic behind the installment options available for each transaction. When creating the payment, you will inform Yuno of the available number of installments that customers can choose from.",
    "How to Use Merchant Installments?",
    "Depending on the way you are connected to Yuno, the process of configuring the installments may vary. Next, we present how you can inform Yuno of the installment option for the Direct workflow and the SDK integration.",
    "Direct workflow",
    "When using a",
    "Direct integration",
    ",  you manage the front-end checkout experience. In this case, you will inform Yuno about the number of installments when creating the payment using the",
    "Create Payment",
    "endpoint. The number of installments will be defined through the",
    "payment_method.detail.card.installments",
    "parameter.",
    "SDK Integration",
    "When you use Yuno's SDK, Yuno is responsible for presenting to the customer the installment options available for each payment. As a result, you need to inform Yuno which installments will be available for your account. In this case, the installment configurations are performed through",
    "Yuno's Dashboard",
    ". To perform this configuration, execute the two steps described below.",
    "First, when configuring your provider",
    "Connection",
    "in Yuno Dashboard, you need to enable the installments option. Thus, Yuno will show the installment option when the customer chooses the Credit card option form of the SDK checkout.",
    "After enabling the installments, you need to create an installment plan using the",
    "Create Installments Plan",
    "endpoint. When creating a plan, you will specify the accepted currency, amounts, card brands, dates, etc. After that, we will take care of the rest.",
    "Secure Fields SDK",
    "When using Secure Fields SDK integration, you will need to",
    "enable the installments option",
    "while starting the checkout process.",
    "For merchant-created installments, you also have the possibility of specifying the plan for every session by using the",
    "plan_id",
    "while",
    "creating the session",
    ".",
    "Routing",
    "When setting up your",
    "route",
    "for the Card payment method, it's important to remember that if you have a fallback provider while using installments, we will try to make a fallback payment if the first transaction is rejected. Therefore, it's crucial to ensure that both providers support the amount of installments set for your account. If they do not, you can set up different routes for each scenario to avoid issues."
  ],
  "https://docs.y.uno/docs/provider-installments": [
    "Provider Installments",
    "Suggest Edits",
    "Provider",
    "installment is when the merchant does not have a commercial agreement for a defined set of installments, so they use the installments defined by the payment processor. Yuno consults the provider of your choosing in order to get the installments available to offer your customers for each transaction.",
    "How to Use Provider Installments?",
    "While configuring your provider",
    "Connection",
    "in Yuno Dashboard, you can enable the installments available for the provider so we can use them in the Credit card form of the SDK for the customer to select from. For this scenario, there is no need to create a plan, as Yuno will use the plan defined by your payment processor.",
    "Secure Fields SDK",
    "When using Secure Fields SDK integration, you will need to",
    "enable the installments option",
    "while starting the checkout process.",
    "This option is not enabled for all providers, only the ones that have Installment services that Yuno can access to get the information from. If you consider that a provider should have this feature enabled, please reach out to your account manager.",
    "Routing",
    "While setting your",
    "route",
    "for the Card payment method, remember that having a fallback for a provider that has \"Provider installments\" is not supported, as different providers handle different types of installment plans. It can cause a processing error in the fallback."
  ],
  "https://docs.y.uno/docs/subscriptions": [
    "Subscriptions",
    "Suggest Edits",
    "Subscriptions are essential components of a business model that enable your company to offer its products or services to customers on a recurring basis. Yuno's subscription service allows you to easily manage recurring payments, automate subscription billing, and provide seamless subscription experiences for your users. Whether running a SaaS application, a content platform, or an e-commerce store, Yuno service can help you handle subscription-related tasks efficiently.",
    "Benefits of using Yuno subscriptions",
    "Recurring Revenue",
    ": Subscriptions provide a steady and predictable income stream, which can help stabilize cash flow and reduce financial uncertainties.",
    "Customer Loyalty",
    ": Subscribers tend to be more loyal, resulting in higher customer retention rates and reduced churn.",
    "Reduced Acquisition Costs",
    ": Subscriptions reduce the need for constant customer acquisition efforts, allowing businesses to focus more on retaining and serving existing customers.",
    "Yuno subscriptions",
    "A subscription in Yuno's environment can go through a few different stages, starting with its creation status. When a subscription is created, it automatically receives the",
    "CREATED",
    "status. However, it is a transitory status that is active while the payment isn't processed. After that, the subscription will be",
    "ACTIVE",
    "or",
    "CANCELLED",
    ", depending on the payment confirmation.",
    "When the payment related to the subscription is confirmed, the subscription status changes to",
    "ACTIVE",
    ". It remains with this status while the subscription is within its availability data range and the customer pays the bills. An active subscription can change to three different statuses:",
    "COMPLETED",
    ": The subscription finish date was reached. In this case, the current subscription is terminated, and it is not possible to reactivate it. If your client wants to continue using your product/service using recurring payments, you need to create a new subscription.",
    "PAUSED",
    ": At any moment, you can pause the subscription. Use this option in case your customer has delayed a payment, for example. You can always activate a paused subscription.",
    "CANCELLED",
    ": If your customers decides to cancel the recurring payment, you can cancel the subscription. After canceling it, the subscription is terminated, and it is not possible to reactivate it.",
    "Learn more about the status of the subscription on the",
    "Subscription status page",
    ".",
    "Subscription integration",
    "To start using the subscriptions feature, you need to have a Yuno account and have integration with the Yuno API. The Yuno API provides the following operations to manage your subscriptions:",
    "Create",
    ": using the",
    "Create a Subscription endpoint",
    "you can subscribe a customer.",
    "Pause",
    ": You can pause an active subscription with the",
    "Pause Subscription endpoint",
    ".",
    "Resume",
    ": A previously paused subscription can be resumed with the",
    "Resume Subscription endpoint",
    ".",
    "Cancel",
    ": You can cancel an active subscription with the",
    "Cancel Subscription endpoint",
    ".",
    "Retrieve",
    ": Use the",
    "Retrieve Subscription endpoint",
    "to retrieve the details of a subscription.",
    "Using Yuno subscription solution",
    "Yuno provides subscription management functionalities through its API. You can use this API to create, update, and manage subscriptions, as well as retrieve subscription details and usage.",
    "To use the subscription solution, normally, you will follow the steps described below:",
    "To start,",
    "create a customer",
    ". You will need to provide personal customer information. In addition, you also need to supply the",
    "merchant_customer_id",
    ", a unique identifier for the customer used on your system. At the end of the create a customer process, you will receive an",
    "id",
    ", which identifies the user within the Yuno system. You will use the",
    "id",
    "to create the subscription.",
    "After creating the customer, you will need to",
    "enroll a credit card",
    "in order to generate a",
    "vaulted_token",
    "to use it in the subscription creation.",
    "Create a subscription",
    "for your customer and the card enrolled. You will configure the subscription and define the payment method at this step. When creating the subscription, you can customize:",
    "The amount the subscription charges.",
    "The billing frequency (daily, monthly, or yearly).",
    "The total number of billing cycles.",
    "The subscription availability to define the start and ending date.",
    "Available payment methods",
    "Currently, only Cards can be used as payment methods for subscriptions.",
    "In the response to the",
    "Create Subscription",
    "endpoint, you receive an",
    "id",
    "which is used to identify the created endpoint. You will use the",
    "id",
    "if you decide to pause, resume, or cancel the subscription."
  ],
  "https://docs.y.uno/docs/stored-credentials": [
    "Stored credentials",
    "Suggest Edits",
    "Depending on how and when a payment is being processed, it can be considered to have two different origins: Customer Initiated Transactions (CIT) or Merchant Initiated Transactions (MIT).",
    "To guarantee the responsible storage and utilization of cardholder information, Visa and Mastercard have implemented guidelines and regulations for stored credentials.",
    "We have simplified the process for you to adhere to these scheme rules, allowing you to securely store card details in Yuno for future use while ensuring compliance.",
    "Categorization",
    "CIT",
    "MIT",
    "Definition",
    "Customer-Initiated Transactions (CIT) are transactions in which the customer actively initiates the transaction, such as online purchases, in-store purchases, ATM withdrawals, etc.",
    "Merchant-Initiated Transactions (MIT) are transactions in which the merchant or service provider initiates the transaction without active involvement from the customer.",
    "Examples",
    "Online purchases, in-store purchases, ATM withdrawals, etc.",
    "Recurring payments, automatic subscription renewals, recurring billing, etc.",
    "Authentication",
    "Generally, these transactions require cardholder authentication to ensure security.",
    "Only an initial authentication by the customer is necessary the later create merchant initiated transactions. Additional authentication may be required depending on security regulations and the policies of the card issuer.",
    "Defining whether a transaction is initiated by the merchant or the customer has significant implications for security, user experience, fraud prevention, and regulatory compliance. This ensures an efficient and secure payment process for all parties involved.",
    "General Considerations",
    "Responsibility",
    ": In the context of Strong Customer Authentication (SCA) under PSD2 regulation in the European Union, CIT generally requires higher authentication compared to MIT.",
    "Frequency",
    ": MIT transactions are often recurring and periodic, while CIT are more ad hoc events based on customer actions.",
    "Create a payment with processing type",
    "In order to indicate a",
    "payment",
    "specifying the processing type, use the structure",
    "stored_credentials",
    "inside the",
    "payment_method.detail.card",
    "while creating a payment.",
    "Parameter",
    "Type",
    "Description",
    "reason",
    "enum",
    "Indicates the store credentials reason for the transaction.",
    "CARD_ON_FILE",
    "SUBSCRIPTION",
    "UNSCHEDULED_CARD_ON_FILE",
    "usage",
    "enum",
    "A credit card could be stored with or without a first initial payment. This field Iets you indicate if this is the first time the vaulted_token/network_token is used for a payment or if it has already been used for a previous payment.",
    "FIRST",
    "USED",
    "Store credential reasons",
    "Reason",
    "Description",
    "CARD_ON_FILE",
    "A customer-initiated payment using a previously enrolled credit card where the cardholder is present. Allow customers one-click payment for a frictionless payment experience.",
    "SUBSCRIPTION",
    "A merchant-initiated payment as part of a subscription schedule and with a set amount. Payments are processed in regular intervals to which the user has given consent.",
    "UNSCHEDULED_CARD_ON_FILE",
    "A merchant initiated payment using stored credit card details that is not related to a subscription schedule or amount. Payment that could happen at any given time.",
    "Request Example",
    "Request (cURL)",
    "curl",
    "--request",
    "POST \\",
    "--url",
    "https://api-sandbox.y.uno/v1/payments \\",
    "--header",
    "'X-Idempotency-Key: <Your idempotency-key>'",
    "\\",
    "--header",
    "'accept: application/json'",
    "\\",
    "--header",
    "'content-type: application/json'",
    "\\",
    "--header",
    "'private-secret-key: <Your private-secret-key>'",
    "\\",
    "--header",
    "'public-api-key: <Your public-api-key>'",
    "\\",
    "--data",
    "'",
    "{",
    "\"description\": \"Test\",",
    "\"account_id\": \"{{account-code}}\",",
    "\"merchant_order_id\": \"0000023\",",
    "\"country\": \"CO\",",
    "\"merchant_reference\" : \"reference-{{$randomUUID}}\",",
    "\"amount\": {",
    "\"currency\": \"COP\",",
    "\"value\": 5000",
    "},",
    "\"customer_payer\": {",
    "\"id\":\"967ecd18-d898-4b88-9400-dd5b01b18edc\"",
    "},",
    "\"workflow\": \"DIRECT\",",
    "\"payment_method\": {",
    "\"type\":\"CARD\",",
    "\"vaulted_token\": \"eb8caa17-6407-457b-960e-125d8d7a90c1\",",
    "\"detail\": {",
    "\"card\": {",
    "\"stored_credentials\":{",
    "\"reason\":\"CARD_ON_FILE\",",
    "\"usage\": \"USED\"",
    "}",
    "}",
    "}",
    "}",
    "}",
    "'"
  ],
  "https://docs.y.uno/docs/payment-amount-details": [
    "Payment Amount Details",
    "Suggest Edits",
    "Our API offers flexibility in structuring payment amounts, accommodating various factors that may contribute to the total transaction sum. Whether it's base charges, taxes, fees, or tips, our system is designed to handle diverse components seamlessly. You can easily integrate and manage payments with different elements contributing to the overall amount",
    "Fee",
    "Shipping",
    "Tips",
    "This feature enhances transparency and convenience for both merchants and customers, enabling seamless handling of payment details within the payment process.",
    "Fee amount",
    "A dedicated field (",
    "additiona_data.order.fee_amount",
    ") allows you to specify the fee amount for your services that is included in the transaction.",
    "In the following example you can see a request that clarifies that a 180.00 COP fee amount is part of a 5000.00 COP final transaction. This field is for informational purposes, the",
    "fee_amount",
    "is already included in the final transaction amount and is not added separately.",
    "JSON",
    "curl",
    "--",
    "request",
    "POST",
    "\\",
    "--",
    "url",
    "https",
    ":",
    "//api-sandbox.y.uno/v1/payments \\",
    "--",
    "header",
    "'X-Idempotency-Key: <Your idempotency-key>'",
    "\\",
    "--",
    "header",
    "'accept: application/json'",
    "\\",
    "--",
    "header",
    "'content-type: application/json'",
    "\\",
    "--",
    "header",
    "'private-secret-key: <Your private-secret-key>'",
    "\\",
    "--",
    "header",
    "'public-api-key: <Your public-api-key>'",
    "\\",
    "--",
    "data",
    "'",
    "{",
    "\"description\"",
    ":",
    "\"Test\"",
    ",",
    "\"account_id\"",
    ":",
    "\"{{account-code}}\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000023\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"reference-{{$randomUUID}}\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "5000.00",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "\"967ecd18-d898-4b88-9400-dd5b01b18edc\"",
    "},",
    "\"additional_data\"",
    ": {",
    "\"order\"",
    ": {",
    "\"fee_amount\"",
    ":",
    "180.00",
    "}\n      },",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vaulted_token\"",
    ":",
    "\"eb8caa17-6407-457b-960e-125d8d7a90c1\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"stored_credentials\"",
    ":{",
    "\"reason\"",
    ":",
    "\"CARD_ON_FILE\"",
    ",",
    "\"usage\"",
    ":",
    "\"USED\"",
    "}\n           }\n        }\n    }\n}",
    "'",
    "Shipping amount",
    "A dedicated field (",
    "additiona_data.order.shipping_amount",
    ") allows you to specify the shipping amount that is included in the transaction.",
    "In the following example you can see a request that clarifies that a 270.00 COP shipping amount is part of a 5000.00 COP final transaction. This field is for informational purposes, the",
    "shipping_amount",
    "is already included in the final transaction amount and is not added separately.",
    "JSON",
    "curl",
    "--",
    "request",
    "POST",
    "\\",
    "--",
    "url",
    "https",
    ":",
    "//api-sandbox.y.uno/v1/payments \\",
    "--",
    "header",
    "'X-Idempotency-Key: <Your idempotency-key>'",
    "\\",
    "--",
    "header",
    "'accept: application/json'",
    "\\",
    "--",
    "header",
    "'content-type: application/json'",
    "\\",
    "--",
    "header",
    "'private-secret-key: <Your private-secret-key>'",
    "\\",
    "--",
    "header",
    "'public-api-key: <Your public-api-key>'",
    "\\",
    "--",
    "data",
    "'",
    "{",
    "\"description\"",
    ":",
    "\"Test\"",
    ",",
    "\"account_id\"",
    ":",
    "\"{{account-code}}\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000023\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"reference-{{$randomUUID}}\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "5000.00",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "\"967ecd18-d898-4b88-9400-dd5b01b18edc\"",
    "},",
    "\"additional_data\"",
    ": {",
    "\"order\"",
    ": {",
    "\"shipping_amount\"",
    ":",
    "270.00",
    "}\n      },",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vaulted_token\"",
    ":",
    "\"eb8caa17-6407-457b-960e-125d8d7a90c1\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"stored_credentials\"",
    ":{",
    "\"reason\"",
    ":",
    "\"CARD_ON_FILE\"",
    ",",
    "\"usage\"",
    ":",
    "\"USED\"",
    "}\n           }\n        }\n    }\n}",
    "'",
    "Tips",
    "A dedicated field (",
    "additiona_data.order.tip_amount",
    ") allows you to specify the tips amount that is included in the transaction.",
    "In the following example you can see a request that clarifies that a 50.00 COP tip amount is part of a 5000.00 COP final transaction. This field is for informational purposes, the",
    "tip_amount",
    "is already included in the final transaction amount and is not added separately.",
    "JSON",
    "curl",
    "--",
    "request",
    "POST",
    "\\",
    "--",
    "url",
    "https",
    ":",
    "//api-sandbox.y.uno/v1/payments \\",
    "--",
    "header",
    "'X-Idempotency-Key: <Your idempotency-key>'",
    "\\",
    "--",
    "header",
    "'accept: application/json'",
    "\\",
    "--",
    "header",
    "'content-type: application/json'",
    "\\",
    "--",
    "header",
    "'private-secret-key: <Your private-secret-key>'",
    "\\",
    "--",
    "header",
    "'public-api-key: <Your public-api-key>'",
    "\\",
    "--",
    "data",
    "'",
    "{",
    "\"description\"",
    ":",
    "\"Test\"",
    ",",
    "\"account_id\"",
    ":",
    "\"{{account-code}}\"",
    ",",
    "\"merchant_order_id\"",
    ":",
    "\"0000023\"",
    ",",
    "\"country\"",
    ":",
    "\"CO\"",
    ",",
    "\"merchant_reference\"",
    ":",
    "\"reference-{{$randomUUID}}\"",
    ",",
    "\"amount\"",
    ": {",
    "\"currency\"",
    ":",
    "\"COP\"",
    ",",
    "\"value\"",
    ":",
    "5000.00",
    "},",
    "\"customer_payer\"",
    ": {",
    "\"id\"",
    ":",
    "\"967ecd18-d898-4b88-9400-dd5b01b18edc\"",
    "},",
    "\"additional_data\"",
    ": {",
    "\"order\"",
    ": {",
    "\"tip_amount\"",
    ":",
    "50.00",
    "}\n      },",
    "\"workflow\"",
    ":",
    "\"DIRECT\"",
    ",",
    "\"payment_method\"",
    ": {",
    "\"type\"",
    ":",
    "\"CARD\"",
    ",",
    "\"vaulted_token\"",
    ":",
    "\"eb8caa17-6407-457b-960e-125d8d7a90c1\"",
    ",",
    "\"detail\"",
    ": {",
    "\"card\"",
    ": {",
    "\"stored_credentials\"",
    ":{",
    "\"reason\"",
    ":",
    "\"CARD_ON_FILE\"",
    ",",
    "\"usage\"",
    ":",
    "\"USED\"",
    "}\n           }\n        }\n    }\n}",
    "'"
  ],
  "https://docs.y.uno/docs/acquirers": [
    "Acquirers",
    "Suggest Edits",
    "Here you find the complete list of acquirers' connections available on Yuno. Select the desired acquirer to access information such as their coverage and supported payment types and currencies.",
    "Adyen",
    "BAC",
    "BBVA Openpay",
    "Cielo",
    "Credibanco",
    "Datafast",
    "FAC",
    "Fiserv",
    "Getnet",
    "Izipay",
    "Klap",
    "Medianet",
    "Niubiz",
    "PagSeguro",
    "Prosa",
    "Rede",
    "Redeban",
    "Stone",
    "Transbank",
    "Worldpay",
    "Testing Gateway"
  ],
  "https://docs.y.uno/docs/acquirers-advanced-informations": [
    "Acquirers Advanced Information",
    "Suggest Edits",
    "This page presents all information related to Acquirers' connections using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments>",
    "Chargebacks",
    "Security",
    "Integration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Depends on acquirer",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Nicaragua",
    "Panama",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "Depends on acquirer",
    "ARS, BRL, CLP, COP, CRC, USD, GTQ, HNL, MXN, NIO, PEN, UYU",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Can be configured.",
    "Maximum amount",
    ":",
    "In order to create a fraud filter a maximum amount can be stablished.",
    "TRX limit",
    ":",
    "No",
    "International BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "The acceptance of these BINS depends if the card is enabled for international purchases.",
    "TRX without CVV",
    ":",
    "Yes (depends on affiliation).",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Only for Cielo (BRL), Prosa (MXN) Procesos and Visanet (PEN)",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Capture availability",
    ":",
    "Only for Cielo (BRL), Prosa (MXN) Procesos and Visanet (PEN).",
    "Partial capture",
    ":",
    "Yes.",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture a Pre-Auth",
    ":",
    "10 days",
    "Captures over the amount of Auth",
    ":",
    "Yes, only supported by Prosa (MXN).",
    "Maximum Amount",
    ":",
    "No limit",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes, supported by Cielo (BRL), Prosa (MXN), Credibanco and Redeban (COP).",
    "Multiple refunds",
    ":",
    "No",
    "Time to send refund",
    ":",
    "Argentina",
    ": 6 months.",
    "Chile",
    ": 6 months.",
    "Colombia",
    ": 1 year.",
    "Ecuador",
    ": Same day.",
    "Mexico",
    ": 6 months.",
    "Peru",
    ": 6 months.",
    "Time to process refund",
    ":",
    "Depends on the country, the origin of the refund (anullment, adjustment, cancelation), if it is partial or total and the compensation periods.",
    "Voids",
    "Void support",
    ":",
    "Only supported for Prosa (MXN).",
    "Void to Pre-Auth",
    ":",
    "No",
    "Void to Refund",
    ":",
    "No",
    "Installments",
    "Installments sent directly in request",
    ":",
    "Supported for Colombia, Mexico, Brazil, Peru, Chile and Ecuador.",
    "GET to obtain permitted BIN installments",
    ":",
    "No",
    "Ability to choose responsable for the financiation of installments",
    ":",
    "Depends on the affiliation between the bank and the merchant.",
    "Conditions or restrictions of financing installments",
    ":",
    "No",
    "Deferral date",
    ":",
    "Supported for Ecuador and Mexico.",
    "Grace",
    ":",
    "Supported for Ecuador (Medianet) and Mexico. Established by the bank and the merchant.",
    "Grace",
    ":",
    "Supported for Ecuador (Medianet) and Mexico. Established by the bank and the merchant.",
    "Minimum Amount of Installments (#months)",
    ":",
    "1 for Colombia, Peru, Brazil, Chile and Mexico.",
    "Maximum Amount of Installments (#months)",
    ":",
    "It is an agreement between the merchant and the acquiring bank, but generally:",
    "Chile",
    ": 12.",
    "Colombia",
    ": 36.",
    "Brazil",
    ": 12.",
    "Ecuador",
    ": 36",
    "Mexico",
    ": Generally 24, can go up to 36 in certain cases.",
    "Peru",
    ": Izipay: 36, Visanet/Niubiz: 12.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "180 days since the purchase.",
    "Endpoint for disputes",
    ":",
    "No",
    "Maximum time to dispute a chargeback",
    ":",
    "Colombia",
    ": 2 working days.",
    "Peru",
    ": 2 working days.",
    "Brazil",
    ": 5 working days.",
    "Chile",
    ": 5 working days.",
    "Mexico",
    ": 3 working days.",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Integration configuration",
    "Obtainment of credentials",
    ":",
    "Configured by Yuno.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Acquirer",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Specific Fields",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Provide the URL to Yuno.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/adyen-acquirer": [
    "Adyen",
    "Suggest Edits",
    "Adyen provides merchants with online services to accept electronic payments by payment methods, including credit cards, bank payments such as debit cards, wire transfers, and real-time bank transfers based on online banking. Accepts online payments on any device or channel, whatever your business model, so you can give customers the experiences they expect.",
    "Overview Guide",
    "Connection page",
    "Adyen website",
    "Services and compatibility",
    "Provider ID:",
    "ADYEN",
    "Supported payment types:",
    "PIX →",
    "Cards →",
    "Available countries",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Gibraltar",
    "Greece",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "Ireland",
    "Italy",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Mexico",
    "Monaco",
    "Netherlands",
    "Denmark",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Currency acceptance",
    "Supported currencies:",
    "EUR, AUD, BGN, BRL, CHF, CZK, DKK, GBP, GIP, HKD, HUF, ISK, CHF, MXN, NOK, PLN, RON, SEK, SGD, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bac": [
    "BAC",
    "Suggest Edits",
    "Allows you to sell in an easy, fast and secure way with all cards.",
    "Overview Guide",
    "Connection page",
    "BAC website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Nicaragua",
    "Panama",
    "Currency acceptance",
    "Supported currencies:",
    "CRC, USD, FTQ, HNL, NIO, PAB",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bbva-openpay-acquirer": [
    "BBVA Openpay",
    "Suggest Edits",
    "Overview Guide",
    "Connection page",
    "Openpay website",
    "Services and compatibility",
    "Provider ID:",
    "OPENPAY",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/cielo": [
    "Cielo",
    "Suggest Edits",
    "Allows you to sell easily, quickly and securely with all cards.",
    "Overview Guide",
    "Connection page",
    "Cielo website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/credibanco": [
    "Credibanco",
    "Suggest Edits",
    "Receives electronic payments with high-quality standards and technology.",
    "Overview Guide",
    "Connection page",
    "Credibanco website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Colombia",
    "Currency acceptance",
    "Supported currencies:",
    "COP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/datafast": [
    "Datafast",
    "Suggest Edits",
    "Allows face-to-face and digital payments with credit and debit cards for your business.",
    "Overview Guide",
    "Connection page",
    "Datafast website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Ecuador",
    "Currency acceptance",
    "Supported currencies:",
    "USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/fac": [
    "First Atlantic Commerce (FAC)",
    "Suggest Edits",
    "First Atlantic Commerce provides online payment solutions and international credit card processing for merchants, banks, and partners worldwide. FAC is a payment gateway that enables merchants to accept and process credit and debit card payments online.",
    "Overview guide",
    "Connection page",
    "FAC website",
    "Services and compatibility",
    "Provider ID:",
    "FAC",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Anguilla",
    "Antigua",
    "Aruba",
    "Bahamas",
    "Barbados",
    "Belize",
    "Bermuda",
    "British Virgin Islands",
    "Cayman Islands",
    "Curacao",
    "Dominica",
    "Dominican Republic",
    "Grenada",
    "Guyana",
    "Jamaica",
    "Montserrat",
    "St Kitts",
    "St Lucia",
    "St Vincent",
    "Trinidad & Tobago",
    "Turks & Caicos",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Nicaragua",
    "Panama",
    "Currency acceptance",
    "Supported currencies:",
    "XCD, AWG, BSD, BBD, BZD, BMD, USD, KYD, ANG, DOP, GYD, JMD, TTD, CRC, GTQ, HNL, NIO",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/fiserv": [
    "Fiserv",
    "Suggest Edits",
    "Operates with cards in a fast, simple, and secure way.",
    "Overview Guide",
    "Connection page",
    "Fiserv website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Argentina",
    "Currency acceptance",
    "Supported currencies:",
    "ARS",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/getnet": [
    "Getnet",
    "Suggest Edits",
    "Getnet provides payment solutions, including card terminals, payment links, payment gateways, and e-commerce integration. Accept multiple card brands, offer installment plans, and enjoy secure transactions.",
    "Overview Guide",
    "Connection page",
    "Getnet website",
    "Services and compatibility",
    "Supported payment types:",
    "Cards →",
    "PIX →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL"
  ],
  "https://docs.y.uno/docs/izipay": [
    "Izipay",
    "Suggest Edits",
    "Accepts payments with all cards and leading mobile wallets in Peru.",
    "Overview Guide",
    "Connection page",
    "Izipay website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "PEN, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/klap": [
    "Klap",
    "Suggest Edits",
    "Accepts credit, debit and prepaid card purchases throughout its network.",
    "Overview Guide",
    "Connection page",
    "Klap website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Chile",
    "Currency acceptance",
    "Supported currencies:",
    "CLP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/medianet": [
    "Medianet",
    "Suggest Edits",
    "Accepts credit and debit card payments, simplifying electronic payments.",
    "Overview Guide",
    "Connection page",
    "Medianet website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Ecuador",
    "Currency acceptance",
    "Supported currencies:",
    "USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/niubiz": [
    "Niubiz",
    "Suggest Edits",
    "Allows you to sell easily, quickly and securely with all cards.",
    "Overview Guide",
    "Connection page",
    "Niubiz website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "PEN, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/pagseguro": [
    "PagSeguro",
    "Suggest Edits",
    "Allows you to make safe and secure card payments in LATAM countries.",
    "Overview Guide",
    "Connection page",
    "PagSeguro website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/prosa": [
    "Prosa",
    "Suggest Edits",
    "Receives purchases through different devices by accepting card payments.",
    "Overview Guide",
    "Connection page",
    "Prosa website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/rede": [
    "Rede",
    "Suggest Edits",
    "Rede offers card terminals, payment links, payment gateways, and e-commerce integration. Accept major card brands, offer installment plans, and rely on Rede's secure and fraud prevention services for your online sales.",
    "Overview Guide",
    "Connection page",
    "Rede website",
    "Services and compatibility",
    "Provider ID:",
    "REDE",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/redeban": [
    "Redeban",
    "Suggest Edits",
    "Accepts online payments thanks to different payment collection tools that adapt to your business needs.",
    "Overview Guide",
    "Connection page",
    "Redeban website",
    "Services and compatibility",
    "Supported payment types:",
    "Card →",
    "Available countries",
    "Colombia",
    "Currency acceptance",
    "Supported currencies:",
    "COP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stone": [
    "Stone",
    "Suggest Edits",
    "Stone is a leading Brazilian payment solutions company. They offer versatile payment options, such as Payment Links for sales without a website and secure Pix and Boleto payments.",
    "Overview Guide",
    "Connection page",
    "Stone website",
    "Services and compatibility",
    "Provider ID:",
    "STONE",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transbank": [
    "Transbank",
    "Suggest Edits",
    "Overview Guide",
    "Connection page",
    "Transbank website",
    "Services and compatibility",
    "Provider ID:",
    "TRANSBANK",
    "Integration types:",
    "Cards →",
    "Cards Mall →",
    "WebPay →",
    "WebPay Mall →",
    "Available countries",
    "Chile",
    "Currency acceptance",
    "Supported currencies:",
    "CLP"
  ],
  "https://docs.y.uno/docs/yuno-testing-gateway": [
    "Yuno Testing Gateway",
    "Suggest Edits",
    "To test Card payments in general, Yuno provides the",
    "Yuno Test Payment Gateway",
    ". It works as a connection, however, it is available",
    "only",
    "in the sandbox environment.",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "Yuno Test Payment Gateway doesn't requiere any key.",
    "General information",
    "Countries",
    ":",
    "Available in for all countries.",
    "Currencies",
    ":",
    "All currencies are available.",
    "Type of cards",
    ":",
    "Credit, Debit and Prepaid.",
    "Test data",
    ":",
    "Card information",
    "to complete payments in test mode.",
    "Integration configuration",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Yuno Test Payment Gateway",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "This connection is available only for testing procedures.",
    "Set up the Yuno Test Payment Gateway",
    "Complete the Test Payment Gateway",
    "Integration configuration",
    ".",
    "After establishing the connection, you must designate the Yuno Test Payment Gateway as your card payment provider in your routing section. Access",
    "Routing",
    "on the Yuno Dashboard, select",
    "Not published",
    ", find the",
    "Card",
    "option, and click",
    "Set Up",
    ".",
    "Create a new route for",
    "Card",
    ". If you are unsure how to create it, check the",
    "Configure dynamic routing",
    ".",
    "On the Routing dashboard, add conditions to trigger the card payment. You can use card brand or country as trigger conditions, for example.",
    "For the created condition, add the Yuno Test Payment Gateway.",
    "For the",
    "All other payments",
    "options, select the",
    "Cancel",
    "option. The below image presents an example of a routing configuration where the card brand condition was used, accepting payments with Visa and Mastercard brands.",
    "Now you need to make the cards available for testing. Access",
    "Checkout builder",
    "on the Yuno Dashboard.  Activate the toggle button for",
    "Card",
    "and publish the checkout using the",
    "Publish",
    "button.",
    "Use the",
    "Create payment",
    "guide to learn how to test card payments.",
    "Test card payments with Yuno Testing Gateway",
    "On this page, you will find a walk-through guide on creating a card payment using the",
    "Yuno Testing Gateway",
    ".",
    "Yuno Testing Gateway",
    "is a Yuno solution to test card payment in general. It works as a connection. However, it is only available in the sandbox environment.",
    "Requirements",
    "Before starting following the steps described in this guide, you need to:",
    "Access your",
    "API credentials",
    "on the Yuno Dashboard, which are composed by:",
    "public-api-key",
    "private-secrete-key",
    "account_id",
    "Set up the Yuno Testing Gateway connection on your Yuno Dashboard account. You find a step-by-step guide on connecting it in the",
    "Integration configuration section",
    ".",
    "Build a route",
    "for the Yuno Testing Gateway to define it as your card payment provider. You find a step-by-step guide on how to do it in the Set up the",
    "Yuno Testing Gateway section",
    ".",
    "Configure the checkout builder",
    "to make the Yuno Testing Gateway available.",
    "Steps summary",
    "The create payment process normally requires finishing the four steps listed below.",
    "Create a customer",
    "Create a checkout session",
    "[Create a One-Time Token]",
    "Create the payment",
    "Create a payment",
    "1. Create a customer",
    "Use the",
    "Create Customer",
    "to register the customer info. You will need to provide personal customer information. In addition, you also need to supply the",
    "merchant_customer_id",
    ", a unique identifier for the customer used on your system.",
    "Customer complementary information",
    "When creating a",
    "Customer",
    ", certain information is not required but can improve the user's payment experience if provided. Phone, billing address, and shipping address are examples of not mandatory data you can provide.",
    "If you add optional information, be aware of the required mandatory fields.",
    "At the end of the create a customer process, you will receive an",
    "id",
    ", which identifies the user within the Yuno system. Use the",
    "id",
    "to initialize the checkout.",
    "If you are creating a payment for an existing user who was previously created and already has an",
    "id",
    "you can skip this step.",
    "2. Create a checkout session",
    "With a customer registered, you can create a checkout session. The checkout is when the customer finalizes their order and proceeds to pay for the products or services they wish to acquire. Therefore, at this stage, you will provide information regarding the payment amount and the location where it is being created.",
    "Route conditions filtering",
    "When creating the route, you can define condition that work as filters. If you have used country as a condition, check if the provided country when creating the checkout session in on the condition list. Otherwise, the card payment may not be processed by the Yuno Testing Gateway.",
    "Use the",
    "Create Checkout Session",
    "endpoint. Notice that the",
    "customer_id",
    "required to perform the request is the",
    "id",
    "you received when creating the customer in",
    "Step 1",
    ".",
    "From the request response to the",
    "Create Checkout Session",
    "endpoint, you will receive the",
    "checkout_session",
    "information. It will be used to create the one-time token (OTT) and the payment on the next steps.",
    "3. Create a one-time token (OTT)",
    "An OTT is a unique identifier Yuno generates to protect your customer privacy and security. It serves as an identifier for payments detail and prevents sensitive data from being stored on your servers. Therefore, you can use OTTs to make it simple for your customers to repeat payments without re-entering their payment information, making the process more secure and convenient.",
    "You will always get the OTT from the Yuno SDK on your production application. However, to make it easier for you to test the payment creation process, Yuno provides the",
    "Create OTT",
    "endpoint. You will need to provide the",
    "checkout_session",
    "received in",
    "Step 2",
    "and define the payment type as",
    "CARD",
    "through the",
    "type",
    "parameter.  In the response, you will receive the",
    "one-time-token",
    ", which you will use to create the payment.",
    "4. Create a payment",
    "You will create a payment using the",
    "Create Payment endpoint",
    ". Below you find a deeper description of how to create a payment.",
    "4.1 Provide the required attributes",
    "Provide customer-related information, including the",
    "checkout_session",
    "from Step 2 through",
    "checkout.session",
    "and",
    "customer_payer",
    "object that contains the",
    "id",
    "from Step 1.",
    "Certain objects are not mandatory when creating a payment. However, if you provide this information, the user’s payment experience will be enhanced. Be aware of the mandatory fields if you wish to provide this information.",
    "4.2 Choose the capture type",
    "Yuno provides two options for payment capture:",
    "Single-step: Authorization and capture are performed simultaneously. You only need to create the payment. The authorization and capture are performed automatically. For the single-step option, you need to send the",
    "capture",
    "attribute as",
    "true",
    "on the request.",
    "Two steps: Authorization and capture are performed at different moments. After creating the payment, you will need to perform an authorization request and a capture request.  if you wish to process the payment in Two Steps, send",
    "capture",
    "as",
    "false",
    "and after creating the payment, use the",
    "Authorize Payment",
    "and the",
    "Capture Authorization",
    "to complete the process.",
    "4.3 Define the payment workflow",
    "When creating the payment, you need to inform which integration from Yuno you are using. When creating a payment, you must inform it through the",
    "workflow",
    "attribute, which can be:",
    "CHECKOUT",
    ": If you are using the Yuno SDK to create the payment.",
    "DIRECT",
    ": If you are using a back-to-back integration. To use this workflow, you need to be PCI compliant.",
    "REDIRECT",
    ": If you are using a back-to-back integration and provider redirection.",
    "4.4 Provide the payment method information",
    "Inform the payment method information through the object",
    "payment_method",
    ". Here, you will provide the",
    "one-time-token",
    "through the attribute",
    "token",
    "and select the payment",
    "type",
    "equal to",
    "CARD",
    ", the one informed in",
    "Step 3",
    ", based on the",
    "Payment type list",
    ". In addition, you need to add the card information on the object",
    "detail.card",
    ".",
    "You can use the payment description or specific card data to get the desired result when you test payment with Yuno Test Payment Gateway. The following sections describe in detail each approach.",
    "Yuno system follows a sequential process, initially examining card data and subsequently evaluating the provided description. Consequently, if there is a disparity in the status indicated by the card data and the description for a testing payment, Yuno will prioritize and reflect the status associated with the card data.",
    "4.4.1 - Payment Description",
    "To get the desired payment result using the payment description, you need to define the expected result as the description of the payment you create. For example, if you are testing a payment and expect a successful result, the payment description should be \"SUCCEEDED\". You find all available options in the",
    "Transaction Codes",
    "section.",
    "4.4.2 - Card detail",
    "Another option to get the expected payment results is to use one of the testing cards provided by Yuno. In the tables below, you find a list of cards and their data details to use when using the Yuno Testing Gateway. The",
    "Transaction Response Code",
    "column defines the returned payment status when you use the corresponding card.",
    "Visa",
    "Number",
    "Expiration Date",
    "Security Code",
    "Cardholder Name",
    "Transaction Response Code",
    "4507990000000002",
    "11/28",
    "123",
    "John Doe",
    "SUCCEEDED",
    "4507990000000010",
    "11/28",
    "123",
    "John Doe",
    "INSUFFICIENT_FUNDS",
    "4507990000000028",
    "11/28",
    "123",
    "John Doe",
    "DECLINED_BY_BANK",
    "4507990000000036",
    "11/28",
    "123",
    "John Doe",
    "DO_NOT_HONOR",
    "4507990000000044",
    "11/28",
    "123",
    "John Doe",
    "INVALID_SECURITY_CODE",
    "4507990000000051",
    "11/28",
    "123",
    "John Doe",
    "INVALID_CARD_DATA",
    "4507990000000069",
    "11/28",
    "123",
    "John Doe",
    "REPORTED_STOLEN",
    "4507990000000077",
    "11/28",
    "123",
    "John Doe",
    "ERROR",
    "Mastercard",
    "Number",
    "Expiration Date",
    "Security Code",
    "Cardholder Name",
    "Transaction Response Code",
    "5252440000000002",
    "11/28",
    "123",
    "John Doe",
    "SUCCEEDED",
    "5252440000000010",
    "11/28",
    "123",
    "John Doe",
    "INSUFFICIENT_FUNDS",
    "5252440000000028",
    "11/28",
    "123",
    "John Doe",
    "DECLINED_BY_BANK",
    "5252440000000036",
    "11/28",
    "123",
    "John Doe",
    "DO_NOT_HONOR",
    "5252440000000044",
    "11/28",
    "123",
    "John Doe",
    "INVALID_SECURITY_CODE",
    "5252440000000051",
    "11/28",
    "123",
    "John Doe",
    "INVALID_CARD_DATA",
    "5252440000000069",
    "11/28",
    "123",
    "John Doe",
    "REPORTED_STOLEN",
    "5252440000000077",
    "11/28",
    "123",
    "John Doe",
    "ERROR",
    "American Express",
    "Number",
    "Expiration Date",
    "Security Code",
    "Cardholder Name",
    "Transaction Response Code",
    "370000000000002",
    "11/28",
    "1234",
    "John Doe",
    "SUCCEEDED",
    "370000000000010",
    "11/28",
    "1234",
    "John Doe",
    "INSUFFICIENT_FUNDS",
    "370000000000028",
    "11/28",
    "1234",
    "John Doe",
    "DECLINED_BY_BANK",
    "370000000000036",
    "11/28",
    "1234",
    "John Doe",
    "DO_NOT_HONOR",
    "370000000000044",
    "11/28",
    "1234",
    "John Doe",
    "INVALID_SECURITY_CODE",
    "370000000000051",
    "11/28",
    "1234",
    "John Doe",
    "INVALID_CARD_DATA",
    "370000000000069",
    "11/28",
    "1234",
    "John Doe",
    "REPORTED_STOLEN",
    "370000000000077",
    "11/28",
    "1234",
    "John Doe",
    "ERROR",
    "Diners",
    "Number",
    "Expiration Date",
    "Security Code",
    "Cardholder Name",
    "Transaction Response Code",
    "3647166000000002",
    "11/28",
    "123",
    "John Doe",
    "SUCCEEDED",
    "3647166000000010",
    "11/28",
    "123",
    "John Doe",
    "INSUFFICIENT_FUNDS",
    "3647166000000028",
    "11/28",
    "123",
    "John Doe",
    "DECLINED_BY_BANK",
    "3647166000000036",
    "11/28",
    "123",
    "John Doe",
    "DO_NOT_HONOR",
    "3647166000000044",
    "11/28",
    "123",
    "John Doe",
    "INVALID_SECURITY_CODE",
    "3647166000000051",
    "11/28",
    "123",
    "John Doe",
    "INVALID_CARD_DATA",
    "3647166000000069",
    "11/28",
    "123",
    "John Doe",
    "REPORTED_STOLEN",
    "3647166000000077",
    "11/28",
    "123",
    "John Doe",
    "ERROR",
    "UATP",
    "Number",
    "Expiration Date",
    "Security Code",
    "Cardholder Name",
    "Transaction Response Code",
    "1139000000000002",
    "11/28",
    "123",
    "John Doe",
    "SUCCEEDED",
    "1139000000000010",
    "11/28",
    "123",
    "John Doe",
    "INSUFFICIENT_FUNDS",
    "1139000000000028",
    "11/28",
    "123",
    "John Doe",
    "DECLINED_BY_BANK",
    "1139000000000036",
    "11/28",
    "123",
    "John Doe",
    "DO_NOT_HONOR",
    "1139000000000044",
    "11/28",
    "123",
    "John Doe",
    "INVALID_SECURITY_CODE",
    "1139000000000051",
    "11/28",
    "123",
    "John Doe",
    "INVALID_CARD_DATA",
    "1139000000000069",
    "11/28",
    "123",
    "John Doe",
    "REPORTED_STOLEN",
    "1139000000000077",
    "11/28",
    "123",
    "John Doe",
    "ERROR",
    "5. Check the payment status",
    "After performing the request to the",
    "Create Payment",
    ", you can check the payment status by analyzing the",
    "status",
    "and",
    "sub_status",
    "from the response. Check the",
    "Payment Status",
    "page to see all the options you can receive in response to the payment creation request.",
    "Depending on the processor and payment method, the status may take some time to update. Therefore, you may need to use endpoints to recover the payment status. To perform this task, you can use the",
    "Retrieve Payment by ID",
    "or",
    "Retrieve Payment by merchant_order_id",
    "endpoints. Another option is to use webhooks to receive notifications after each event. Yuno recommends you use webhooks to monitor asynchronous payments better. Check the",
    "Webhooks",
    "guide to learn how to configure the webhooks solution provided by Yuno."
  ],
  "https://docs.y.uno/docs/worldpay-acquirer": [
    "Worldpay",
    "Suggest Edits",
    "Worldpay provides digital experiences to your customers, which can count on an ecosystem of payment solutions to help in the digital age.",
    "Overview Guide",
    "Connection page",
    "Worldpay website",
    "Services and compatibility",
    "Provider ID:",
    "WORLDPAY",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Albania",
    "Åland Islands",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Brazil",
    "British Indian Ocean Territory",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cabo Verde",
    "Cameroon",
    "Canada",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos Islands",
    "Colombia",
    "Comoros",
    "Cook Islands",
    "Costa Rica",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Djibouti",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Estonia",
    "Ethiopia",
    "Falkland Islands",
    "Faroe Islands",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Holy See",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Ireland",
    "Isle",
    "Israel",
    "Italy",
    "Jamaica",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Kyrgyzstan",
    "Laos",
    "Latvia",
    "Lesotho",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Réunion",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Solomon Islands",
    "South Africa",
    "Spain",
    "Sri Lanka",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, AUD, BRL, CAD, CHF, CLP, CNY, COP, CZK, DKK, EUR, GBP, HKD, HUF, IDR, ISK, JPY, KES, KRW, MXN, MYR,\n            NOK, NZD, PHP, PLN, SEK, SGD, THB, TWD, USD, VND, ZAR",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/fraud-solutions": [
    "Fraud Solutions",
    "Suggest Edits",
    "Here, you find the complete list of fraud solutions connections available on Yuno. Select the desired fraud solutions to access their respective information.",
    "ClearSale",
    "CyberSource",
    "Signifyd",
    "Riskified"
  ],
  "https://docs.y.uno/docs/clearsale": [
    "ClearSale",
    "Suggest Edits",
    "With over 20 years of experience as one of the world's largest card fraud prevention operations, ClearSale has invested in building the best fraud prevention equipment and processes worldwide. With ClearSale, you fight fraud, sell more and create better customer experiences.",
    "General information",
    "Connection page",
    ":",
    "ClearSale webpage",
    "Countries",
    ":",
    "Afghanistan",
    "Albania",
    "Åland Islands",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Brazil",
    "British Indian Ocean Territory",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cabo Verde",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos Islands",
    "Colombia",
    "Comoros",
    "Congo",
    "Congo Democratic Republic",
    "Cook Islands",
    "Costa Rica",
    "Côte d'Ivoire",
    "Croatia",
    "Cuba",
    "Curacao (Netherlands Antilles)",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Eritrea",
    "Estonia",
    "Ethiopia",
    "Falkland Islands (Malvinas)",
    "Faroe Islands",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard and McDonald Islands",
    "Holy See (Vatican City)",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Ireland",
    "Isle",
    "Israel",
    "Italy",
    "Jamaica",
    "Japan",
    "Jersey",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea, Democratic People's Republic",
    "Korea Republic",
    "Kosovo",
    "Kuwait",
    "Kyrgyzstan",
    "Laos",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Libya",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestinian Territory",
    "Panama",
    "Papua New Guinea",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Réunion",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Saint Barthélemy",
    "Saint Helena Ascension and Tristan da Cunha",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Solomon Islands",
    "South Africa",
    "South Georgia",
    "South Sudan",
    "Spain",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard and Jan Mayen",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Syrian",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Trinidad and Tobago",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe",
    "Capabilities",
    ":",
    "Pre-authorization",
    "Payment methods",
    ":",
    "Cards",
    "Webhooks",
    ":",
    "Yes",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "document_number",
    "IP",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "Integration configuration",
    "Configuration of webhooks in partner",
    ":",
    "For each merchant, they can send the endpoint to integration@clear.sale to do the setup on our side.",
    "Obtainment of credentials",
    ":",
    "Email your TAM and get your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "ClearSale",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Application API Key",
    ",",
    "Application Client ID",
    ", and",
    "Application Client Secret",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/cybersource": [
    "CyberSource",
    "Suggest Edits",
    "Global payment solutions to help your business accept payments across channels and geographies using a digital-first approach.",
    "General information",
    "Connection page",
    ":",
    "CyberSource webpage",
    "Countries",
    ":",
    "More than 160 countries.",
    "Capabilities",
    ":",
    "Pre-authorization",
    "Payment methods",
    ":",
    "Cards",
    "Webhooks",
    ":",
    "Yes",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "document_number",
    "IP",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "Integration configuration",
    "Configuration of webhooks in partner",
    ":",
    "Using the /notification-subscriptions/v2/webhooks endpoint, you can subscribe to notifications for a variety of events.",
    "Obtainment of credentials",
    ":",
    "Email your TAM and get your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "CyberSource",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Organization ID",
    ",",
    "Secret",
    ", and",
    "Shared Secret",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/signifyd": [
    "Signifyd",
    "Suggest Edits",
    "Signifyd uses machine learning to detect e-commerce fraud using hundreds of data points, elastic linking, and behavior data.",
    "General information",
    "Connection page",
    ":",
    "Signifyd webpage",
    "Countries",
    ":",
    "More than 100 countries.",
    "Capabilities",
    ":",
    "Pre-authorization",
    "Payment methods",
    ":",
    "Cards",
    "Webhooks",
    ":",
    "Yes",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "items.name, items.quantity, items.unit_price.",
    "Integration configuration",
    "Configuration of webhooks in partner",
    ":",
    "Open the",
    "Developer Tools",
    "and navigate to",
    "Teams",
    ".",
    "Locate the specific team you wish to set up webhooks for.",
    "Choose",
    "Settings",
    "and then select",
    "Webhooks",
    ".",
    "Provide the Webhook Address and choose the event type as",
    "Guarantees/Reviewed",
    ".",
    "Click",
    "Add",
    "to finalize the configuration.",
    "Obtainment of credentials",
    ":",
    "Access the",
    "Developer Tools",
    "and log in to your account..",
    "Navigate to the",
    "Teams",
    "page.",
    "Locate the API Key for each team.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "CyberSource",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Organization ID",
    ",",
    "Secret",
    ", and",
    "Shared Secret",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/riskified": [
    "Riskified",
    "Suggest Edits",
    "Fights fraud, sell more and create better customer experiences with this solution.",
    "General information",
    "Connection page",
    ":",
    "Riskified webpage",
    "Countries",
    ":",
    "Global",
    "Capabilities",
    ":",
    "Pre-authorization",
    "Payment methods",
    ":",
    "Cards",
    "Webhooks",
    ":",
    "Yes",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email, IP, items.name, items.quantity, items.unit_price, items.unit_amount, items.category, first_name, last_name, document.number, document.type, billing_address.address_line_1, country, city, zip_code, state",
    "Integration configuration",
    "Configuration of webhooks in partner",
    ":",
    "Log in to",
    "Riskified Dashboard",
    ".",
    "Specify the endpoint in your account settings.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Riskified",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Shop URL",
    "and",
    "Auth Token",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/processors": [
    "Processors",
    "Suggest Edits",
    "Here you find the complete list of processor connections available on Yuno. Select the desired processor to access information such as their coverage and supported payment types and currencies.",
    "aCuotaz",
    "Addi",
    "Adyen",
    "Arcus",
    "BBVA Openpay",
    "Bradesco",
    "Braintree",
    "Credix",
    "DaviPlata",
    "dLocal",
    "Ebanx",
    "Kushki",
    "Mercado Pago",
    "NuPay",
    "Nuvei",
    "Paymentez",
    "PayPal",
    "PayU",
    "Payvalida",
    "Payzen",
    "Place to Pay",
    "SafetyPay",
    "STP",
    "Stripe",
    "T1Pagos",
    "Transfeera",
    "Unlimint",
    "Wibond",
    "Wompi",
    "Worldline",
    "Worldpay"
  ],
  "https://docs.y.uno/docs/acuotaz": [
    "aCuotaz",
    "Suggest Edits",
    "With aCuotaz, you can receive online payments as installment plans without needing a credit card. It is a BNPL payment method, and the payments are made through Mercado Pago.",
    "Overview Guide",
    "Connection page",
    "aCuotaz website",
    "Services and compatibility",
    "Provider ID:",
    "ACUOTAZ",
    "Supported payment types:",
    "BNPL →",
    "Available countries",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "PEN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/addi": [
    "Addi",
    "Suggest Edits",
    "Addi is a technology company that seeks to promote and enable digital commerce in Latin America. The organization offers users Buy Now, Pay Later as installment plans at the checkout with a clear schedule of payments.",
    "Overview Guide",
    "Connection page",
    "Addi website",
    "Services and compatibility",
    "Provider ID:",
    "ADDI",
    "Supported payment types:",
    "BNPL →",
    "Available countries",
    "Colombia",
    "Currency acceptance",
    "Supported currencies:",
    "BRL, COP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/adyen-processor": [
    "Adyen",
    "Suggest Edits",
    "Adyen provides merchants with online services to accept electronic payments by payment methods, including credit cards, bank payments such as debit cards, wire transfers, and real-time bank transfers based on online banking. Accepts online payments on any device or channel, whatever your business model, so you can give customers the experiences they expect.",
    "Overview Guide",
    "Connection page",
    "Adyen website",
    "Services and compatibility",
    "Provider ID:",
    "ADYEN",
    "Supported payment types:",
    "PIX →",
    "Cards →",
    "Available countries",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Gibraltar",
    "Greece",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "Ireland",
    "Italy",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Mexico",
    "Monaco",
    "Netherlands",
    "Denmark",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Currency acceptance",
    "Supported currencies:",
    "EUR, AUD, BGN, BRL, CHF, CZK, DKK, GBP, GIP, HKD, HUF, ISK, CHF, MXN, NOK, PLN, RON, SEK, SGD, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/arcus": [
    "Arcus",
    "Suggest Edits",
    "Arcus provides a pay network solution for those wanting to pay on behalf of your users or get paid. It brings together payers and payees, allowing different payment use cases for electronic platforms, connecting banks, fintech, and merchants. Arcus also supports the Interbank Electronic Payment System (SPEI).",
    "Overview guide",
    "Connection page",
    "Arcus website",
    "Services and compatibility",
    "Supported payment types:",
    "Cash →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bradesco": [
    "Bradesco",
    "Suggest Edits",
    "Simple, secure payment with immediate approval for Bradesco customers to purchase online. Offers to pay through Pix, the most beloved instant payment in Brazil.",
    "Overview Guide",
    "Connection page",
    "Bradesco website",
    "Services and compatibility",
    "Provider ID:",
    "BRADESCO",
    "Supported payment types:",
    "PIX →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/braintree": [
    "Braintree",
    "Suggest Edits",
    "Overview Guide",
    "Connection page",
    "Braintree website",
    "Services and compatibility",
    "Provider ID:",
    "BRAINTREE",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Andorra",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Canada",
    "China",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Greece",
    "Guernsey",
    "Hong Kong SAR",
    "Hungary",
    "Iceland",
    "Ireland",
    "Isle of Man",
    "Italy",
    "Jersey",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malaysia",
    "Malta",
    "Monaco",
    "Netherlands",
    "New Zealand",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "San Marino",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Currency acceptance",
    "Supported currencies:",
    "AED, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BIF, BMD, BND, BOB, BRL, BSD, BWP, BYN, BZD, CAD, CHF, CLP, CNY, COP, CRC, CVE, CZK, DJF, DKK, DOP, DZD, EEK, EGP, ETB, EUR, FJD, FKP, GBP, GEL, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, ISK, JMD, JOY, KES, KGS, KHR, KYD, KMF, KRW, KZT, LAK, LBP, LKR, LRD, LSL, LTL, LVL, MAD, MDL, MKD, MNT, MOP, MUR, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RDS, RUB, RWF, SAR, SBD, SCR, SEK, SGD, SHP, SLL, SOS, SRD, STD, SVC, SZL, THB, TJS, TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, UYU, UZS, VEF, VND, VUV, WST, XAF, XCD, XOF, XPF, YER, ZAR, ZMK, ZWD.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bbva-openpay-processor": [
    "BBVA Openpay",
    "Suggest Edits",
    "Overview Guide",
    "Connection page",
    "Openpay website",
    "Services and compatibility",
    "Provider ID:",
    "OPENPAY",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/credix": [
    "Credix",
    "Suggest Edits",
    "Credix specializes in offering financing products that enable customers to purchase goods and services through installment payments, making them more accessible.",
    "Overview Guide",
    "Connection page",
    "Credix website",
    "Services and compatibility",
    "Provider ID:",
    "CREDIX",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Costa Rica",
    "Currency acceptance",
    "Supported currencies:",
    "CRC, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/daviplata": [
    "DaviPlata",
    "Suggest Edits",
    "Daviplata, powered by Davivienda, is a virtual platform responsible for saving, providing support for payments, and allowing you to buy and sell all kinds of money you need through its application that is available for smartphones.",
    "Overview Guide",
    "Connection page",
    "DaviPlata website",
    "Services and compatibility",
    "Provider ID:",
    "DAVIPLATA",
    "Supported payment types:",
    "BankTransfer →",
    "Available countries",
    "Colombia",
    "Currency acceptance",
    "Supported currencies:",
    "COP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal": [
    "dLocal",
    "Suggest Edits",
    "dLocal powers local payments connecting merchants with emerging market consumers through one API. dLocal focuses on connecting merchants, from 37 markets, with local cards and APMS.",
    "Overview guide",
    "Connection page",
    "dLocal website",
    "Services and compatibility",
    "Provider ID:",
    "DLOCAL",
    "Supported payment types:",
    "Cards →",
    "Checkout Redirect →",
    "CODI →",
    "Efecty →",
    "Khipu →",
    "OXXO →",
    "Pago Efectivo →",
    "PSE →",
    "SPEI →",
    "Tarjeta Clave →",
    "Available countries",
    "Argentina",
    "Bangladesh",
    "Bolivia",
    "Brazil",
    "Cameroon",
    "Chile",
    "China",
    "Colombia",
    "Costa Rica",
    "Dominican Republic",
    "Ecuador",
    "El Salvador",
    "Ghana",
    "Guatemala",
    "Honduras",
    "India",
    "Indonesia",
    "Ivory Coast",
    "Japan",
    "Kenya",
    "Malaysia",
    "Mexico",
    "Morocco",
    "Nicaragua",
    "Nigeria",
    "Pakistan",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Rwanda",
    "Senegal",
    "South Africa",
    "Tanzania",
    "Thailand",
    "Turkey",
    "Uganda",
    "Uruguay",
    "Vietnam",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, BOB, BRL, CLP, COP, CRC, DOP, USD, GTQ, HNL, MXN, NIO, PYG, PEN, UYU, BDT, XAF, CNY, EGP, GHS, INR,\n            IDR, X0F, YEN, KES, MYR, MAD, NGN, PKR, PHP, RWF, ZAR, TZS, THB, TRY, UGX, VND",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/ebanx": [
    "Ebanx",
    "Suggest Edits",
    "EBANX is a fintech global that offers end-to-end payment solutions throughout the transaction process within e-commerce. It provides a wide range of local payments and operates primarily in Latin America.",
    "Overview Guide",
    "Connection page",
    "Ebanx website",
    "Services and compatibility",
    "Provider ID:",
    "EBANX",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Argentina",
    "Brazil",
    "Colombia",
    "Chile",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Mexico",
    "Panama",
    "Paraguay",
    "Peru",
    "Uruguay",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, BRL, COP, CLP, CRC, USD, GTQ, MXN, PYG, PEN, UYU",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/kushki": [
    "Kushki",
    "Suggest Edits",
    "Allows credit and debit card payments in Latin America.",
    "Overview Guide",
    "Connection page",
    "Kushki website",
    "Services and compatibility",
    "Provider ID:",
    "KUSHKI",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Chile",
    "Colombia",
    "Ecuador",
    "Mexico",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "CLP, COP, USD, MXN, PEN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/mercado-pago": [
    "Mercado Pago",
    "Suggest Edits",
    "Mercado Pago is the Mercado Libre payment platform for online sales. It is a digital wallet and a platform that works as a payment intermediary between merchants and buyers, credit card brands, and banks.",
    "Overview Guide",
    "Connection page",
    "Mercado Pago website",
    "Services and compatibility",
    "Provider ID:",
    "MERCADO_PAGO",
    "Supported payment types:",
    "Mercado Pago API →",
    "Mercado Pago Checkout Pro →",
    "Mercado Pago Wallet Connect →",
    "Mercado Pago PSE →",
    "Available countries",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Mexico",
    "Peru",
    "Uruguay",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, BRL, CLP, COP, MXN, PEN, UYU",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nupay": [
    "NuPay",
    "Suggest Edits",
    "Simple, secure payment with immediate approval for Nubank customers to purchase online. Offers to pay through Pix, the most beloved instant payment in Brazil and NuPay, a cardless credit product.",
    "Overview Guide",
    "Connection page",
    "NuPay website",
    "Services and compatibility",
    "Provider ID:",
    "SPINPAY",
    "Supported payment types:",
    "PIX →",
    "Nupay Wallet →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nuvei": [
    "Nuvei",
    "Suggest Edits",
    "Nuvei is a global payment platform designed to accelerate businesses with a modular and scalable technology to offer all payment methods to succeed locally and globally.",
    "Overview Guide",
    "Connection page",
    "Nuvei website",
    "Services and compatibility",
    "Provider ID:",
    "NUVEI",
    "Supported payment types:",
    "OXXO →",
    "SPEI →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez": [
    "Paymentez",
    "Suggest Edits",
    "Paymentez provides a range of payment solutions for merchants and financial institutions, including gateway, white label, card acquisition and prepaid card options. Paymentez supports high-growth e-commerce verticals, including online gaming, delivery platforms, mobility, transportation, sports, and other segments across Latin America.",
    "Overview Guide",
    "Connection page",
    "Paymentez website (Nuvei company)",
    "Services and compatibility",
    "Provider ID:",
    "PAYMENTEZ",
    "Supported payment types:",
    "Cards →",
    "Daviplata →",
    "LinkToPay →",
    "Nequi →",
    "PayCash →",
    "PSE →",
    "Sencillito →",
    "WebPay →",
    "Available countries",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Nicaragua",
    "Panama",
    "Peru",
    "Uruguay",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, BRL, CLP, COP, CRC, USD, GTQ, HNL, MXN, NIO, PEN, UYU.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paypal": [
    "PayPal",
    "Suggest Edits",
    "PayPal is an online payment platform that facilitates payments between individuals and businesses. With PayPal, your customers can make online payments to you almost anywhere in the world.",
    "Overview Guide",
    "Connection page",
    "PayPal website",
    "Services and compatibility",
    "Provider ID:",
    "PAYPAL",
    "Supported payment types:",
    "Smart Button →",
    "Available countries",
    "Available in over",
    "200\n                countries",
    "Currency acceptance",
    "Supported currencies:",
    "AUD, BRL, CAD, CNY, CZK, DKK, EUR, HKD, HUF, ILS, JPY, MYR, MXN, TWD, NZD, NOK, PHP, PLN, GBP, RUB, SGD,\n            SEK, CHF, THB, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payu": [
    "PayU",
    "Suggest Edits",
    "PayU allows online businesses to accept and process payments through payment methods that can be integrated with web and mobile applications. Using PayU through Yuno, you can receive online payments with credit, debit, and prepaid cards.",
    "Overview Guide",
    "Connection page",
    "PayU website",
    "Services and compatibility",
    "Provider ID:",
    "PAYU",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Argentina",
    "Brazil",
    "Chile",
    "Costa Rica",
    "Colombia",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Panama",
    "Peru",
    "South Africa",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, BRL, CRC, CLP, COP, GTQ, HNL, MXN, NIO, PAB, PEN, USD, ZAR",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payvalida": [
    "Payvalida",
    "Suggest Edits",
    "Reaches fast and secure payments in LATAM.",
    "Overview Guide",
    "Connection page",
    "Payvalida website",
    "Services and compatibility",
    "Provider ID:",
    "PAYVALIDA",
    "Supported payment types:",
    "Payment Link→",
    "Available countries",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "Guatemala",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "COP, CRC, USD, GTQ, PEN",
    "Payvalida does not accept decimals",
    "The Payvalida system does not support decimals. Therefore, you should not use decimals when defining the payment",
    "amount",
    ". Otherwise, your payment may fail.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payzen": [
    "Payzen",
    "Suggest Edits",
    "Payzen allows online businesses to accept and process payments through payment methods that can be integrated with web and mobile applications.",
    "Overview Guide",
    "Connection page",
    "Payzen website",
    "Services and compatibility",
    "Provider ID:",
    "PAYZEN",
    "Supported payment types:",
    "PSE →",
    "Available countries",
    "Colombia",
    "Currency acceptance",
    "Supported currencies:",
    "COP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/place-to-pay": [
    "Place to Pay",
    "Suggest Edits",
    "Place to Pay is a solution to accompany your digital transaction processes in different channels, with the highest security and functionalities that adapt to the needs of your business.",
    "Overview Guide",
    "Connection page",
    "PlaceToPay website",
    "Services and compatibility",
    "Provider ID:",
    "PLACE_TO_PAY",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Belize",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "Honduras",
    "Mexico",
    "Panamá",
    "Peru",
    "Puerto Rico",
    "Uruguay",
    "Currency acceptance",
    "Supported currencies:",
    "BZD, CLP, COP, CRC, HNL, MXN, PEN, USD, UYU",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/safetypay": [
    "SafetyPay",
    "Suggest Edits",
    "Enables online cash payments, bank transfers, and cross-border transactions for a global market of consumers.",
    "Overview Guide",
    "Connection page",
    "SafetyPay website",
    "Services and compatibility",
    "Provider ID:",
    "SAFETYPAY",
    "Supported payment types:",
    "Payment Link→",
    "Available countries",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "El Salvador",
    "Guatemala",
    "Mexico",
    "Panama",
    "Peru",
    "Currency acceptance",
    "Supported currencies:",
    "BRL, CLP, COP, CRC, USD, GTQ, MXN, PEN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stp": [
    "STP",
    "Suggest Edits",
    "STP is a Mexican fintech that has been leading the transformation of digital payments since 2008, focusing on giving flexibility and speed in payment solutions.",
    "Overview Guide",
    "Connection page",
    "STP website",
    "Services and compatibility",
    "Provider ID:",
    "STP",
    "Supported payment types:",
    "SPEI →",
    "CoDi →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stripe": [
    "Stripe",
    "Suggest Edits",
    "Stripe enables individuals and businesses to receive payments over the Internet. Provides the technical, fraud prevention, and banking infrastructure necessary to operate online payment systems.",
    "Overview Guide",
    "Connection page",
    "Stripe website",
    "Services and compatibility",
    "Provider ID:",
    "STRIPE",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Canada",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Finland",
    "France",
    "Germany",
    "Gibraltar",
    "Greece",
    "Hong Kong",
    "Hungary",
    "India",
    "Indonesia",
    "Ireland",
    "Italy",
    "Japan",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malaysia",
    "Malta",
    "Mexico",
    "Netherlands",
    "New Zealand",
    "Norway",
    "Philippines",
    "Poland",
    "Portugal",
    "Romania",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "Thailand",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Currency acceptance",
    "Supported currencies:",
    "USD, AED, AFN*, ALL, AMD, ANG, AOA*, ARS*, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BIF, BMD, BND, BOB*,\n            BRL*, BSD, BWP BYN, BZD, CAD, CDF, CHF, CLP*, CNY, COP*, CRC*, CVE*, CZK, DJF*, DKK, DOP, DZD, EGP,\n            ETB, EUR, FJD, FKP*, GBP, GEL, GIP, GMD, GNF*, GTQ*, GYD, HKD, HNL*, HTG, HUF, IDR, ILS, INR, ISK,\n            JMD, JPY, KES, KGS, KHR, KMF, KRW, KYD, KZT, LAK*, LBP, LKR, LRD, LSL, MAD, MDL, MGA, MKD, MMK, MNT,\n            MOP, MRO, MUR*, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO*, NOK, NPR, NZD, PAB*, PEN* ,PGK, PHP, PKR, PLN,\n            PYG*, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SEK, SGD, SHP*, SLE, SLL, SOS, SRD*, STD*, SZL, THB, TJS,\n            TOP, TRY, TTD, TWD, TZS, UAH, UGX, UYU*, UZS, VND, VUV, WST, XAF, XCD, XOF*, XPF*, YER, ZAR, ZMW",
    "Note: American Express doesn't accept the currencies marked with *",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/t1pagos": [
    "T1Pagos",
    "Suggest Edits",
    "T1Pagos provides a payment gateway to make it easier for you to accept card payments and increase your approvement rate. With T1Pagos you can accept credit and debit card payments in Mexico.",
    "Overview Guide",
    "Connection page",
    "T1Pagos website",
    "Services and compatibility",
    "Provider ID:",
    "T1_PAGOS",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Mexico",
    "Currency acceptance",
    "Supported currencies:",
    "MXN",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transfeera": [
    "Transfeera",
    "Suggest Edits",
    "Simple, secure payment with immediate approval for Transfeera customers to purchase online. Offers to pay through Pix, the most beloved instant payment in Brazil.",
    "Overview Guide",
    "Connection page",
    "Transfeera website",
    "Services and compatibility",
    "Provider ID:",
    "TRANSFEERA",
    "Supported payment types:",
    "PIX →",
    "Available countries",
    "Brazil",
    "Currency acceptance",
    "Supported currencies:",
    "BRL",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/unlimint": [
    "Unlimint",
    "Suggest Edits",
    "Unlimint is a financial technology company specializing in developing digital payment solutions. Unlimint not only provides card processing for all card schemes, but it also offers thousands of alternative payment methods locally and globally.",
    "Overview Guide",
    "Connection page",
    "Unlimint website",
    "Services and compatibility",
    "Provider ID:",
    "UNLIMINT",
    "Supported payment types:",
    "Cards →",
    "Checkout →",
    "Available countries",
    "Available globally. However, restrictions may apply to high risk countries.",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, COP, MXN, PEN, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wibond": [
    "Wibond",
    "Suggest Edits",
    "Wibond provides financial inclusion to a large community, offering payment options according to the possibilities and profile of each user.",
    "Overview Guide",
    "Connection page",
    "Wibond website",
    "Services and compatibility",
    "Provider ID:",
    "WIBOND",
    "Supported payment types:",
    "BNPL →",
    "Available countries",
    "Argentina",
    "Chile",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, CLP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi": [
    "Wompi",
    "Suggest Edits",
    "Wompi provides payment gateway services to individuals, small and large companies so that they can offer their customers a wide payment alternative for the sale of their products. With Wompi, you can easily create and customize payment links through Short Links or QR Codes and share them with your customers through social networks, email, chat, etc.",
    "Overview Guide",
    "Connection page",
    "Wompi website",
    "Services and compatibility",
    "Provider ID:",
    "WOMPI",
    "Supported payment types:",
    "Bancolombia →",
    "Nequi →",
    "PSE →",
    "TokenBox →",
    "Cards →",
    "Available countries",
    "Colombia",
    "Panama",
    "Currency acceptance",
    "Supported currencies:",
    "COP, USD",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/worldline": [
    "Worldline",
    "Suggest Edits",
    "Worldline is a Payments technology company’s purpose is to design and operate digital payment and transactional solutions that enable sustainable economic growth and reinforce trust and security to users.",
    "Overview Guide",
    "Connection page",
    "Worldline website",
    "Services and compatibility",
    "Provider ID:",
    "WORLDLINE",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Available in",
    "243 countries",
    "Currency acceptance",
    "Supported currencies:",
    "Over 150 currencies",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/worldpay-processor": [
    "Worldpay",
    "Suggest Edits",
    "Worldpay provides digital experiences to your customers, which can count on an ecosystem of payment solutions to help in the digital age.",
    "Overview Guide",
    "Connection page",
    "Worldpay website",
    "Services and compatibility",
    "Provider ID:",
    "WORLDPAY",
    "Supported payment types:",
    "Cards →",
    "Available countries",
    "Albania",
    "Åland Islands",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Brazil",
    "British Indian Ocean Territory",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cabo Verde",
    "Cameroon",
    "Canada",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos Islands",
    "Colombia",
    "Comoros",
    "Cook Islands",
    "Costa Rica",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Djibouti",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Estonia",
    "Ethiopia",
    "Falkland Islands",
    "Faroe Islands",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Holy See",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Ireland",
    "Isle",
    "Israel",
    "Italy",
    "Jamaica",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Kyrgyzstan",
    "Laos",
    "Latvia",
    "Lesotho",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Réunion",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Solomon Islands",
    "South Africa",
    "Spain",
    "Sri Lanka",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Currency acceptance",
    "Supported currencies:",
    "ARS, AUD, BRL, CAD, CHF, CLP, CNY, COP, CZK, DKK, EUR, GBP, HKD, HUF, IDR, ISK, JPY, KES, KRW, MXN, MYR,\n            NOK, NZD, PHP, PLN, SEK, SGD, THB, TWD, USD, VND, ZAR",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payment-methods-by-processor": [
    "Payment Methods",
    "Suggest Edits",
    "Yuno supports dozens of payment methods and processors. In the following section you will find all the information regarding which payment methods are available for each processor and region, its capabilities and general information to help you through your integration process.",
    "aCuotaz",
    "BNPL",
    "Addi",
    "BNPL",
    "Adyen",
    "PIX",
    "Cards",
    "Arcus",
    "Cash",
    "BAC",
    "Cards",
    "BBVA Openpay",
    "Cards",
    "Bradesco",
    "PIX",
    "Braintree",
    "Cards",
    "Cielo",
    "Cards",
    "credix",
    "Cards",
    "DaviPlata",
    "Bank Transfer",
    "dLocal",
    "Cards",
    "Checkout Redirect",
    "CODI",
    "Efecty",
    "Khipu",
    "OXXO",
    "Pago Efectivo",
    "PSE",
    "SPEI",
    "Tarjeta Clave",
    "Ebanx",
    "Cards",
    "FAC",
    "Cards",
    "Getnet",
    "Cards",
    "PIX",
    "Klap",
    "Cards",
    "Kushki",
    "Cards",
    "Mercado Pago",
    "API",
    "Checkout Pro",
    "PSE",
    "Wallet Connect",
    "Nupay",
    "PIX",
    "Wallet",
    "Nuvei",
    "OXXO",
    "SPEI",
    "Paymentez",
    "Cards",
    "Daviplata",
    "LinkToPay",
    "Nequi",
    "Paycash",
    "PSE",
    "Sencillito",
    "Webpay",
    "PayPal",
    "Smart Button",
    "PayU",
    "Cards",
    "Payvalida",
    "Payment Link",
    "Payzen",
    "PSE",
    "Place to Pay",
    "Cards",
    "Rede",
    "Cards",
    "SafetyPay",
    "Payment Link",
    "Stone",
    "Cards",
    "STP",
    "SPEI",
    "CoDi",
    "Stripe",
    "Cards",
    "T1Pagos",
    "Cards",
    "Transbank",
    "Cards",
    "Webpay",
    "Transbank Mall",
    "Cards",
    "Webpay",
    "Transfeera",
    "PIX",
    "Unlimint",
    "Cards",
    "Checkout",
    "Wibond",
    "BNPL",
    "Wompi",
    "Bancolombia",
    "Cards",
    "Nequi",
    "PSE",
    "TokenBox",
    "Worldpay",
    "Cards",
    "Worldline",
    "Cards"
  ],
  "https://docs.y.uno/docs/acuotaz-bnpl": [
    "aCuotaz - BNPL",
    "Suggest Edits",
    "This page presents all information about the aCuotaz connection using Buy Now, Pay Later as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Cancellation",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Peru",
    "Currencies",
    ":",
    "PEN",
    "Minimum amount",
    ":",
    "S/ 100",
    "Maximum amount",
    ":",
    "S/ 5,000",
    "*Subject to credit performance.",
    "TRX Limit",
    ":",
    "1 transaction simultaneously per user.",
    "Purchase TRX",
    ":",
    "aCuotaz pays the merchant the full amount in advance.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Cancellation",
    "Cancelation support",
    ":",
    "Yes",
    "Installments",
    "Note",
    ":",
    "Refering to the installments the shopper pays to aCuotaz.",
    "Capability to define the installments when creating the payment",
    ":",
    "No, you will POST all the information required to create the order, then you will receive a URL to redirect your customer to aCuotaz where he will select the number of installments for his loan.",
    "Minimum number of installments (#months)",
    ":",
    "2 (biweekly).",
    "Maximum number of installments (#months)",
    ":",
    "8 (biweekly).",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Security",
    "Address verification service",
    ":",
    "Payments are made through Mercado Pago.",
    "Support for 0Auth",
    ":",
    "Payments are made through Mercado Pago.",
    "E3DS v2",
    ":",
    "Payments are made through Mercado Pago.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Test Client ID and a Secret Token.",
    "Test cards/bank transfer",
    ":",
    "Testing credit card payment",
    ":",
    "Plain name",
    "Any name",
    "Card no",
    "4111 1111 1111 1111",
    "Expiration date",
    "04/2023",
    "CVV",
    "123",
    "Address",
    "Any address",
    "Testing bank transfer payment",
    ":",
    "Plain image",
    "Any image",
    "Bank",
    "Any bank",
    "Operation number",
    "1234567",
    "Payment amount",
    "Amount",
    "Payment date",
    "Today",
    "Payment type",
    "Pago couta completa",
    "*It only works in test ecommerces.",
    "Limitations/ Specifications for testing",
    ":",
    "Testing DNIs",
    "(Peruvian ID):",
    "P14159265",
    "It is always approved (pi decimals)",
    "71828182",
    "It is always rejected (e decimals)",
    "61803398",
    "It is always cannot be evaluated (phi decimals)",
    "CVV",
    "123",
    "Address",
    "Any address",
    "Testing email and phone tokens",
    ":",
    "Phone",
    "ABCDEF",
    "E-mail",
    "1234",
    "*All objects created using test credentials will be removed the next day at 5:00 a.m. PET.",
    "Testing steps",
    "In order to test making a payment using Acuotaz, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "The Create Payment response provides a redirect URL (transactions.provider_data.raw_response.redirect_to), so the user can complete the payment in the Acuotaz platform. The Acuotaz service provides the option to  the user select the payment installments before completing the payment, as shown in the following image:",
    "For testing a Payment in Acuotaz, there are two approaches you can use: testing credit card payment or testing bank transfer payment.",
    "Testing credit card payment",
    "If you need to make a payment with the test credentials for the card, you can use the following info:",
    "Info",
    "Data",
    "Name",
    "Any name",
    "Card no",
    "4111 1111 1111 1111",
    "Expiration date",
    "04/2023",
    "CVV",
    "123",
    "Address",
    "Any address",
    "Testing bank transfer payment",
    "If you need to make a payment by bank transfer, you can use the following info:",
    "Info",
    "Data",
    "Image",
    "Any image",
    "Bank",
    "Any bank",
    "Operation number",
    "1234567",
    "Payment Amount",
    "Amount",
    "Payment Date",
    "Today",
    "Payment Type",
    "Full installment payment",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Credentials are obtained by requesting them to the aCuotaz team, email your aCuotaz TAM.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "aCoutaz",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Client ID",
    "and",
    "Secret Token",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "You can choose the URL you want, but you must communicate it to the aCuotaz team. Your webhook’s URL must follow this format:",
    "http://yourecommerce.com/api/v1/webhooks/acuotaz/",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, the onboarding is made by scale and category. There is an implementation process that includes cross marketing.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/addi-bnpl": [
    "Addi - BNPL",
    "Suggest Edits",
    "This page presents all information about the Addi connection using Buy Now, and Pay Later as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Cancellation",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document_type",
    "telephone_number",
    "telephone_country_code",
    "country (transaction)",
    "General Information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "Colombia",
    ":",
    "$50.000",
    "*Generally, limits depend on the negotiation with the merchants.",
    "Maximum amount",
    ":",
    "Colombia",
    ":",
    "$20.000.000",
    "*Generally, limits depend on the negotiation with the merchants.",
    "TRX Limit",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Addi pays the merchant the full amount in advance.",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Cancelation",
    "Cancelation support",
    ":",
    "To cancel a purchase the shopper must contact the merchant directly. If the merchant approves the cancellation they must download a cancellation format and send it to cancelaciones@addi.com. If the e-mail is sent before 4PM, the cancelation will be processed that same day and the purchase will be cancelled the next day at 7AM.",
    "Installments",
    "Note",
    ":",
    "Refering to the installments the shopper pays to Addi.",
    "Capability to define the installments when creating the payment",
    ":",
    "No, the merchant sends the application for the credit to Addi using the authentication token and Addi returns a URL for the shopper to be redirected, the merchant redirects the shopper to Addi's URL to make the order's origination process for the credit.",
    "Minimum number of installments",
    ":",
    "No minimum.",
    "Maximum number of installments (#months)",
    ":",
    "24 months *Depending on the client's profile and the requested amount.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Client ID, Client Secret, Ally Slug, Callback Username and Callback Password.",
    "Limitations/ Specifications for testing",
    ":",
    "Colombia",
    ":",
    "Cédula de ciudadanía: A number between 6 and 10 digits.",
    "e-mail: A string for the username, then the universal separator, the \"@\" and finally the domain which sometimes has the country's code separated by a period (for the confirmation e-mail it is best to put a real e-mail.",
    "Colombian cellphone number: A 10 digit number starting with 3. In case of wanting to finish the test flow, the number should be real, the confirmation code to approve the credit will be sent to this number.",
    "Cost of the purchase: Normally between $50.000 y $1.500.000.",
    "Other data can be generic.",
    "Testing steps",
    "In order to test making a payment using Addi, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "After that, you need to use",
    "Retrieve Payment by ID",
    "to get the URL (payment.transaction.provider.redirect.init_url) to complete the payment in the Addi platform.",
    "You have to access the Addi checkout with the following info:",
    "Info",
    "Data",
    "APELLIDO",
    "CANO",
    "FECHA DE EXPEDICIÓN DOC",
    "01-01-1996",
    "AMOUNT - CO",
    "Min: 50.000",
    "Max: 500.000",
    "ORDER_ID",
    "Must be changed on every transaction",
    "EMAIL",
    "Must be valid and changed in all tests",
    "PHONE_NUMBER",
    "Must be valid and changed in all tests",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Credentials are obtained by requesting them to Addi's team: activacion.aliados@addi.com or integraciones@addi.com",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Addi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    ",",
    "Ally Slug",
    ",",
    "Callback Username",
    ",",
    "Callback Password",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "This resource must be provided by the eCommerce and it must support the basic authentication of the HTTP protocol. The credentials must be provided by the eCommerce as part of the integration process through encrypted emails.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "To go live, the live credentials must be requested to Addi and the client’s real data must be used.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/adyen-pix": [
    "Adyen - PIX",
    "Suggest Edits",
    "This page presents all information related to the Adyen connection using PIX as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "document_number",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Minimum amount",
    ":",
    "R$ 0,01",
    "Maximum amount",
    ":",
    "There is no limit for the day (between 6am and 8pm or 10pm), for the night (between 8pm or 10pm and 6am) the limit is R$ 1,000. Each institution can establish its own Pix limit as a security and anti-fraud mechanism. The only rule is that this limit cannot be lower than the TED limit or a debit card transaction limit, depending on each case.",
    "TRX limit",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Shoppers can pay with Pix when shopping online. The money is sent directly from the shopper account to Adyen's account, and then transferred once a day to the merchant's bank account.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Refunds and partial refunds are only possible within 90 days after the payment.",
    "Time to process refund",
    ":",
    "Standard is 2 days, depends on issuer connection.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Account Code, API key.",
    "Limitations/Specifications for testing",
    ":",
    "Pix is an asynchronous payment method. In the test environment, you can simulate a Pix payment by promoting the pending payment to a sale.",
    "Log in to your",
    "test Customer Area",
    ".",
    "Go to",
    "Transactions > Offers",
    ".",
    "Select the",
    "PSP reference",
    "of the pending Pix payment.",
    "Select the",
    "Promote this offer to a sale",
    "button.",
    "Pix payments that have been paid (including test offers that you manually promoted to sale) are under",
    "Transactions > Payments",
    ".",
    "Before you can accept live Pix payments, you need to",
    "submit a request for Pix",
    "in your",
    "live Customer Area",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Generate an API key",
    "To generate an API key, you must have one of the following user roles:",
    "Merchant admin role",
    ",",
    "Manage API credentials",
    ".",
    "Log in to your",
    "Customer Area",
    ".",
    "Go to",
    "Developers > API credentials",
    ", and select the API credential username for your integration, for example",
    "ws@Company.[YourCompanyAccount]",
    ".",
    "Under",
    "Server settings > Authentication",
    "select the",
    "API key",
    "tab.",
    "Select",
    "Generate API key",
    ".",
    "Select the copy icon and store your API key securely in your system.",
    "Select",
    "Save changes",
    ".",
    "*When you switch to your live environment, you must generate a new API key in your",
    "live Customer Area",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Adyen",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Account Code",
    "and",
    "API Key",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Log in to Adyen dashboard.",
    "Select the merchant account you want to enable notifications.",
    "Navigate to Developers and then Webhooks.",
    "Navigate to Recommended webhooks and Standard notification.",
    "Select Add and enable the notification.",
    "Select Edit and type the following values for each field:",
    "URL for test mode: https://sandbox.y.uno/adyen-webhook/v1/confirmations",
    "URL for live mode: https://prod.y.uno/adyen-webhook/v1/confirmations",
    "Method: JSON",
    "Encryption Protocol: TLSv1.2",
    "Select Apply and Save changes.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "The setup from your test Customer Area is not copied over to your live Customer Area, so you need to configure live settings for:",
    "Account",
    "Finance",
    "Risk and compliance",
    "API communication",
    "Notification webhooks",
    "After you have configured your live Customer Area, test your integration by making real payments.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/adyen-cards": [
    "Adyen - Cards",
    "Suggest Edits",
    "This page presents all information related to the Adyen connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Gibraltar",
    "Greece",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "Ireland",
    "Italy",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Mexico",
    "Monaco",
    "Netherlands",
    "Denmark",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Currencies",
    ":",
    "EUR, AUD, BGN, BRL, CHF, CZK, DKK, GBP, GIP, HKD, HUF, ISK, CHF, MXN, NOK, PLN, RON, SEK, SGD, USD",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Apple Pay",
    "Google Pay",
    "Minimum amount",
    ":",
    "No limit.",
    "Maximum amount",
    ":",
    "No limit.",
    "TRX limit",
    ":",
    "No limit.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Must be configured merchant-account level.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "By default, all card payments are captured immediately after authorisation. Alternatively, you can set up a capture delay, or use manual capture.",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes, not supported in CARNET card in MX.",
    "Multiple captures",
    ":",
    "Yes, not supported in CARNET card in MX, Elo card in BR and Hipercard BR.",
    "Maximum time to capture an authorization",
    ":",
    "Set by merchant, the issuer decides if the auth will still be available.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes, not supported in CARNET card in MX.",
    "Partial refunds",
    ":",
    "Yes, not supported in CARNET card in MX.",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "30 days.",
    "Time to process refund",
    ":",
    "Standard is 2 days, depends on issuer connection.",
    "Voids",
    "Void support",
    ":",
    "Supported when Delayed capture or Manual capture is set up.",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "The number of installments you can offer to the shopper are any on Brazil and 3, 6, 9, 12 or 18 monthly installments in Mexico.",
    "For installment purchases made in Mexico or Turkey, you will receive the funds in full when the first installment is settled. You will be charged an additional fee by card schemes for installment purchases.",
    "In Brazil, you receive funds for each installment as it is settled. There is a settlement delay of 30 days.We also offer advancements if you need funds sooner. There is an additional fee for this service.",
    "Deferral date availability",
    ":",
    "Yes",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "Mexico: 3",
    "Brazil: Any",
    "Maximum number of Installments (#months)",
    ":",
    "Mexico: 18",
    "Brazil: Any",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "Usually have up to 120 days after purchase to dispute a charge, though some card schemes allow up to 365 days.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Visa: 18 days.",
    "Mastercard: 40 days.",
    "American Express: 14 days.",
    "Diners: 25 days.",
    "Security",
    "Address verification service",
    ":",
    "Yes. AVS is supported for card payments with Visa, Mastercard, Discover or American Express ( using AVS is not mandatory for you as a merchant).",
    "Support for 0Auth",
    ":",
    "Yes",
    "E3DS v2",
    ":",
    "Yes. Not supported in CARNET card in MX, Elo card in BR, Hipercard in BR.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Account Code, API key.",
    "Test cards",
    ":",
    "Brazil",
    ":",
    "Card",
    "Card Number",
    "Issuing Country",
    "Expiry date",
    "CVE/CVV2/CVC3",
    "Elo",
    "5066991111111118",
    "BR",
    "03/2023",
    "737",
    "Hipercard",
    "6062828888666688",
    "BR",
    "03/2023",
    "737",
    "Visa Electron",
    "4001020000000009",
    "BR",
    "03/2023",
    "737",
    "Mexico",
    ":",
    "Card",
    "Card Number",
    "Issuing Country",
    "Expiry date",
    "CVE/CVV2/CVC3",
    "Visa (Fleet Debit)",
    "4607000000000009",
    "MX",
    "03/2023",
    "737",
    "Limitations/Specifications for testing",
    ":",
    "When you make a test payment with these card details you'll receive a resultCode of",
    "Authorised",
    ".",
    "To test how your integration responds to other payment scenarios, such as refused or invalid payments, see",
    "Result code testing",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Generate an API key",
    "To generate an API key, you must have one of the following user roles:",
    "Merchant admin role",
    ",",
    "Manage API credentials",
    ".",
    "Log in to your",
    "Customer Area",
    ".",
    "Go to",
    "Developers > API credentials",
    ", and select the API credential username for your integration, for example",
    "ws@Company.[YourCompanyAccount]",
    ".",
    "Under",
    "Server settings > Authentication",
    "select the",
    "API key",
    "tab.",
    "Select",
    "Generate API key",
    ".",
    "Select the copy icon and store your API key securely in your system.",
    "Select",
    "Save changes",
    ".",
    "When you switch to your live environment, you must generate a new API key in your",
    "live Customer Area",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Adyen",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Account Code",
    "and",
    "API Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to Adyen dashboard.",
    "Select the merchant account you want to enable notifications.",
    "Navigate to Developers and then Webhooks.",
    "Navigate to Recommended webhooks and Standard notification.",
    "Select Add and enable the notification.",
    "Select Edit and type the following values for each field:",
    "URL for test mode: https://sandbox.y.uno/adyen-webhook/v1/confirmations",
    "URL for live mode: https://prod.y.uno/adyen-webhook/v1/confirmations",
    "Method: JSON",
    "Encryption Protocol: TLSv1.2",
    "Select Apply and Save changes.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "The setup from your test Customer Area is not copied over to your live Customer Area, so you need to configure live settings for:",
    "Account",
    "Finance",
    "Risk and compliance",
    "API communication",
    "Notification webhooks",
    "After you have configured your live Customer Area, test your integration by making real payments.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/arcus-cash": [
    "Arcus - Cash",
    "Suggest Edits",
    "This page presents all information related to the Arcus connection using the Cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "Depends on chain, each one has a permitted minimum and maximum.",
    "Maximum amount",
    ":",
    "Depends on chain, each one has a permitted minimum and maximum.",
    "Purchase TRX",
    ":",
    "Cash to digital transactions, in a safe and instant way. This will serve as a link to offer banking services to the unbanked population.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "Yes, Arcus Pay Reverse allows the cancellation of payment transaction previously made through any of the payment methods of the Arcus Pay network.",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Limitations/ Specifications for testing",
    ":",
    "Coordinate with your designated TAM.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Arcus dashboard",
    "Navigate to",
    "Developers",
    "Click on",
    "API Keys",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Arcus",
    ".",
    "Click",
    "Connect",
    ".",
    "Select",
    "Cash",
    "as Payment Method",
    "Introduce the",
    "Name",
    "and the",
    "Payment ID",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Arcus dashboard",
    "Navigate to",
    "Developers",
    "Click on",
    "Webhooks",
    "Add the Webhook",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "There is a KYB process where a Due Diligence of the shareholding structure of each client is made to know the real owner of the resources and it must be approved by Arcus' compliance team. In the technical aspect, a certification call must be made where the operational flow is certified.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bac-cards": [
    "BAC - Cards",
    "Suggest Edits",
    "This page presents all information related to the BAC connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Nicaragua",
    "Panama",
    "Currencies",
    ":",
    "CRC, USD, GTQ, HNL, NIO",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "No",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Installments",
    ":",
    "Supported (see conditions or restrictions).",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "BAC supports installments, but it is not sent by API, it is done by terminal.",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Terminal ID",
    "Test cards",
    ":",
    "Card",
    "Number",
    "Exp Date",
    "CVV",
    "Visa",
    "4111111111111110",
    "may-25",
    "123",
    "Mastercard",
    "5431111111111110",
    "may-25",
    "123",
    "Discover",
    "6011601160116610",
    "may-25",
    "123",
    "Amex",
    "341111111111111",
    "may-25",
    "1234",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your BAC Credomatic TAM and ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "BAC",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    "and",
    "Terminal ID",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/bradesco-pix": [
    "Bradesco - PIX",
    "Suggest Edits",
    "This page presents all information related to the Bradesco connection using Pix as payment method. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Purchase TRX in 1-Step",
    ":",
    "Shoppers can pay with Pix when shopping online.",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "90 days.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Client ID",
    "Client Secret",
    "Certificate's Private Key",
    "Certificate",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Bradesco TAM.",
    "Ask for your credentials (For the field: Certificate's Private Key, please copy and paste the content of your “.pem; .key; .pkcs12” file).",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Bradesco",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    ",",
    "Certificate",
    "and",
    "Certificate's Private Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Configure the Webhook Pix in an endpoint.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/braintree-cards": [
    "Braintree - Cards",
    "Suggest Edits",
    "This page presents all information related to the Braintree connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Andorra",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Canada",
    "China",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Greece",
    "Guernsey",
    "Hong Kong SAR",
    "Hungary",
    "Iceland",
    "Ireland",
    "Isle of Man",
    "Italy",
    "Jersey",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malaysia",
    "Malta",
    "Monaco",
    "Netherlands",
    "New Zealand",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "San Marino",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "United Kingdom",
    "United States",
    "Currencies",
    ":",
    "AED, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BIF, BMD, BND, BOB, BRL, BSD, BWP, BYN, BZD, CAD, CHF, CLP, CNY, COP, CRC, CVE, CZK, DJF, DKK, DOP, DZD, EEK, EGP, ETB, EUR, FJD, FKP, GBP, GEL, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, ISK, JMD, JOY, KES, KGS, KHR, KYD, KMF, KRW, KZT, LAK, LBP, LKR, LRD, LSL, LTL, LVL, MAD, MDL, MKD, MNT, MOP, MUR, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RDS, RUB, RWF, SAR, SBD, SCR, SEK, SGD, SHP, SLL, SOS, SRD, STD, SVC, SZL, THB, TJS, TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, UYU, UZS, VEF, VND, VUV, WST, XAF, XCD, XOF, XPF, YER, ZAR, ZMK, ZWD.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Apple Pay",
    "Google Pay",
    "Minimum amount",
    ":",
    "No minimum amount.",
    "Maximum amount",
    ":",
    "No limit, it will depend on buyers credit card availability.",
    "TRX limit",
    ":",
    "There isn't a specified transaction limit.",
    "Support of international BIN",
    ":",
    "Yes.",
    "Activation of functionality",
    ":",
    "No need to activate it, if there is any limitations, it should be reported for Braintree team to analyze the bin.",
    "TRX without CVV",
    ":",
    "Yes.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Braintree offers webhook notifications for a specific set of trigger events that occur in your gateway. Such events can include subscription changes and opened disputes.",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Multiple partial settlements are supported for most credit and debit card transactions – including those processed via Google Pay and Apple Pay. This feature can't be used with American Express or Discover card transactions (Multiple partial settlements are currently in a limited release and are only available to select merchants).",
    "Maximum time to capture an authorization",
    ":",
    "3 days.",
    "Captures over the amount of authorization",
    ":",
    "You can't settle more than the authorized amount unless your industry and processor support settlement adjustment (settling a certain percentage over the authorized amount). Contact braintree for details.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "No limit.",
    "Time to process refund",
    ":",
    "Refunds are settled immediately.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "For Brazil: Minimum amount suggested is 5,00 BRL.",
    "Minimum number of Installments (#months)",
    ":",
    "Brazil: 1",
    "Maximum number of Installments (#months)",
    ":",
    "Brazil: 12",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "There is a webhook service for disputes opened.",
    "Defined period to make a chargeback",
    ":",
    "Varies by bank.",
    "Endpoint for disputes",
    ":",
    "No",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Every dispute has a reply-by date listed in the Control Panel.",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID, Public Key, Private Key and Merchant Account ID.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "CVV",
    "American Express",
    "3782.8224.6310.005",
    "random",
    "American Express",
    "371449635398431",
    "random",
    "Diners Club*",
    "36259600000004",
    "random",
    "Discover",
    "6011000991300009",
    "random",
    "JCB",
    "3530111333300000",
    "random",
    "Maestro",
    "6304000000000000",
    "random",
    "Mastercard",
    "5555555555554444",
    "random",
    "Mastercard",
    "2223000048400011",
    "random",
    "Visa",
    "4111111111111111",
    "random",
    "Visa",
    "4005519200000004",
    "random",
    "Visa",
    "4009348888881881",
    "random",
    "Visa",
    "4012000033330026",
    "random",
    "Visa",
    "4012000077777777",
    "random",
    "Visa",
    "4012888888881881",
    "random",
    "Visa",
    "4217651111111119",
    "random",
    "Visa",
    "4500600000000061",
    "random",
    "UnionPay",
    "6243030000000001",
    "random",
    "UnionPay",
    "6221261111117766",
    "random",
    "UnionPay",
    "6223164991230014",
    "random",
    "Limitations/Specifications for testing",
    ":",
    "Transaction amounts",
    "When working with transactions, you can pass specific amounts to simulate different processor responses. Each test amount below will trigger the associated authorization response, regardless of the processing currency.",
    "Amount",
    "Authorization Response",
    "Settlement Response",
    "0.01 - 1999.99",
    "Authorized",
    "Settled",
    "2000.00 - 2999.99",
    "Processor Declined with a processor response equal to the amount",
    "n/a",
    "3000.00 - 3000.99",
    "Failed with a 3000 processor response",
    "n/a",
    "3001.00 - 4000.99",
    "Authorized",
    "Settled",
    "4001.00 - 4001.99",
    "Authorized",
    "Settlement Declined on certain transaction types with a processor response equal to the amount; Settled on all others",
    "4002.00 - 4002.99",
    "Authorized",
    "Settlement Pending on PayPal transactions with a processor response equal to the amount; Settled on all others",
    "4003.00 - 5000.99",
    "Authorized",
    "Settlement Declined on certain transaction types with a processor response equal to the amount; Settled on all others",
    "5001.00",
    "Gateway Rejected with a reason of Application Incomplete",
    "n/a",
    "5001.01",
    "Processor Declined on PayPal transactions in the Mocked PayPal flow with a 2038 processor response. Authorized on all others",
    "n/a on PayPal transactions; Settled on all others",
    "5001.02",
    "Authorized",
    "Processor Unavailable on certain transaction types with a processor response of 3000; Settled on all others",
    "5002.00 and up",
    "Authorized",
    "Settled",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Braintree dashboard",
    ".",
    "Navigate to",
    "Bussiness",
    "and get the",
    "Merchant ID",
    ".",
    "Navigate to",
    "API",
    "and get the other keys.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Braintree",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant ID",
    ",",
    "Public Key",
    ",",
    "Private Key",
    "and",
    "Merchant Account ID",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to",
    "Braintree dashboard",
    ".",
    "Navigate to",
    "API",
    "and then",
    "Webhooks",
    ".",
    "Create a new",
    "Webhook",
    "and set them up with the redirectiong URL and relevant notifications.",
    "Save your changes.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Going live must be conducted by a relationship manager from PayPal's Side.",
    "Observations on the implementation",
    ":",
    "Payments in other currencies must be configured on the account, this is one of the attribution of the parameter MerchantAccountID (not to be confused wit MerchantID), for every business rule, it needs another MerchantAccountID.",
    "Log in to",
    "Braintree dashboard",
    ".",
    "Navigate to",
    "Options",
    "and then",
    "Business",
    ".",
    "Create a new",
    "MerchantAccountID",
    "setting up the specific business rules.",
    "Save your changes.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/cielo-cards": [
    "Cielo - Cards",
    "Suggest Edits",
    "This page presents all information related to the Cielo connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Apple Pay",
    "Google Pay",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, merchant level.",
    "TRX without CVV",
    ":",
    "Yes, it needs to be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Type of integration",
    ":",
    "B2B",
    "Captures",
    "Partial capture",
    ":",
    "No",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "Each installment MUST have a minimum number of 5.00 BRL (meaning that a transaction with 2 installments must have a minimum value of 10.00 BRL; 3 installments must have a minimum value of 15.00 BRL etc.). If not, the transaction gets automatically rejected by the issuing bank",
    "Maximum number of Installments (#months)",
    ":",
    "Depends on the BIN.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID",
    "Merchant Key",
    "Test cards",
    ":",
    "FINAL CARD DIGIT",
    "TRANSACTION STATUS",
    "RETURN CODE",
    "RETURN MESSAGE",
    "XXXX.XXXX.XXXX.XXX0",
    "Authorized",
    "4/6",
    "Operation performed successfully",
    "XXXX.XXXX.XXXX.XXX1",
    "Authorized",
    "4/6",
    "Operation performed successfully",
    "XXXX.XXXX.XXXX.XXX4",
    "Authorized",
    "4/6",
    "Operation performed successfully",
    "XXXX.XXXX.XXXX.XXX2",
    "Not Authorized",
    "05",
    "Not Authorized",
    "XXXX.XXXX.XXXX.XXX3",
    "Not Authorized",
    "57",
    "Expired Card",
    "XXXX.XXXX.XXXX.XXX5",
    "Not Authorized",
    "78",
    "Locked Card",
    "XXXX.XXXX.XXXX.XXX6",
    "Not Authorized",
    "99",
    "Time Out",
    "XXXX.XXXX.XXXX.XXX7",
    "Not Authorized",
    "77",
    "Canceled Card",
    "XXXX.XXXX.XXXX.XXX8",
    "Not Authorized",
    "70",
    "Problems with the Credit Card",
    "XXXX.XXXX.XXXX.XXX9",
    "Random Authorization",
    "4 - 99",
    "Operation Successful / Time Out",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Cielo TAM. Ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Cielo",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant ID",
    "and",
    "Merchant Key",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/credix-cards": [
    "Credix - Cards",
    "Suggest Edits",
    "This page presents all information related to the Credix connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Installments",
    "Security",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "CVV",
    "General information",
    "Countries",
    ":",
    "Costa Rica",
    "Currencies",
    ":",
    "CRC, USD",
    "Payment methods",
    ":",
    "Credit card",
    "Support of international BIN",
    ":",
    "No",
    "TRX without CVV",
    ":",
    "No",
    "Type of integration",
    ":",
    "B2B",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "No",
    "Multiple refunds",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Security",
    "3DS v2",
    ":",
    "No",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Credix TAM and ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Credix",
    ".",
    "Introduce",
    "Name",
    ",",
    "User",
    "and",
    "Password",
    ".",
    "Click",
    "Connect"
  ],
  "https://docs.y.uno/docs/daviplata-banktransfer": [
    "DaviPlata - BankTransfer",
    "Suggest Edits",
    "This page presents all information related to the DaviPlata connection using the BankTransfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "document_type",
    "document_number",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1000 COP",
    "Maximum amount",
    ":",
    "8000000",
    "TRX limit",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Pay through DaviPlata, an electronic deposit of money.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No, but Daviplata reverses transfers by client's request.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Chargebacks are handled operationally.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "idComercio",
    "0010203040",
    "idTerminal",
    "ESB10934",
    "idTransaccion",
    "152648",
    "Limitations/ Specifications for testing",
    ":",
    "Documents for testing",
    ":",
    "Type",
    "API Identification",
    "Number",
    "CC",
    "01",
    "1134568019",
    "CE",
    "02",
    "786630",
    "TI",
    "04",
    "1389123506",
    "*Low values for test purchases are recommended.",
    "The values of idComercio, idTerminal and idTransaccion are standard for the Sandbox environment.",
    "Testing steps",
    "In order to test making a payment using DaviPlata, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK. Use",
    "DAVIPLATA",
    "as the payment type to generate the One Time Token.",
    "Create Payment",
    "The response body of the Create Payment request will provide a redirect URL (payment_method.payment_method_detail.bank_transfer.redirect_url) to the DaviPlata service. On this page, select a document type and fill in the document number with",
    "1",
    "to continue with the payment.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "In Daviplata's dashboard click on",
    "Aplicaciones",
    ".",
    "Select the name of the Application.",
    "The",
    "Consumer Key",
    "and",
    "Consumer Secret",
    "will be displayed under",
    "Credenciales",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Daviplata",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "MerchantID",
    ", and",
    "Terminal ID",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Contact your TAM to go to Production mode.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-cards": [
    "dLocal - Cards",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document_number",
    "country(transaction)",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Bangladesh",
    "Bolivia",
    "Brazil",
    "Cameroon",
    "Chile",
    "China",
    "Colombia",
    "Costa Rica",
    "Dominican Republic",
    "Ecuador",
    "El Salvador",
    "Ghana",
    "Guatemala",
    "Honduras",
    "India",
    "Indonesia",
    "Ivory Coast",
    "Japan",
    "Kenya",
    "Malaysia",
    "Mexico",
    "Morocco",
    "Nicaragua",
    "Nigeria",
    "Pakistan",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Rwanda",
    "Senegal",
    "South Africa",
    "Tanzania",
    "Thailand",
    "Turkey",
    "Uganda",
    "Uruguay",
    "Vietnam",
    "Currencies",
    ":",
    "ARS, BOB, BRL, CLP, COP, CRC, DOP, USD, GTQ, HNL, MXN, NIO, PYG, PEN, UYU, BDT, XAF, CNY, EGP, GHS, INR,\n            IDR, X0F, YEN, KES, MYR, MAD, NGN, PKR, PHP, RWF, ZAR, TZS, THB, TRY, UGX, VND",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Depends on issuing bank.",
    "Maximum amount",
    ":",
    "Depends on issuing bank.",
    "TRX limit",
    ":",
    "dLocal's fraud motor has velocity rules. Because of security these can't be shared.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes",
    "TRX without CVV",
    ":",
    "Yes. Must be requested during setup.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Yes",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "Yes, for some countries. In case it is not supported, a solution by dLocal can simulate the operation.",
    "Maximum amount",
    ":",
    "When simulated by dLocal, there are no limits.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Between 120 and 180 days.",
    "Time to process refund",
    ":",
    "Depends on each country's issuing banks. Can take up to two billing cycles.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No, this is configured account-level.",
    "Conditions or restrictions",
    ":",
    "International cards don't operate with installments.",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "These information can be obtained from dLocal's API.",
    "Maximum number of Installments (#months)",
    ":",
    "These information can be obtained from dLocal's API.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "Between 120 and 150 days.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 days.",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login, X-Trans-Key and Secret Key.",
    "Limitations/Specifications for testing",
    ":",
    "You can test payments using the Create a Payment API method, just remember to use the",
    "https://sandbox.dlocal.com/payments",
    "endpoint.",
    "In Sandbox, all Credit Card payments are automatically approved by default. If you want to test the response of all possible errors, you can do so with the following trick exclusive for sandbox:",
    "On the description body parameter of the Create a payment you can include the error code that you want the payment to result to.",
    "For example, description: “302” will result in the payment being rejected with the error: “Insufficient Amount”.",
    "You can check the",
    "full list of codes",
    "available whenever you need.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard.You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "In the Merchant Dashboard go to",
    "Settings > Integration",
    ", scroll to Endpoint configuration and set up",
    "Payins notification URL",
    "and",
    "Refunds and Chargebacks URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Make a connection test to validate that the IPs are configured correctly performing a GET at the endpoint of payment methods. Additionally, it is recommended to make a satisfactory test in each country to go live. Some PSP go one step further and test for main brand: Amex, Visa and Master.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-checkout-redirect": [
    "dLocal - Checkout Redirect",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Checkout Redirect as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document_number",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Bangladesh",
    "Bolivia",
    "Brazil",
    "Cameroon",
    "Chile",
    "China",
    "Colombia",
    "Costa Rica",
    "Dominican Republic",
    "Ecuador",
    "El Salvador",
    "Ghana",
    "Guatemala",
    "Honduras",
    "India",
    "Indonesia",
    "Ivory Coast",
    "Japan",
    "Kenya",
    "Malaysia",
    "Mexico",
    "Morocco",
    "Nicaragua",
    "Nigeria",
    "Pakistan",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Rwanda",
    "Senegal",
    "South Africa",
    "Tanzania",
    "Thailand",
    "Turkey",
    "Uganda",
    "Uruguay",
    "Vietnam",
    "Currencies",
    ":",
    "ARS, BOB, BRL, CLP, COP, CRC, DOP, USD, GTQ, HNL, MXN, NIO, PYG, PEN, UYU, BDT, XAF, CNY, EGP, GHS, INR,\n            IDR, X0F, YEN, KES, MYR, MAD, NGN, PKR, PHP, RWF, ZAR, TZS, THB, TRY, UGX, VND",
    "Payment methods",
    ":",
    "All",
    "supported payment methods",
    "by dLocal for each country.",
    "Minimum amount",
    ":",
    "Depends on each payment method and for cards, on the issuing bank.",
    "Maximum amount",
    ":",
    "Depends on each payment method and for cards, on the issuing bank.",
    "TRX limit",
    ":",
    "dLocal's fraud motor has velocity rules. Because of security these can't be shared.",
    "Support of international BIN",
    ":",
    "Yes, for Card payments.",
    "Activation of functionality",
    ":",
    "Yes",
    "TRX without CVV",
    ":",
    "No",
    "Considerations",
    ":",
    "By default, the Redirect URL can only be used one time.",
    "After making the request, you can get the result REJECTED or PENDING. If the response is PENDING, you will get the URL to redirect the user.",
    "Once the user completes the payment (or the payment expires), you will receive a notification with the final status of the payment. You can get the result REJECTED or PAID.",
    "The default expiration date is 1 day.",
    "If the user selects any card payment method (Visa, Mastercard, or any other card), all card payments will be processed with the security code of the card (CVV).",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes, for Cards payments.",
    "Multiple captures",
    ":",
    "Yes",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "Yes, for some countries. In case it is not supported, a solution by dLocal can simulate the operation.",
    "Maximum amount",
    ":",
    "When simulated by dLocal, there are no limits.",
    "Refunds",
    "Refund support",
    ":",
    "Yes. Only applies for Card payments.",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Between 120 and 180 days.",
    "Time to process refund",
    ":",
    "Depends on each country's issuing banks. Can take up to two billing cycles.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No, this is configured account-level.",
    "Conditions or restrictions",
    ":",
    "International cards don't operate with installments.",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "These information can be obtained from dLocal's API.",
    "Maximum number of Installments (#months)",
    ":",
    "These information can be obtained from dLocal's API.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes, for Cards payments.",
    "Defined period to make a chargeback",
    ":",
    "Between 120 and 150 days.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 days.",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login, X-Trans-Key and Secret Key.",
    "Limitations/Specifications for testing",
    ":",
    "You can test payments using the Create a Payment API method, just remember to use the",
    "https://sandbox.dlocal.com/payments",
    "endpoint.",
    "In Sandbox, all Credit Card payments are automatically approved by default. If you want to test the response of all possible errors, you can do so with the following trick exclusive for sandbox:",
    "On the description body parameter of the Create a payment you can include the error code that you want the payment to result to.",
    "For example, description: “302” will result in the payment being rejected with the error: “Insufficient Amount”.",
    "You can check the",
    "full list of codes",
    "available whenever you need.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard.You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "In the Merchant Dashboard go to",
    "Settings > Integration",
    ", scroll to Endpoint configuration and set up",
    "Payins notification URL",
    "and",
    "Refunds and Chargebacks URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Make a connection test to validate that the IPs are configured correctly performing a GET at the endpoint of payment methods. Additionally, it is recommended to make a satisfactory test in each country to go live. Some PSP go one step further and test for main brand: Amex, Visa and Master.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-codi": [
    "dLocal - CODI",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-efecty": [
    "dLocal - Efecty",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Payment methods",
    ":",
    "Cash",
    "Minimum amount",
    ":",
    "1000 COP",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-khipu": [
    "dLocal - Khipu",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "2000 CLP",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-oxxo": [
    "dLocal - OXXO",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Payment methods",
    ":",
    "Cash",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-pago-efectivo": [
    "dLocal - Pago Efectivo",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Peru",
    "Ecuador",
    "Currencies",
    ":",
    "PEN, USD",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "5 PEN",
    "1 USD",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-pse": [
    "dLocal - PSE",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "Amounts are subject to the client's configuration from their channel.",
    "Type of integration",
    ":",
    "Redirection to the Bank Page",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard.You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-spei": [
    "dLocal - SPEI",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login",
    ": API key necessary to authenticate your request.",
    "X-Trans-Key",
    ": API key necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/dlocal-tarjeta-clave": [
    "dLocal - Tarjeta Clave",
    "Suggest Edits",
    "This page presents all information related to the dLocal connection using Tarjeta Clave as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document_number",
    "telehpone_number",
    "General information",
    "Countries",
    ":",
    "Panama",
    "Currencies",
    ":",
    "USD",
    "Payment methods",
    ":",
    "Debit card",
    "Minimum amount",
    ":",
    "1 USD.",
    "Maximum amount",
    ":",
    "1500 USD.",
    "TRX limit",
    ":",
    "dLocal's fraud motor has velocity rules. Because of security these can't be shared.",
    "TRX without CVV",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Payments with debit card.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Between 120 and 180 days.",
    "Time to process refund",
    ":",
    "7 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to Refund",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "Between 120 and 150 days.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 days.",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "X-Login, X-Trans-Key and Secret Key.",
    "Limitations/Specifications for testing",
    ":",
    "You can test payments using the Create a Payment API method, just remember to use the",
    "https://sandbox.dlocal.com/payments",
    "endpoint.",
    "If you want to test the response of all possible errors, you can do so with the following trick exclusive for sandbox:",
    "On the description body parameter of the Create a payment you can include the error code that you want the payment to result to.",
    "For example, description: “302” will result in the payment being rejected with the error: “Insufficient Amount”.",
    "You can check the",
    "full list of codes",
    "available whenever you need.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two types of credentials: Sandbox credentials and Production Credentials. You can get both from your same account in the Merchant Dashboard. You just have to change between the Test and the Live modes by pressing the toggle at the top bar and then find the corresponding credentials in",
    "Settings > Integration",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "dLocal",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "X-Login",
    ",",
    "X-Trans-Key",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "In the Merchant Dashboard go to",
    "Settings > Integration",
    ", scroll to Endpoint configuration and set up",
    "Payins notification URL",
    "and",
    "Refunds and Chargebacks URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Make a connection test to validate that the IPs are configured correctly performing a GET at the endpoint of payment methods. Additionally, it is recommended to make a satisfactory test in each country to go live. Some PSP go one step further and test for main brand: Amex, Visa and Master.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/ebanx-cards": [
    "Ebanx - Cards",
    "Suggest Edits",
    "This page presents all information related to the Ebanx connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name,",
    "last_name,",
    "email,",
    "document_number,",
    "address_line_1,",
    "country,",
    "state,",
    "city,",
    "zip_code,",
    "telephone_number",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Colombia",
    "Chile",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Mexico",
    "Panama",
    "Paraguay",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, COP, CLP, CRC, USD, GTQ, MXN, PYG, PEN, UYU.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Argentina: 5 ARS",
    "Brazil: 0.5 BRL",
    "Colombia: 1 COP",
    "Chile: 1 CLP",
    "Costa Rica: 10 CRC",
    "El Salvador: 1 USD",
    "Guatemala: 1 GTQ",
    "Mexico: 3 MXN",
    "Panama: 0.5 PAB/USD",
    "Paraguay: 1 PYG",
    "Peru: 1 PEN",
    "Uruguay: 15 UYU",
    "Maximum amount",
    ":",
    "The standard is USD 10,000.00 but this can be configured by merchant.",
    "TRX limit",
    ":",
    "No limit.",
    "Support of international BIN",
    ":",
    "Not for CrossBorder operation. For Local Latam it is supported.",
    "Activation of functionality",
    ":",
    "For Local Latam the functionality must be activated in the merchant's account.",
    "TRX without CVV",
    ":",
    "Yes.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes, but EBANX doesn't have the recurrent engine, merchants or partners have to handle the payment transactions.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes. This feature is only available in Brazil. If you want to enable this feature, please contact Ebanx's Integration Team.",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days for cards.",
    "Captures over the amount of authorization",
    ":",
    "No, only the total amount (except for the local fees or taxes - e.g.: IOF in Brazil)",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "To use and receive in the same payment method, under 90 days. After that, the refund is available only via Bank Transfer.",
    "Time to process refund",
    ":",
    "Depends on the country and financial institution.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "There are fees to use installments and that comes from Banks and Card Brands, EBANX sets that up into our system. You can check the fees applied over each installment via GET Installments Plan. EBANX can set up to charge the merchant or charge the customer, this part is negotiated between EBANX and the Merchant.",
    "Deferral date availability",
    ":",
    "Not on payment context.",
    "Grace period",
    ":",
    "Not on payment context.",
    "Minimum number of installments (#months)",
    ":",
    "Brazil: 1 (depending on your contract).",
    "Mexico: 1 (depending on your contract).",
    "Colombia: 1 (depending on your contract).",
    "Argentina: 1 (depending on your contract).",
    "Peru: 1 (depending on your contract).",
    "Maximum number of installments (#months)",
    ":",
    "Brazil: 12 (depending on your contract).",
    "Mexico: 12 (depending on your contract).",
    "Colombia: 36 (depending on your contract).",
    "Argentina: 12 (depending on your contract).",
    "Peru: 48 (depending on your contract).",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes, via EBANX dashboard.",
    "Defined period to make a chargeback",
    ":",
    "Under 180 days.",
    "Endpoint for disputes",
    ":",
    "No, the process is done via EBANX dashboard.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 days",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID, Public Key, Private Key and Merchant Account ID.",
    "Test cards",
    ":",
    "Card Brand",
    "Name",
    "Code",
    "American Express",
    "amex",
    "378282246310005",
    "American Express",
    "amex",
    "378282749798722",
    "Aura",
    "aura",
    "5078601870000127985",
    "Diners Club",
    "diners",
    "30569309025904",
    "Discover",
    "discover",
    "6011111111111117",
    "Elo",
    "elo",
    "6362970000457013",
    "Elo",
    "elo",
    "6362971747129170",
    "Hipercard",
    "hipercard",
    "6062825624254001",
    "Hipercard",
    "hipercard",
    "6062823936268330",
    "Visa",
    "visa",
    "4111111111111111",
    "Visa",
    "visa",
    "4111115666052208",
    "MasterCard",
    "mastercard",
    "5555555555554444",
    "MasterCard",
    "mastercard",
    "5555556355564617",
    "CARNET (For Mexico only)",
    "carnet",
    "5062224607440872",
    "Credimas (For Argentina only)",
    "credimas",
    "5045201174402586",
    "Naranja (For Argentina only)",
    "naranja",
    "5895626292990446",
    "Cabal (For Argentina only)",
    "cabal",
    "5896578742026538",
    "Magna (For Chile only)",
    "magna",
    "5680095660610110",
    "Limitations/Specifications for testing",
    ":",
    "CVV: use any number with three digits, except American Express which CVV is four digits.",
    "Expiration date (due date): use any date in the future.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Ebanx dashboard",
    ".",
    "Navigate to",
    "Settings",
    "and",
    "Integrations",
    ".",
    "Get your keys.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Ebanx",
    ".",
    "Introduce",
    "Name",
    ",",
    "Integration key",
    "and",
    "Public Integration Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to",
    "Ebanx dashboard",
    ".",
    "Navigate to",
    "Settings",
    "and then",
    "Integrations",
    ".",
    "Enter the proper URLs to receive notifications with updates of a transaction.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Merchant must go through Compliance and Legal steps in order to be ready for a production account. After that, Ebanx must align the necessary requirements to make each country and payment method available."
  ],
  "https://docs.y.uno/docs/fac-cards": [
    "FAC - Cards",
    "Suggest Edits",
    "This page presents all information related to the FAC connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Anguilla",
    "Antigua",
    "Aruba",
    "Bahamas",
    "Barbados",
    "Belize",
    "Bermuda",
    "British Virgin Islands",
    "Cayman Islands",
    "Curacao",
    "Dominica",
    "Dominican Republic",
    "Grenada",
    "Guyana",
    "Jamaica",
    "Montserrat",
    "St Kitts",
    "St Lucia",
    "St Vincent",
    "Trinidad & Tobago",
    "Turks & Caicos",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Nicaragua",
    "Panama",
    "Currencies",
    ":",
    "XCD, AWG, BSD, BBD, BZD, BMD, USD, KYD, ANG, DOP, GYD, JMD, TTD, CRC, GTQ, HNL, NIO",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "For multicurrency FAC recommends one full unit of currency. ie. 1.00 CRC or JMD (not 0.10). For USD and equivalent you can pass less (0.01) although some banks may decline.",
    "Maximum amount",
    ":",
    "No",
    "TRX limit",
    ":",
    "For very high volume processing throttling is recommended.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "No. By default any MasterCard or Visa branded card regardless of issuing bank country can be used",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Scheduled payments can be viewed and managed through FAC's Merchant Administration system.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "For most hosts, no.",
    "Maximum time to capture an authorization",
    ":",
    "Recommended to capture within 7 days. This setting is acquirer dependent but the cutoff ranges from 7-35 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "180 days by default but it can be extended to 365.",
    "Time to process refund",
    ":",
    "2-3 business days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Installments support",
    ":",
    "Installments are not supported.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Chargebacks are handled between the merchant and the acquiring bank.",
    "Security",
    "Address verification service",
    ":",
    "Yes",
    "Support for 0Auth",
    ":",
    "This is acquirer dependent for $0 financial authorizations. $0 3DS only is supported.",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "PowerTranzId and Password.",
    "Test cards",
    ":",
    "Authorizations/Sales will approve for the following test cases.",
    "Test Case",
    "Card Number",
    "Card Type Status",
    "V2-01-YA",
    "4012000000020071",
    "Visa Approved",
    "V2-02-AA",
    "4012000000020089",
    "Visa Approved",
    "M2-01-YA",
    "5100270000000023",
    "Mastercard Approved",
    "M2-02-RA",
    "5100270000000072",
    "Mastercard Approved",
    "A2-01-YA",
    "341111000000009",
    "Amex Approved",
    "DS-01-0A",
    "6011111111111111",
    "Discover Approved",
    "JC-01-0A",
    "3528111111111108",
    "JCB Approved",
    "Authorizations/Sales will decline for the following test cases.",
    "Test Case",
    "Card Number",
    "Card Type Status",
    "V2-02-AD",
    "4666666666662222",
    "Visa ISO Response Code = 05, CVV Response = N",
    "M2-03-UD",
    "5555666666662222",
    "Mastercard ISO Response Code = 05, CVV Response = N",
    "V2-03-AD",
    "4111111111119999",
    "Visa ISO Response Code = 98",
    "V2-04-YD",
    "4111111111110000",
    "Visa ISO Response Code = 91",
    "M2-05-YD",
    "5111111111110000",
    "Mastercard ISO Response Code = 91",
    "DS-01-0D",
    "6011111111111152",
    "Discover ISO Response Code = 05",
    "JC-01-0D",
    "3528111111111157",
    "JCB ISO Response Code = 05, CVV Response = N",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "FAC’s technical team will provide secure credential details during integration through a secure message e-mail.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Once a merchant moves from the Staging Account to the Production Account, FAC will conduct the final site review (which includes our end-to-end testing of your website). For this review, please ensure the website has a test product set up with a purchase price equivalent to $1.00 USD. FAC will use this product to submit a live transaction during the review.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/getnet-cards": [
    "Getnet - Cards",
    "Suggest Edits",
    "This page presents all information related to the Getnet connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Type of integration",
    ":",
    "B2B",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Yes",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Client ID",
    "Client Secret",
    "Seller ID",
    "Test cards",
    ":",
    "Card",
    "Type of Test",
    "Test result",
    "5155901222280001",
    "Authorized Transaction",
    "Transaction Approved",
    "4012001037141112",
    "Authorized Transaction",
    "Transaction Approved",
    "5155901222270002",
    "Unauthorized Transaction",
    "Invalid Card",
    "5155901222260003",
    "Unauthorized Transaction",
    "Card Expired",
    "5155901222250004",
    "Unauthorized Transaction",
    "Invalid Establishment",
    "5155901222240005",
    "Unauthorized Transaction",
    "Insufficient funds",
    "5155901222230006",
    "Unauthorized Transaction",
    "Authorization Declined",
    "5155901222220007",
    "Unauthorized Transaction",
    "Unprocessed Transaction",
    "5155901222210008",
    "Unauthorized Transaction",
    "Exceeds Withdrawal Limit",
    "Limitations/Specifications for testing",
    ":",
    "When using test cards, you need to be aware of some points:",
    "Please use a valid expiration date, that is, after the current date.",
    "The holder’s name must not have special characters such as stress marks and Ç.",
    "The value of the CVV can be any numerical value with three digits.",
    "For debit transactions, you must only use the Visa card: 4012001037141112.",
    "To test purchases with installments in the test environment, use the specified values.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Ask your Getnet TAM for \"Digital Platform (idempotency)\" credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Getnet",
    ".",
    "Introduce",
    "Name",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "and",
    "Seller ID",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Ask the Getnet TAM to configure the webhooks URL.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/getnet-pix": [
    "Getnet - PIX",
    "Suggest Edits",
    "This page presents all information related to the Getnet connection using PIX as payment method. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Voids",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Purchase TRX in 1-Step",
    ":",
    "Shoppers can pay with Pix when shopping online.",
    "Type of integration",
    ":",
    "B2B",
    "Webhooks",
    ":",
    "Yes",
    "Voids",
    "Void support",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "CLIENT_ID",
    "CLIENT_SECRET",
    "SELLER_ID",
    "Limitations/Specifications for testing",
    ":",
    "Amount",
    "Result",
    "90,00",
    "Approved",
    "90,88",
    "Denied",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Ask your Getnet TAM for \"Digital Platform (idempotency)\" credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Getnet",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "CLIENT_ID",
    ",",
    "CLIENT_SECRET",
    "and",
    "SELLER_ID",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Configured by Getnet's TAM.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/klap-cards": [
    "Klap - Cards",
    "Suggest Edits",
    "This page presents all information related to the Klap connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Costa Rica",
    "Currencies",
    ":",
    "CLP, USD",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Support of international BIN",
    ":",
    "Yes",
    "Type of integration",
    ":",
    "API",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "The first charge must include the Card-Verfication-Value or CVV, and the charge_type.code field must include a 3.",
    "Webhooks",
    ":",
    "No",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Commerce ID",
    "Test cards",
    ":",
    "Common data of all testing cards",
    "CVV",
    "Expiration",
    "123",
    "12/31",
    "Cards to generate successful transaction without authentication",
    "Card Brand/Type",
    "Card",
    "Visa/Credit",
    "4000 0000 0000 1000",
    "4000 0000 0000 1026",
    "MasterCard/Credit",
    "5555 5555 6118 3758",
    "5555 5560 3325 1793",
    "Visa/Debit",
    "4900 0600 8361 2025",
    "4900 0694 2624 8355",
    "MasterCard/Debit",
    "5200 0000 0000 1005",
    "5200 0000 0000 1021",
    "Visa/Prepaid",
    "4985 4683 9020 2984",
    "MasterCard/Prepaid",
    "5319 2679 7925 8985",
    "Cards to generate successful transaction with authentication",
    "Card Brand/Type",
    "Card",
    "Authorization key",
    "Visa/Credit",
    "4000 0000 0000 1091",
    "1234",
    "MasterCard/Debit",
    "5200 0000 0000 1096",
    "1234",
    "Cards to generate rejected transaction due to failed authentication",
    "Card Brande",
    "Card",
    "Authorization key",
    "Visa",
    "4456 5300 0000 1112",
    "1234",
    "MasterCard",
    "5200 0000 0000 1112",
    "1234",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Klap TAM and ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Klap",
    ".",
    "Introduce",
    "Name",
    "and",
    "Commerce ID",
    ".",
    "Click",
    "Connect"
  ],
  "https://docs.y.uno/docs/kushki-cards": [
    "Kushki - Cards",
    "Suggest Edits",
    "This page presents all information related to the Kushki connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document_type",
    "document_number",
    "telephone_number",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Colombia",
    "Ecuador",
    "Mexico",
    "Peru",
    "Currencies",
    ":",
    "CLP, COP, USD, MXN, PEN",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Minimum amount",
    ":",
    "Chile",
    ": 50 CLP",
    "Colombia",
    ": 500 COP",
    "Ecuador",
    ": 1.15 USD",
    "Mexico",
    ": 1 MXN",
    "Peru",
    ": 1 PEN",
    "Maximum amount",
    ":",
    "Dependent on cardholder's limit.",
    "TRX limit",
    ":",
    "Scalabale architecture to cover demand, limited by the capacity of the processors we work with.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Communicate with your TAM for more information on how to do it.",
    "TRX without CVV",
    ":",
    "Yes, communicate with Kushki to activate the functionality.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Chile",
    ": Supported.",
    "*Mastercard and Visa cards do not accept authorization and capture, partial capture, refunds or partial reimbursements.",
    "Colombia",
    ": Not Supported.",
    "Ecuador",
    ": Not Supported.",
    "Mexico",
    ": Supported.",
    "Peru",
    ": Supported.",
    "*Mastercard debit cards don't allow authorization and capture or partial capture.",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Chile",
    ": Supported",
    "Colombia",
    ": Not Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": Not Supported",
    "Peru",
    ": Supported",
    "Multiple captures",
    ":",
    "Chile",
    ": Supported",
    "Colombia",
    ": Not Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": Not Supported",
    "Peru",
    ": Not Supported",
    "Maximum time to capture an authorization",
    ":",
    "Chile",
    ": 7 days",
    "Colombia",
    ": Not Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": 9 days",
    "Peru",
    ": 7 days",
    "Captures over the amount of authorization",
    ":",
    "Chile",
    ": Not Supported",
    "Colombia",
    ": Not Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": Not Supported",
    "Peru",
    ": Supported",
    "Maximum amount",
    ":",
    "20% above the authorized amount in the supported countries.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Chile",
    ": Supported",
    "Colombia",
    ": Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": Supported",
    "Peru",
    ": Supported",
    "Multiple refunds",
    ":",
    "Chile",
    ": Supported",
    "Colombia",
    ": Supported",
    "Ecuador",
    ": Not Supported",
    "Mexico",
    ": Supported",
    "Peru",
    ": Supported",
    "Time to request refund",
    ":",
    "Chile",
    ": 3 months",
    "Colombia",
    ": 6 months",
    "Ecuador",
    ": 6 months",
    "Mexico",
    ": 30 days",
    "Peru",
    ": 6 months",
    "Time to process refund",
    ":",
    "7 days",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes. The structure for Colombia and Peru is different from Ecuador and Mexico.",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "There are installment plans for Ecuador and Mexico.",
    "Deferral date availability",
    ":",
    "Yes",
    "Grace period",
    ":",
    "Yes",
    "Minimum number of Installments (#months)",
    ":",
    "Chile",
    ": 1",
    "Colombia",
    ": 1",
    "Ecuador",
    ": According to an agreement between the merchant and Kushki. This can be checked on the merchant's dashboard.",
    "Mexico",
    ": According to an agreement between the merchant and Kushki. This can be checked on the merchant's dashboard.",
    "Peru",
    ": 1",
    "Maximum number of Installments (#months)",
    ":",
    "Chile",
    ": 48",
    "Colombia",
    ": 48",
    "Ecuador",
    ": According to an agreement between the merchant and Kushki. This can be checked on the merchant's dashboard.",
    "Mexico",
    ": According to an agreement between the merchant and Kushki. This can be checked on the merchant's dashboard.",
    "Peru",
    ": 48",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "90 days.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "72 working hours.",
    "Security",
    "E3DS v2",
    ":",
    "Yes, for Mexico and Peru.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Llave Pública, Llave Privada and Webhook Signature.",
    "Test cards",
    ":",
    "Card Numbers",
    ":",
    "Approved transaction: 5451951574925480",
    "Declined transaction in token solicitation: 4574441215190335",
    "Rejected transaction in payment request: 4349003000047015",
    "Invalid card: 4349008516656431",
    "Card with no funds: 4349001210846432",
    "Invalid CVV: 4349003243371321",
    "Blocked card: 4349001386781322",
    "Limitations/Specifications for testing",
    ":",
    "CVV and ZIP Code in test cards can have any value. Expiration date can be any date in the future.",
    "Kushki allows simulating an approved OTP validation. Use the following values depending on the currency that belongs to your credentials:",
    "CLP: 150",
    "COP: 555",
    "USD: 155",
    "PEN: 155",
    "MXN: 555",
    "*Any other OTP value will result in a declined validation.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to Kushki dashboard (there is a",
    "testing dashboard",
    "and",
    "production dashboard)",
    ".",
    "Go to Desarrolladores section.",
    "Go to Credenciales section.",
    "Copy the values under the",
    "Llave pública",
    "and",
    "Llave privada",
    "column.",
    "Click",
    "Connect",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Kushki",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Llave pública",
    ",",
    "Llave privada",
    ", and",
    "Webhook Signature",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Share the Merchant ID (ID de Comercio) with your TAM in order to setup yours webhook notifications. How to get your Merchant ID:",
    "Log in to Kushki dashboard (there is a",
    "testing dashboard",
    "and",
    "production dashboard)",
    "Go to Mi Comercio.",
    "Copy the value on the right top corner under the legend",
    "ID de Comercio",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Verification of the flow with the commerce using real transactions.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/mercado-pago-api": [
    "Mercado Pago - API",
    "Suggest Edits",
    "This page presents all information related to the Mercado Pago connection using the API as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Mexico",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, CLP, COP, MXN, PEN, UYU",
    "Minimum amount",
    ":",
    "Argentina",
    "Credit card Mastercard, American Express, Naranja, Argencard, Cabal, Cencosud, Nativa Mastercard, Tarjeta\n            Shopping: $ 1,00",
    "Credit card Visa: $ 2,00",
    "*Some credit cards don't accept installments of less than $ 1,00.",
    "Brazil",
    "Credit card: R$ 0,50 *",
    "MercadoPago card: R$ 0,50",
    "*Minimum value can vary with the number of installments chosen. Observe that some credit cards don't\n              accept installments of less than R$ 5,00.",
    "Chile",
    "Credit card: $ 1.000 *",
    "Debit card Webpay: $ 950",
    "Some credit cards don't accept installments of less than $ 1.000.",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 1.000",
    "Davivienda: $1.600",
    "Mexico",
    "Credit card Banamex, Bancomer, Amex and BanCoppel*:",
    "Less than 1 installment: $ 10.00",
    "More than 1 installment: $ 5.00",
    "Credit card Banorte, Santander, Ixe, HSBC, Mifel, Inbursa, BanRegio, BanBajío, Invex, Banco Ahorro Famsa,\n            Afirme and others:",
    "Between 3 and 6 installments: $ 300",
    "Between 9 and 18 installments: $ 500",
    "Debit card Visa and MasterCard: $ 5.00",
    "*BanCoppel only applies 1 installment.",
    "Peru",
    "Credit and debit card: S/ 1.00",
    "Uruguay",
    "Debit card: $ 1,00",
    "Credit card: $ 15,00",
    "Maximum amount",
    ":",
    "Argentina",
    "Credit card: $ 700.000,00",
    "Brazil",
    "Credit card: R$ 60.000,00",
    "MercadoPago card: R$ 60.000,00",
    "Chile",
    "Credit card: $ 7.000.000",
    "Debit card Webpay: $ 3.000.000",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 30.000.000",
    "Credit card Crédito Fácil Codensa: $ 5.000.000",
    "Davivienda: $ 150.000.000",
    "Mexico",
    "Credit card and debit card Visa and MasterCard: $ 200,000.00",
    "Peru",
    "Credit and debit card: S/ 30,000",
    "Uruguay",
    "Credit card and debit card: $ 300.000,00",
    "TRX Limit",
    ":",
    "No, but it is important to inform the estimated volumes of a new integration in order to warn about the\n            dimensioning to the tech teams, if necessary.",
    "Support of international BIN",
    ":",
    "Yes, supported for international credit and debit cards. The shopper pays the product's price on the sellers\n            currency, and the conversion is done by the financial institution responsible for issuing the payment (the\n            seller always recieves the financial transaction in the currency registered on their Mercado Pago account).",
    "Activation of functionality",
    ":",
    "There are many restrictions for international cards due to fraud prevention. Flexibilization for certain\n            seller can be requested. Nevertheless, payment approval, even with the flexible motor, is very low due to\n            bank rejection.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Supported in all countries.",
    "Purchase TRX in 2-Step",
    ":",
    "Supported in Argentina, Brasil, Mexico and Peru.",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Fully supported in Brazil, Mexico and Peru.",
    "Supported for Visa, Cabal, Master and American Express in Argentina.",
    "Not supported in other countries.",
    "Multiple captures",
    ":",
    "Not supported.",
    "Maximum time to capture an authorization",
    ":",
    "Argentina: 7 days.",
    "Brazil: 5 days.",
    "Mexico: 7 days.",
    "Peru: 22 days.",
    "Captures over the amount of authorization",
    ":",
    "Not supported.",
    "Refunds",
    "Refund support",
    ":",
    "Supported in all countries.",
    "Partial refunds",
    ":",
    "Supported in all countries.",
    "Multiple refunds",
    ":",
    "Supported in all countries.",
    "Time to request refund",
    ":",
    "Within 180 days of its approval date.",
    "Time to process refund",
    ":",
    "Argentina: 5-44 working days",
    "Brazil: 7-10 working days",
    "Chile: 10-13 working days",
    "Colombia: 10-13 working days",
    "Mexico: 3-31 working days",
    "Peru: 7-9 working days",
    "Uruguay: 5-44 working days",
    "Voids",
    "Void support",
    ":",
    "Supported in all countries.",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes, the API is payment_methods/installments.",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "This configuration is requested in the previous commercial agreement between MercadoPago and the Merchant.",
    "Deferral date availability",
    ":",
    "No. The days of liberation of the money can be negotiated with the merchant.",
    "Grace period",
    ":",
    "No",
    "Minimum number of installments (#months)",
    ":",
    "Depends on the configuration based on the commercial agreement between the merchant and Mercado Pago.\n              Regardless, each country has its \"standard\" configuration.",
    "Maximum number of installments (#months)",
    ":",
    "Depends on the configuration based on the commercial agreement between the merchant and Mercado Pago.\n              Regardless, each country has its \"standard\" configuration.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "In general, the buyer has up to 90 days, but there are exceptions.",
    "Endpoint for disputes",
    ":",
    "Yes, the chargeback API.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Argentina: 7 days",
    "Brazil: 10 days",
    "Chile: 7 days",
    "Colombia: 7 days",
    "Mexico: 7 days",
    "Peru: 7 days",
    "Uruguay: 7 days",
    "Security",
    "E3DS v2",
    ":",
    "Work in progress.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public Key and Access Token",
    "Requirements to create a sandbox payment",
    ":",
    "To create a payment on the sandbox environment you need to use an email ending with",
    "@test.user.com",
    ", such as",
    "yuno@testuser.com",
    ".",
    "Test cards Argentina",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Brazil",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031433215406351",
    "123",
    "11/25",
    "Visa",
    "4235647728025682",
    "123",
    "11/25",
    "American Express",
    "375365153556885",
    "1234",
    "11/25",
    "Test cards Chile",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5416752602582580",
    "123",
    "11/25",
    "Visa",
    "4168818844447115",
    "123",
    "11/25",
    "American Express",
    "375778174461804",
    "1234",
    "11/25",
    "Test cards Colombia",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5254133674403564",
    "123",
    "11/25",
    "Visa",
    "4013540682746260",
    "123",
    "11/25",
    "American Express",
    "374378187755283",
    "1234",
    "11/25",
    "Test cards Mexico",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Visa",
    "4075595716483764",
    "123",
    "11/25",
    "Test cards Peru",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4009175332806176",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Uruguay",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "Limitations/ Specifications for testing",
    ":",
    "To test different payment results, fill in the desired status in the cardholder's name:",
    "Payment Status",
    "Description",
    "APRO",
    "Approved payment",
    "OTHE",
    "Declined for general error",
    "CONT",
    "Pending payment",
    "CALL",
    "Declined with validation to authorize",
    "FUND",
    "Declined for insufficient amount",
    "SECU",
    "Declined for invalid security code",
    "EXPI",
    "Declined due to due date issue",
    "FORM",
    "Declined due to form error",
    "Identity document for APRO and OTHE payment status:",
    "Argentina: DNI of the test user",
    "Brazil: (CPF) 12345678909",
    "Chile: (otro) 123456789",
    "Colombia: 123456789",
    "Mexico: -",
    "Peru: 123456789",
    "Uruguay: (CI) 12345678 (otro) 123456789",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "They can be found on the Dashboard or in your Mercado Pago account by accessing Your Business > Settings >\n            Management and Administration > Credentials.",
    "Test credentials:",
    "Public Key",
    ",",
    "Access Token",
    "Production credentials:",
    "Public Key",
    ",",
    "Access Token",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Mercado Pago",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    "and",
    "Country",
    "Select",
    "Card",
    "as Payment Method",
    "Introduce the",
    "Access Token",
    "Configure",
    "Settings",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Create an application on the homepage of your Dashboard.",
    "With the application created, go to the Webhooks Notifications tab in your Dashboard and configure the\n                URLs of production and test from which notifications will be received.",
    "You will also be able to experiment and test if the indicated URL is receiving notifications\n                correctly, being able to verify the request, the response given by the server and the description of the\n                event.",
    "If you need to identify multiple accounts, at the end of the indicated URL you can indicate the\n                parameter",
    "?customer=(sellername)",
    "endpoint to identify the sellers.",
    "Next, select the events from which you will receive notifications in json format via an HTTP POST to\n                the URL specified above. An event is any type of update to the reported object, including status or\n                attribute changes.",
    "Setup while creating payments",
    ":",
    "In the notification_url field, indicate the URL from which notifications will be received.",
    "Implement the notifications receiver.",
    "If you want to receive notifications only from Webhook and not from IPN, you can add in the\n              notification_url the parameter source_news=webhook. For example:",
    "https://www.yourserver.com/notifications?source_news=webhooks",
    "Note",
    ": When you receive a notification on your platform, Mercado Pago waits for a response to validate\n            that you received it correctly. For that, you must return an",
    "HTTP STATUS 200 (OK)",
    "or",
    "201\n              (CREATED)",
    ". If this response is not sent, it will be understood that you have not received the\n            notification and a further attempt to send it will be made until you submit the response.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "If the merchant is part of a group of corporations that Mercado Pago follows-up punctually, a call to\n            validate the integration should be made, the test payments in Mercado Pago's system should ve revised,\n            thinking on a progressive roll-out method, etc.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/mercado-pago-checkout-pro": [
    "Mercado Pago - Checkout Pro",
    "Suggest Edits",
    "This page presents all information related to the Mercado Pago connection using the Checkout Pro as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "items.id",
    "items.title",
    "items.quantity",
    "items.unit_amount",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Mexico",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, CLP, COP, MXN, PEN, UYU",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Mercado Pago",
    "Digital Wallet",
    "Cash",
    "PSE",
    "Minimum amount",
    ":",
    "Argentina",
    "Credit card Mastercard, American Express, Naranja, Argencard, Cabal, Cencosud, Nativa Mastercard, Tarjeta\n            Shopping: $ 1,00",
    "Credit card Visa: $ 2,00 *",
    "Pago Fácil y Rapipago: $ 50,00",
    "Provincia NET Pagos: $ 1,00",
    "Carga Virtual: $ 2,00",
    "*Some credit cards don't accept installments of less than $ 1,00.",
    "Brazil",
    "Credit card: R$ 0,50 *",
    "Account balance: R$ 0,01",
    "MercadoPago card: R$ 0,50",
    "Issuance of bank slip: R$4,00",
    "PEC / Lottery Payment: R$4,00",
    "*The minimum value might vary according to the number of selected installments. See that some credit cards don’t accept installments below R$5,00",
    "Chile",
    "Credit card: $ 1.000 *",
    "Debit card Webpay: $ 950",
    "Account balance: $ 1.000",
    "Some credit cards don't accept installments of less than $ 1.000.",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 1.000",
    "Davivienda: $1.600",
    "Account balance: $1.000",
    "Efecty: $5.000",
    "PSE: $1.600",
    "Mexico",
    "Credit card Banamex, Bancomer, Amex and BanCoppel*:",
    "Less than 1 installment: $ 10.00",
    "More than 1 installment: $ 5.00",
    "Credit card Banorte, Santander, Ixe, HSBC, Mifel, Inbursa, BanRegio, BanBajío, Invex, Banco Ahorro Famsa,\n            Afirme and others:",
    "Between 3 and 6 installments: $ 300",
    "Between 9 and 18 installments: $ 500",
    "Debit card (Visa and MasterCard): $ 5.00",
    "Account balance: $ 5.00",
    "Deposit and Bank Transfer: $ 10.00",
    "OXXO: $ 10.00",
    "*BanCoppel only applies 1 installment.",
    "Peru",
    "Credit and Debit Card: S/ 1.00",
    "Account balance: S/ 1.00",
    "Cash payments or by online banking, via PagoEfectivo: S/ 5.00",
    "Uruguay",
    "Debit card: $ 1,00",
    "Credit card: $ 15,00",
    "Account balance: $ 15,00",
    "Cash in collection networks:",
    "Redpagos: $ 1,00",
    "Abitab: $ 50,00",
    "Maximum amount",
    ":",
    "Argentina",
    "Credit card: $ 700.000,00",
    "Pago Fácil y Rapipago: $ 200.000,00",
    "Provincia NET Pagos: $ 29.999,00",
    "Carga Virtual: $ 5.000,00",
    "Brazil",
    "Credit card: R$ 60.000,00",
    "Account balance: R$1 million",
    "MercadoPago card: R$ 60,000.00",
    "Issuance of bank slip: R$100,000.00",
    "PEC / Lottery Payment: R$2,000.00",
    "Chile",
    "Credit card: $ 7.000.000",
    "Debit card Webpay: $ 3.000.000",
    "Account balance: $ 7.000.000",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 30.000.000",
    "Credit card Crédito Fácil Codensa: $ 5.000.000",
    "Davivienda: $ 150.000.000",
    "Account balance: $ 5.000.000",
    "Efecty: $ 8.000.000",
    "Mexico",
    "Credit card and debit card Visa and MasterCard: $ 200,000.00",
    "Account balance: $ 200,000.00",
    "Deposit and bank transfer: $ 40,000.00",
    "OXXO: $ 10,000.00",
    "Peru",
    "Credit and debit card: S/ 30,000\n            Account balance: S/ 30,000\n            Cash payments or by online banking, via PagoEfectivo: S/ 10,000",
    "Uruguay",
    "Credit card and Debit Card: $ 300.000,00",
    "Account balance: $ 300.000,00",
    "Cash in collection networks:",
    "Redpagos: $ 150.000,00",
    "Abitab: $ 150.000,00",
    "TRX limit",
    ":",
    "No, but it is important to report the estimated volume of a new integration to warn the technical teams about the sizing, if necessary.",
    "Support of international BIN",
    ":",
    "Yes, compatible with international credit and debit cards. The shopper pays the price of the product in the seller's currency, and the conversion is made by the financial institution responsible for issuing the payment (the seller always receives the financial transaction in the currency registered in his/her Mercado Pago account).",
    "Activation of functionality",
    ":",
    "There are many restrictions for international cards due to fraud prevention. Flexibility can be requested for certain merchants. However, payment approval, even with the flex engine, is very low due to bank rejection.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Supported in all countries.",
    "Purchase TRX in 2-Step",
    ":",
    "Supported in Argentina, Brasil, Mexico and Peru.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Fully supported in Brazil, Mexico and Peru.",
    "Supported for Visa, Cabal, Master and American Express in Argentina.",
    "Not supported in other countries.",
    "Multiple captures",
    ":",
    "Not supported.",
    "Maximum time to capture an authorization",
    ":",
    "Argentina: 7 days.",
    "Brazil: 5 days.",
    "Mexico: 7 days.",
    "Peru: 22 days.",
    "Captures over the amount of authorization",
    ":",
    "Not supported.",
    "Refunds",
    "Refund support",
    ":",
    "Supported in all countries.",
    "Partial refunds",
    ":",
    "Supported in all countries.",
    "Multiple refunds",
    ":",
    "Supported in all countries.",
    "Time to request refund",
    ":",
    "Within 180 days of its approval date.",
    "Time to process refund",
    ":",
    "Argentina: 5-44 working days",
    "Brazil: 7-10 working days",
    "Chile: 10-13 working days",
    "Colombia: 10-13 working days",
    "Mexico: 3-31 working days",
    "Peru: 7-9 working days",
    "Uruguay: 5-44 working days",
    "Voids",
    "Void support",
    ":",
    "Supported in all countries.",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes, the API is payment_methods/installments.",
    "Possibility to choose who will be responsible for financing of installments",
    ":",
    "This configuration is requested in the previous commercial agreement between MercadoPago and the Merchant.",
    "Deferral date availability",
    ":",
    "No. The days of liberation of the money can be negotiated with the merchant.",
    "Grace period",
    ":",
    "No",
    "Minimum number of installments (#months)",
    ":",
    "It depends on the configuration based on the commercial agreement between the merchant and Mercado Pago. Independently, each country has its \"standard\" configuration.",
    "Maximum number of installments (#months)",
    ":",
    "It depends on the configuration based on the commercial agreement between the merchant and Mercado Pago. Independently, each country has its \"standard\" configuration.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "In general, the buyer has up to 90 days, but there are exceptions.",
    "Endpoint for disputes",
    ":",
    "Yes, the chargeback API.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Argentina: 7 days",
    "Brazil: 10 days",
    "Chile: 7 days",
    "Colombia: 7 days",
    "Mexico: 7 days",
    "Peru: 7 days",
    "Uruguay: 7 days",
    "Security",
    "E3DS v2",
    ":",
    "Work in progress.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public Key and Access Token",
    "Requirements to create a sandbox payment",
    ":",
    "To create a payment on the sandbox environment you need to use an email ending with",
    "@test.user.com",
    ", such as",
    "yuno@testuser.com",
    ".",
    "Test cards Argentina",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Brazil",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031433215406351",
    "123",
    "11/25",
    "Visa",
    "4235647728025682",
    "123",
    "11/25",
    "American Express",
    "375365153556885",
    "1234",
    "11/25",
    "Test cards Chile",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5416752602582580",
    "123",
    "11/25",
    "Visa",
    "4168818844447115",
    "123",
    "11/25",
    "American Express",
    "375778174461804",
    "1234",
    "11/25",
    "Test cards Colombia",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5254133674403564",
    "123",
    "11/25",
    "Visa",
    "4013540682746260",
    "123",
    "11/25",
    "American Express",
    "374378187755283",
    "1234",
    "11/25",
    "Test cards Mexico",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Visa",
    "4075595716483764",
    "123",
    "11/25",
    "Test cards Peru",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4009175332806176",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Uruguay",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "Limitations/ Specifications for testing",
    ":",
    "To test different payment results, fill in the desired status in the cardholder's name:",
    "Payment Status",
    "Description",
    "APRO",
    "Approved payment",
    "OTHE",
    "Declined for general error",
    "CONT",
    "Pending payment",
    "CALL",
    "Declined with validation to authorize",
    "FUND",
    "Declined for insufficient amount",
    "SECU",
    "Declined for invalid security code",
    "EXPI",
    "Declined due to due date issue",
    "FORM",
    "Declined due to form error",
    "Identity document for APRO and OTHE payment status:",
    "Argentina: DNI of the test user",
    "Brazil: (CPF) 12345678909",
    "Chile: (otro) 123456789",
    "Colombia: 123456789",
    "Mexico: -",
    "Peru: 123456789",
    "Uruguay: (CI) 12345678 (otro) 123456789",
    "Testing steps",
    "In order to make a payment using Mercado Pago Checkout Pro, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "The response body of the Create Payment request will provide a redirect URL (payment_method.payment_method_detail.bank_transfer.redirect_url) to the Mercado Pago service. In this service, use your Mercado Pago account to complete the transaction. The following image shows the page the user will be redirected to:",
    "For additional information, refer to the",
    "Mercado Pago documentation",
    ". However, as a summary, you need to follow the next steps:",
    "Create test users",
    "to use as a",
    "seller",
    "and as a",
    "customer",
    "while developing the integration. Mercado Pago uses these test users to replicate the production environment, and they can only interact with other test users. If you use a real account to pay a checkout created by a test user, you will receive an error message (",
    "invalid_users_involved",
    ").",
    "📘",
    "Tips",
    "Always check if you are logged in with a real account before completing a payment. You SHOULD NOT use a real account to perform tests.",
    "Add account money to the test user account while creating it.",
    "Get your API credentials",
    "and set them on Yuno´s dashboard while creating the payment method. If you do not have an application started yet, create one following to get your API keys.",
    "Both for enrollments with MercadoPago Wallet or payments with the Mercado Pago Checkout Pro, use the account money available for the test user or test cards provided by Mercado Pago to make a payment.",
    "After creating your Mercado Pago user and performing the payment, you can use the",
    "Retrieve Payment by ID",
    "to check the payment status. If everything goes correctly, the Retrieve Payment by ID response will have a",
    "SUCCEEDED",
    "payment.status and a",
    "APPROVED",
    "payment.sub_status.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "They can be found in the Dashboard or in your Mercado Pago account by accessing to Your Business > Settings >\n            Management and Administration > Credentials.",
    "Test credentials:",
    "Public Key",
    ",",
    "Access Token",
    "Production credentials:",
    "Public Key",
    ",",
    "Access Token",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Mercado Pago",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    "and",
    "Country",
    "Select",
    "Mercado Pago Checkout Pro",
    "as Payment Method",
    "Introduce the",
    "Access Token",
    "Configure",
    "Settings",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Create an application on the homepage of your Dashboard.",
    "With the application created, go to the Webhook Notifications tab in your Dashboard and configure the production and test URLs from which notifications will be received.",
    "You will also be able to experiment and test if the indicated URL is receiving notifications correctly, being able to check the request, the response given by the server and the description of the event.",
    "If you need to identify multiple accounts, at the end of the indicated URL you can indicate the\n                parameter",
    "?customer=(sellername)",
    "endpoint to identify the sellers.",
    "Next, select the events for which you will receive notifications in json format via HTTP POST to the URL specified above. An event is any type of update to the reported object, including state or attribute changes.",
    "Setup while creating payments",
    ":",
    "In the notification_url field, indicate the URL from which notifications will be received.",
    "Implement the notifications receiver.",
    "If you want to receive notifications only from Webhook and not from IPN, you can add in the\n              notification_url the parameter source_news=webhook. For example:",
    "https://www.yourserver.com/notifications?source_news=webhooks",
    "Note",
    ": When you receive a notification on your platform, Mercado Pago expects a response to validate that you received it correctly. To do so, it must return a HTTP STATUS 200 (OK) or 201 (CREADO). If this response is not sent, it will be understood that you have not received the notification and a further attempt to send it will be made until you submit the response.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "If the merchant is part of a group of corporations that Mercado Pago follows up on a timely basis, a call should be made to validate the integration, review test payments in the Mercado Pago system, think about a progressive implementation method, etc.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/mercado-pago-pse": [
    "Mercado Pago - PSE",
    "Suggest Edits",
    "This page presents all information related to the Mercado Pago connection using the PSE as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "document_type",
    "document_number",
    "IP",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1600 COP",
    "Maximum amount",
    ":",
    "Defined by bank",
    "TRX limit",
    ":",
    "No, but it is important to inform the estimated volumes of a new integration in order to warn about the dimensioning to the tech teams, if necessary.",
    "Purchase TRX",
    ":",
    "Allows your customers to pay with PSE using the savings or checking account from any Colombian bank.",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial sefunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Within 180 days of its approval date.",
    "Time to process refund",
    ":",
    "10 - 13 working days.",
    "Cancellation",
    "Cancellation support",
    ":",
    "Yes",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public Key and Access Token",
    "Requirements to create a sandbox payment",
    ":",
    "To create a payment on the sandbox environment you need to use an email ending with",
    "@test.user.com",
    ", such as",
    "yuno@testuser.com",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "They can be found on the Dashboard or in your Mercado Pago account by accessing Your Business > Settings > Management and Administration > Credentials.",
    "Test credentials:",
    "Public Key",
    ",",
    "Access Token",
    "Production credentials:",
    "Public Key",
    ",",
    "Access Token",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Create an application on the homepage of your Dashboard.",
    "With the application created, go to the Webhooks Notifications tab in your Dashboard and configure the\n                URLs of production and test from which notifications will be received.",
    "You will also be able to experiment and test if the indicated URL is receiving notifications\n                correctly, being able to verify the request, the response given by the server and the description of the\n                event.",
    "If you need to identify multiple accounts, at the end of the indicated URL you can indicate the\n                parameter",
    "?customer=(sellername)",
    "endpoint to identify the sellers.",
    "Next, select the events from which you will receive notifications in json format via an HTTP POST to\n                the URL specified above. An event is any type of update to the reported object, including status or\n                attribute changes. See the events that can be configured in the table below.",
    "Setup while creating payments",
    ":",
    "In the notification_url field, indicate the URL from which notifications will be received.",
    "Implement the notifications receiver.",
    "If you want to receive notifications only from Webhook and not from IPN, you can add in the\n              notification_url the parameter source_news=webhook. For example:",
    "https://www.yourserver.com/notifications?source_news=webhooks",
    "Note",
    ": When you receive a notification on your platform, Mercado Pago waits for a response to validate\n            that you received it correctly. For that, you must return an",
    "HTTP STATUS 200 (OK)",
    "or",
    "201\n              (CREATED)",
    ". If this response is not sent, it will be understood that you have not received the\n            notification and a further attempt to send it will be made until you submit the response.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "If the merchant is part of a group of corporations that Mercado Pago follows-up punctually, a call to\n            validate the integration should be made, the test payments in Mercado Pago's system should ve revised,\n            thinking on a progressive roll-out method, etc.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/mercado-pago-wallet": [
    "Mercado Pago - Wallet Connect",
    "Suggest Edits",
    "This page presents all information related to the Mercado Pago connection using Wallet Connect as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Mexico",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, CLP, COP, MXN, PEN, UYU",
    "Minimum amount",
    ":",
    "Argentina",
    "Credit card Mastercard, American Express, Naranja, Argencard, Cabal, Cencosud, Nativa Mastercard, Tarjeta\n            Shopping: $ 1,00",
    "Credit card Visa: $ 2,00",
    "*Some credit cards don't accept installments of less than $ 1,00.",
    "Brazil",
    "Credit card: R$ 0,50 *",
    "MercadoPago card: R$ 0,50",
    "*Minimum value can vary with the number of installments chosen. Observe that some credit cards don't\n              accept installments of less than R$ 5,00.",
    "Chile",
    "Credit card: $ 1.000 *",
    "Debit card Webpay: $ 950",
    "Some credit cards don't accept installments of less than $ 1.000.",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 1.000",
    "Davivienda: $1.600",
    "Mexico",
    "Credit card Banamex, Bancomer, Amex and BanCoppel*:",
    "Less than 1 installment: $ 10.00",
    "More than 1 installment: $ 5.00",
    "Credit card Banorte, Santander, Ixe, HSBC, Mifel, Inbursa, BanRegio, BanBajío, Invex, Banco Ahorro Famsa,\n            Afirme and others:",
    "Between 3 and 6 installments: $ 300",
    "Between 9 and 18 installments: $ 500",
    "Debit card (Visa and MasterCard): $ 5.00",
    "*BanCoppel only applies 1 installment.",
    "Peru",
    "Credit and Debit Card: S/ 1.00",
    "Uruguay",
    "Debit card: $ 1,00",
    "Credit card: $ 15,00",
    "Maximum amount",
    ":",
    "Argentina",
    "Credit card: $ 700.000,00",
    "Brazil",
    "Credit card: R$ 60.000,00",
    "MercadoPago card: R$ 60.000,00",
    "Chile",
    "Credit card: $ 7.000.000",
    "Debit card Webpay: $ 3.000.000",
    "Colombia",
    "Credit card Visa, Mastercard, American Express, Diners: $ 30.000.000",
    "Credit card Crédito Fácil Codensa: $ 5.000.000",
    "Davivienda: $ 150.000.000",
    "Mexico",
    "Credit card and Debit Card (Visa and MasterCard): $ 200,000.00",
    "Peru",
    "Credit and Debit Card: S/ 30,000",
    "Uruguay",
    "Credit card and Debit Card: $ 300.000,00",
    "TRX limit",
    ":",
    "No, but it is important to inform the estimated volumes of a new integration in order to warn about the\n            dimensioning to the tech teams, if necessary.",
    "Support of international BIN",
    ":",
    "Yes, supported for international credit and debit cards. The shopper pays the product's price on the sellers\n            currency, and the conversion is done by the financial institution responsible for issuing the payment (the\n            seller always recieves the financial transaction in the currency registered on their Mercado Pago account).",
    "Activation of functionality",
    ":",
    "There are many restrictions for international cards due to fraud prevention. Flexibilization for certain\n            seller can be requested. Nevertheless, payment approval, even with the flexible motor, is very low due to\n            bank rejection.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Supported in all countries.",
    "Purchase TRX in 2-Step",
    ":",
    "Supported in Argentina, Brasil, Mexico and Peru.",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Supported in all countries.",
    "Partial refunds",
    ":",
    "Supported in all countries.",
    "Multiple refunds",
    ":",
    "Supported in all countries.",
    "Time to request refund",
    ":",
    "Within 180 days of its approval date.",
    "Time to process refund",
    ":",
    "Argentina: 5-44 working days",
    "Brazil: 7-10 working days",
    "Chile: 10-13 working days",
    "Colombia: 10-13 working days",
    "Mexico: 3-31 working days",
    "Peru: 7-9 working days",
    "Uruguay: 5-44 working days",
    "Voids",
    "Void support",
    ":",
    "Supported in all countries.",
    "Void to Authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "In general, the buyer has up to 90 days, but there are exceptions.",
    "Endpoint for disputes",
    ":",
    "Yes, the chargeback API.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Argentina: 7 days",
    "Brazil: 10 days",
    "Chile: 7 days",
    "Colombia: 7 days",
    "Mexico: 7 days",
    "Peru: 7 days",
    "Uruguay: 7 days",
    "Security",
    "E3DS v2",
    ":",
    "Work in progress.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public Key and Access Token",
    "Requirements to create a sandbox payment",
    ":",
    "To create a payment on the sandbox environment you need to use an email ending with",
    "@test.user.com",
    ", such as",
    "yuno@testuser.com",
    ".",
    "Test cards Argentina",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Brazil",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031433215406351",
    "123",
    "11/25",
    "Visa",
    "4235647728025682",
    "123",
    "11/25",
    "American Express",
    "375365153556885",
    "1234",
    "11/25",
    "Test cards Chile",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5416752602582580",
    "123",
    "11/25",
    "Visa",
    "4168818844447115",
    "123",
    "11/25",
    "American Express",
    "375778174461804",
    "1234",
    "11/25",
    "Test cards Colombia",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5254133674403564",
    "123",
    "11/25",
    "Visa",
    "4013540682746260",
    "123",
    "11/25",
    "American Express",
    "374378187755283",
    "1234",
    "11/25",
    "Test cards Mexico",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Visa",
    "4075595716483764",
    "123",
    "11/25",
    "Test cards Peru",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4009175332806176",
    "123",
    "11/25",
    "American Express",
    "371180303257522",
    "1234",
    "11/25",
    "Test cards Uruguay",
    ":",
    "Card",
    "Number",
    "Security code",
    "Expiration date",
    "Mastercard",
    "5031755734530604",
    "123",
    "11/25",
    "Visa",
    "4509953566233704",
    "123",
    "11/25",
    "Limitations/ Specifications for testing",
    ":",
    "To test different payment results, fill in the desired status in the cardholder's name:",
    "Payment Status",
    "Description",
    "APRO",
    "Approved payment",
    "OTHE",
    "Declined for general error",
    "CONT",
    "Pending payment",
    "CALL",
    "Declined with validation to authorize",
    "FUND",
    "Declined for insufficient amount",
    "SECU",
    "Declined for invalid security code",
    "EXPI",
    "Declined due to due date issue",
    "FORM",
    "Declined due to form error",
    "Identity document for APRO and OTHE payment status:",
    "Argentina: DNI of the test user",
    "Brazil: (CPF) 12345678909",
    "Chile: (otro) 123456789",
    "Colombia: 123456789",
    "Mexico: -",
    "Peru: 123456789",
    "Uruguay: (CI) 12345678 (otro) 123456789",
    "Testing steps",
    "The Mercado Pago Wallet Connect works as an enrolled payment method. Therefore, you will need to start enrolling it before making a payment.",
    "To make a payment using the Mercado Pago Wallet Connect, you should follow the steps:",
    "Create Customer",
    "Create Customer Session",
    "Retrieve Payment Methods Available",
    "(Optional)",
    "Enroll Payment Method",
    "Retrieve Payment Method by Customer Session",
    "The response provides a redirect URL (provider.redirect.init_url), so the user can enroll in the payment method using the Mercado Pago service.",
    "After the login, the user will be requested to connect a new payment method or use cash.",
    "The user should add credit card info to add a secondary payment method.",
    "By selecting the cash option, the connection is performed directly.",
    "For additional information, refer to the",
    "Mercado Pago documentation",
    ". However, as a summary, you basically need to follow the next steps:",
    "Create test users",
    "to use as a",
    "seller",
    "and as a",
    "customer",
    "while developing the integration. Mercado Pago uses these test users to replicate the production environment, and they can only interact with other test users. If you use a real account to pay a checkout created by a test user, you will receive an error message (invalid_users_involved).",
    "Get your API credentials",
    "and set them on Yuno´s dashboard while creating the payment method. If you do not have an application started yet, create one following to get your API keys.",
    "Both for enrollments with MercadoPago Wallet Connect or payments with the Mercado Pago Checkout Pro, use the account money available for the test user or test cards provided by Mercado Pago to make a payment.",
    "Tips",
    "Always check if you are logged in with a real account before completing a payment. You SHOULD NOT use a real account to perform tests.",
    "Add account money to the test user account while creating it.",
    "Create Checkout Session",
    "Retrieve Payment Methods Available for Checkout",
    "to get the",
    "vaulted_token",
    "related to the payment enrolled before.",
    "Create Payment",
    "using the",
    "vaulted_token",
    "from the last step.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "They can be found on the Dashboard or in your Mercado Pago account by accessing Your Business > Settings >\n            Management and Administration > Credentials.",
    "Test credentials:",
    "Public Key",
    ",",
    "Access Token",
    "Production credentials:",
    "Public Key",
    ",",
    "Access Token",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Mercado Pago",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    "and",
    "Country",
    "Select",
    "Mercado Pago Wallet Connect",
    "as Payment Method",
    "Introduce the",
    "Access Token",
    "Configure",
    "Settings",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Create an application on the homepage of your Dashboard.",
    "With the application created, go to the Webhooks Notifications tab in your Dashboard and configure the\n                URLs of production and test from which notifications will be received.",
    "You will also be able to experiment and test if the indicated URL is receiving notifications\n                correctly, being able to verify the request, the response given by the server and the description of the\n                event.",
    "If you need to identify multiple accounts, at the end of the indicated URL you can indicate the\n                parameter",
    "?customer=(sellername)",
    "endpoint to identify the sellers.",
    "Next, select the events from which you will receive notifications in json format via an HTTP POST to\n                the URL specified above. An event is any type of update to the reported object, including status or\n                attribute changes. See the events that can be configured in the table below.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "If the merchant is part of a group of corporations that Mercado Pago follows-up punctually, a call to\n            validate the integration should be made, the test payments in Mercado Pago's system should ve revised,\n            thinking on a progressive roll-out method, etc.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nupay-pix": [
    "Nupay - PIX",
    "Suggest Edits",
    "This page presents all information related to the Nupay connection using PIX as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name\n        \t\temail\n        \t\tdocument_type",
    "document_number",
    "telephone_number",
    "telephone_country_code",
    "items.id",
    "items.title",
    "items.quantity",
    "items.unit_price",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Minimum amount",
    ":",
    "R$ 0.01",
    "Maximum amount",
    ":",
    "There is no limit for the day (between 6 am and 8 pm or 10 pm), and for the night (between 8pm or 10pm to 6am), the limit is R$ 1.000. Each institution can set its Pix limit as a security and anti-fraud mechanism. The only rule is that this limit cannot be lower than the TED limit or a debit card transaction limit, depending on each case.",
    "Purchase TRX",
    ":",
    "Shoppers can pay with Pix when shopping online.",
    "Support for recurrency",
    ":",
    "No",
    "Webhoorks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "A refund can be sent at any moment, there is no maximum deadline.",
    "Time to process refund",
    ":",
    "If there are sufficient funds in the merchant account, the refund will be done instantly.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "API key and API Token.",
    "Limitations/Specifications for testing",
    ":",
    "As the system processes requests asynchronously, all valid payment requests return the status PROCESSING.",
    "In the sandbox environment, the order list gets an extra column called",
    "Simulation",
    ".",
    "When the payment request is in WAITING_PAYMENT_METHOD status, an",
    "Approve",
    "button appears to simulate payment via QRCode reading, accessing AppLink or by Pix",
    "Copia e Cola",
    ".",
    "Test steps",
    "To make a payment using PIX, you should follow the steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "Instead of a redirect URL, the Create Payment response provides a QR code image (payment_method.payment_method_detail.bank_transfer.provider_image). After creating the order, you must complete and test the payment and access the NuPay sandbox",
    "dashboard",
    "with your Nubank credentials. Once logged in, you can approve the transaction in the 'Activities' section.",
    "After approving the payment, its status will change to",
    "completo",
    "on the NuPay sandbox dashboard. You can check the payment status using the",
    "Retrieve Payment by ID",
    ". If the payment were approved, the Retrieve Payment by ID response would provide the status",
    "SUCCEEDED",
    ", and sub_status",
    "APPROVED",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "These credentials will be provided during the onboarding process, once both parties are able to initiate integration and must be sent on all requests. Credentials are specific for each checkout environment.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "NuPay",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Token",
    "and",
    "Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Through the field callbackUrl during the creation of the order or refund.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Nu has a tactical documentation that brings some scenarios that must be validated before going Live and also a test period where our internal team helps to cover those scenarios to guarantee that everything works fine.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nupay-wallet": [
    "Nupay - Wallet",
    "Suggest Edits",
    "This page presents all information related to the Nupay connection using NuPay Wallet as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "-",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Minimum amount",
    ":",
    "No",
    "Maximum amount",
    ":",
    "The limit of the amount for purchases through NuPay for Business is equal to the account balance that the end customer of the partner store has with the Financial Institution chosen at the time of purchase.",
    "TRX without CVV",
    ":",
    "No",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "A refund can be sent at any moment, there is no maximum deadline.",
    "Time to process refund",
    ":",
    "If there are sufficient funds in the merchant account, the refund will be done instantly.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Conditions or restrictions",
    ":",
    "For the installment plan with interest:",
    "The fee for the merchant is fixed at the same value as the maximum interest-free fee.",
    "The minimum number of interest-free installments is the same as that offered by the Credit Card.",
    "Settlement always on D+1.",
    "No additional implementation effort.",
    "Interest rate customized to the customer's profile.",
    "Minimum number of installments",
    ":",
    "1",
    "Maximum number of installments",
    ":",
    "The NuPay payment method allows the buyer to pay in up to 24 installments without interest. However, each store that offers the solution is free to limit the number of installments, in other words, the store can offer a number of installments below the maximum limit.",
    "With the installment plan with interest the customer will have to use the extra limit generated through NuPay and will be able to pay in installments up to 24 times with interest charges. This way the customer has the possibility to receive additional limits far beyond what is possible with a credit card, besides the debit option having zero cost for those who sell.",
    "Chargebacks",
    "NuPay does not have chargebacks for fraud since the payment process occurs inside Nu's app, and the whole security is their responsibility. If the customer contacts Nu regarding commercial disagreements, we incentivize them to solve it directly with the store.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "API key and API Token.",
    "Limitations/Specifications for testing",
    ":",
    "As the system processes requests asynchronously, all valid payment requests return the status PROCESSING.",
    "In the sandbox environment, the order list gets an extra column called",
    "Simulation",
    ".",
    "When the payment request is in WAITING_PAYMENT_METHOD status, an",
    "Approve",
    "button appears to simulate payment via QRCode reading, accessing AppLink or by Pix",
    "Copia e Cola",
    ".",
    "Test steps",
    "To make a payment using NuPay Wallet, you should follow the steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "The Create Payment response provides a redirect URL (payment_method.payment_method_detail.bank_transfer.redirect_url), redirecting the user to a NuBank page that provides a QR code to complete the payment:",
    "After creating the order, you must complete and test the payment and access the NuPay sandbox",
    "dashboard",
    "with your Nubank credentials. Once logged in, you can approve the transaction in the 'Activities' section:",
    "After approving the payment, its status will change to \"completo\" on the NuPay sandbox dashboard. You can check the payment status using the",
    "Retrieve Payment by ID",
    ". If the payment were approved, the Retrieve Payment by ID response would provide the status",
    "SUCCEEDED",
    ", and sub_status",
    "APPROVED",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "These credentials will be provided during the onboarding process, once both parties are able to initiate integration and must be sent on all requests. Credentials are specific for each checkout environment.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "NuPay",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Token",
    "and",
    "Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Through the field callbackUrl during the creation of the order or refund.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Nu has a tactical documentation that brings some scenarios that must be validated before going Live and also a test period where Nu's internal team helps to cover those scenarios to guarantee that everything works fine.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nuvei-oxxo": [
    "Nuvei - OXXO Pay",
    "Suggest Edits",
    "This page presents all information related to the Nuvei connection using Cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "telephone",
    "country",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID",
    ": necessary to authenticate your request.",
    "Site ID",
    ": necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Nuvei dashboard",
    ".",
    "Navigate to",
    "Settings",
    ".",
    "Select",
    "My Integration Settings",
    ".",
    "Copy your",
    "Merchant ID",
    "and",
    "Site ID",
    ".",
    "Select",
    "Reveal",
    "and get your",
    "Secret Key",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Nuvei",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant ID",
    ",",
    "Site ID",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/nuvei-spei": [
    "Nuvei - SPEI",
    "Suggest Edits",
    "This page presents all information related to the Nuvei connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "telephone",
    "country",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID",
    ": necessary to authenticate your request.",
    "Site ID",
    ": necessary to authenticate your request.",
    "Secret key",
    ": Use for the creation of the Authorization.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Nuvei dashboard",
    ".",
    "Navigate to",
    "Settings",
    ".",
    "Select",
    "My Integration Settings",
    ".",
    "Copy your",
    "Merchant ID",
    "and",
    "Site ID",
    ".",
    "Select",
    "Reveal",
    "and get your",
    "Secret Key",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Nuvei",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant ID",
    ",",
    "Site ID",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-cards": [
    "Paymentez - Cards",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "<",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Nicaragua",
    "Panama",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, CLP, COP, CRC, USD, GTQ, HNL, MXN, NIO, PEN, UYU.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Can be configured, must be informed to Nuvei when iniciating the integration process.",
    "Maximum amount",
    ":",
    "In order to create a fraud filter a maximum amount can be stablished, must be informed to Nuvei when initiating the integration process.",
    "TRX limit",
    ":",
    "No",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "The acceptance of these BINS depends if the card is enabled for international purchases.",
    "TRX without CVV",
    ":",
    "Yes (depends on affiliation).",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Only for Cielo (BRL), Prosa (MXN) Procesos and Visanet (PEN).",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Countries where captures are available",
    ":",
    "Captures are available in:",
    "Brazil, with Cielo using BRL.",
    "Mexico, with Prosa using MXN.",
    "Peru, with Procesos and Visanet using PEN.",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "10 days.",
    "Captures over the amount of authorization",
    ":",
    "Yes, only supported for Prosa (MXN).",
    "Maximum amount",
    ":",
    "No limit.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Supported for Cielo (BRL), Prosa (MXN), Credibanco and Redeban (COP).",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "Colombia: 1 year.",
    "Mexico: 6 months.",
    "Peru: 6 months.",
    "Chile: 6 months.",
    "Argentina: 6 months.",
    "Ecuador: Same day.",
    "Time to process refund",
    ":",
    "Depends on the country, the origin of the refund (anullment, adjustment, cancelation), if it is partial or total and the compensation periods.",
    "Voids",
    "Void support",
    ":",
    "Only supported for Prosa (MXN).",
    "Void to authorization",
    ":",
    "No",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Supported for Colombia, Mexico, Brazil, Peru, Chile and Ecuador.",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "Depends on the affiliation between the bank and the merchant.",
    "Conditions or restrictions",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "Supported for Ecuador and Mexico.",
    "Grace period",
    ":",
    "Supported for Ecuador (Medianet) and Mexico. Established by the bank and the merchant.",
    "Minimum number of Installments (#months)",
    ":",
    "1 for Colombia, Peru, Brazil, Chile and Mexico.",
    "Maximum number of Installments (#months)",
    ":",
    "It is an agreement between the merchant and the acquiring bank, but generally:",
    "Colombia: 36.",
    "Peru: Izipay: 36, Visanet/Niubiz: 12.",
    "Brazil: 12.",
    "Chile: 12.",
    "Mexico: Generally 24, can go up to 36 in certain cases.",
    "Ecuador: 36",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "180 days since the purchase.",
    "Endpoint for disputes",
    ":",
    "No, everything is handled via e-mail:",
    "chargebacks-LATAM@nuvei.com",
    ".",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Colombia: 2 working days.",
    "Peru: 2 working days.",
    "Brazil: 5 working days.",
    "Chile: 5 working days.",
    "Mexico: 3 working days.",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key and Application Code.",
    "Test cards",
    ":",
    "Card",
    "Return Code",
    "Charge succeeds",
    "4111111111111111",
    "valid",
    "Charge succeeds",
    "36417002140808",
    "valid",
    "Charge succeeds",
    "5119159076977991",
    "review",
    "Charge is under Review",
    "370236553676505",
    "review",
    "Charge is under Review",
    "4242424242424242",
    "rejected",
    "Not Authorized",
    "347763907473248",
    "rejected",
    "Not Authorized",
    "4520121813132351",
    "rejected",
    "Rejected by Fraud System",
    "378196561987405",
    "rejected",
    "Rejected by Fraud System",
    "375953548754701",
    "rejected",
    "Card in black list",
    "376337093362277",
    "rejected",
    "Card in black list",
    "Limitations/ Specifications for testing",
    ":",
    "For a card not listed, the system will leave the card as valid. Once you add a valid card in the platform you can prove the debit using a specific description as follow:",
    "order.description",
    "Result",
    "Approved transaction",
    "status = success, status_detail = 3",
    "Denied transaction",
    "status = failure, status_detail = 9",
    "Reviewed transaction",
    "status = pending, status_detail = 1",
    "Rejected by fraud system transaction",
    "status = failure, status_detail = 11",
    "Card in black list",
    "status = failure, status_detail = 12",
    "You can use either the test cards or the description to prove, but not both.",
    "In order to do tests in staging environment, the amount of the add credit card is fixed to:",
    "COP: 256",
    "CRC: 256",
    "CLP: 256",
    "USD: 2.56",
    "BRL: 2.56",
    "PEN: 2.56",
    "SGD: 2.56",
    "MXN: 25.6",
    "HNL: 25.6",
    "NIO: 25.6",
    "UYU: 25.6",
    "ARS: 128",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to Nuvei Team integrations@paymentez.com for a Development/Sandbox account.",
    "Nuvei will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei admin system you will see your transactions, application settings (including application URLs and",
    "Application Key",
    ") and so more.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei's staff.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-daviplata": [
    "Paymentez - Daviplata",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "$1,000.00",
    "Maximum amount",
    ":",
    "$8,000,000",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-linktopay": [
    "Paymentez - LinkToPay",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using LinkToPay as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "payment_description.",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Nicaragua",
    "Panama",
    "Peru",
    "Uruguay",
    "Currencies",
    ":",
    "ARS, BRL, CLP, COP, CRC, USD, GTQ, HNL, MXN, NIO, PEN, UYU.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "BankTransfer",
    "Cash",
    "Colsubsidio",
    "EWallet",
    "Qr",
    "Pix",
    "Rappi",
    "Minimum amount",
    ":",
    "Can be configured, nevertheless, each APM provider can have a general limit or a limit configured by afilliation.",
    "Maximum amount",
    ":",
    "Can be configured, nevertheless, each APM provider can have a general limit or a limit configured by afilliation.",
    "TRX limit",
    ":",
    "No",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "The acceptance of these BINS depends if the card is enabled for international purchases.",
    "TRX without CVV",
    ":",
    "No",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Only for Cielo (BRL), Prosa (MXN) Procesos and Visanet (PEN).",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Only for Cielo (BRL), Prosa (MXN) Procesos and Visanet (PEN).",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "10 days.",
    "Captures over the amount of authorization",
    ":",
    "Yes, only supported for Prosa (MXN).",
    "Maximum amount",
    ":",
    "No limit.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Supported for Cielo (BRL), Prosa (MXN), Credibanco and Redeban (COP).",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "Colombia: 1 year.",
    "Mexico: 6 months.",
    "Peru: 6 months.",
    "Chile: 6 months.",
    "Argentina: 6 months.",
    "Ecuador: Same day.",
    "Time to process refund",
    ":",
    "Depends on the country, the origin of the refund (anullment, adjustment, cancelation), if it is partial or total and the compensation periods.",
    "Voids",
    "Void support",
    ":",
    "Only supported for Prosa (MXN).",
    "Void to authorization",
    ":",
    "No",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Supported for Colombia, Mexico, Brazil, Peru, Chile and Ecuador.",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "Depends on the affiliation between the bank and the merchant.",
    "Conditions or restrictions",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "Supported for Ecuador and Mexico.",
    "Grace period",
    ":",
    "Supported for Ecuador (Medianet) and Mexico. Established by the bank and the merchant.",
    "Minimum number of Installments (#months)",
    ":",
    "1 for Colombia, Peru, Brazil, Chile and Mexico.",
    "Maximum number of Installments (#months)",
    ":",
    "It is an agreement between the merchant and the acquiring bank, but generally:",
    "Colombia: 36.",
    "Peru: Izipay: 36, Visanet/Niubiz: 12.",
    "Brazil: 12.",
    "Chile: 12.",
    "Mexico: Generally 24, can go up to 36 in certain cases.",
    "Ecuador: 36",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "180 days since the purchase.",
    "Endpoint for disputes",
    ":",
    "No, everything is handled via e-mail:",
    "chargebacks-LATAM@nuvei.com",
    ".",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Colombia: 2 working days.",
    "Peru: 2 working days.",
    "Brazil: 5 working days.",
    "Chile: 5 working days.",
    "Mexico: 3 working days.",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key and Application Code.",
    "Test cards",
    ":",
    "Card",
    "Return Code",
    "Charge succeeds",
    "4111111111111111",
    "valid",
    "Charge succeeds",
    "36417002140808",
    "valid",
    "Charge succeeds",
    "5119159076977991",
    "review",
    "Charge is under Review",
    "370236553676505",
    "review",
    "Charge is under Review",
    "4242424242424242",
    "rejected",
    "Not Authorized",
    "347763907473248",
    "rejected",
    "Not Authorized",
    "4520121813132351",
    "rejected",
    "Rejected by Fraud System",
    "378196561987405",
    "rejected",
    "Rejected by Fraud System",
    "375953548754701",
    "rejected",
    "Card in black list",
    "376337093362277",
    "rejected",
    "Card in black list",
    "Limitations/ Specifications for testing",
    ":",
    "For a card not listed, the system will leave the card as valid. Once you add a valid card in the platform you can prove the debit using a specific description as follow:",
    "order.description",
    "Result",
    "Approved transaction",
    "status = success, status_detail = 3",
    "Denied transaction",
    "status = failure, status_detail = 9",
    "Reviewed transaction",
    "status = pending, status_detail = 1",
    "Rejected by fraud system transaction",
    "status = failure, status_detail = 11",
    "Card in black list",
    "status = failure, status_detail = 12",
    "You can use either the test cards or the description to prove, but not both.",
    "In order to do tests in staging environment, the amount of the add credit card is fixed to:",
    "COP: 256",
    "CRC: 256",
    "CLP: 256",
    "USD: 2.56",
    "BRL: 2.56",
    "PEN: 2.56",
    "SGD: 2.56",
    "MXN: 25.6",
    "HNL: 25.6",
    "NIO: 25.6",
    "UYU: 25.6",
    "ARS: 128",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-nequi": [
    "Paymentez - Nequi",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using Wallet as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "100 COP",
    "Type of integration",
    ":",
    "Redirect",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-paycash": [
    "Paymentez - Paycash",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "1 MXN",
    "Type of integration",
    ":",
    "Direct, the payment reference is drawed in our SDK.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-pse": [
    "Paymentez - PSE",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "document",
    "document type",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "Can be configured, nevertheless, each APM provider can have a general limit or a limit configured by afilliation.",
    "Type of integration",
    ":",
    "Redirection to the Bank Page",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-sencillito": [
    "Paymentez - Sencillito",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using cash as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Cash",
    "Minimum amount",
    ":",
    "$50.00",
    "Type of integration",
    ":",
    "Direct",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paymentez-webpay": [
    "Paymentez - Webpay",
    "Suggest Edits",
    "This page presents all information related to the Paymentez (Nuvei company) connection using WebPay as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Maximum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, activated in merchant level.",
    "TRX without CVV",
    ":",
    "Yes, must be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes. *Ask Paymentez for this configuration.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes. *Ask Paymentez for this configuration.",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "Depends on BIN.",
    "Maximum number of Installments (#months)",
    ":",
    "Depends on BIN.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Endpoint for disputes",
    ":",
    "No",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Application Key",
    "Application Code",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To start the integration you will need to request to the Nuvei/Paymentez Team, integrations@paymentez.com, a Development/Sandbox account.",
    "Nuvei/Paymentez will create an Application and give you the",
    "Application Code",
    ". From now this will be the identifier for your Application in the whole integration. In the Nuvei/Paymentez admin system you will find your transactions, application settings, including application URLs and",
    "Application Key",
    ", and other configurations.",
    "Configurations have to be done for the application in development environment and production environment, URLs and application key are different for every environment.",
    "Development environment will be always available for tests even after launching your application to production.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Paymentez",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Country",
    ",",
    "Application Key",
    "and",
    "Application Code",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Provide URL to Nuvei/Paymentez's staff.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/paypal-smart-button": [
    "PayPal - Smart Button",
    "Suggest Edits",
    "This page presents all information related to the PayPal connection using Smart Button as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "General information",
    "Countries",
    ":",
    "Available in over",
    "200 countries",
    "Currencies",
    ":",
    "AUD, BRL, CAD, CNY, CZK, DKK, EUR, HKD, HUF, ILS, JPY, MYR, MXN, TWD, NZD, NOK, PHP, PLN, GBP, RUB, SGD, SEK, CHF, THB, USD.",
    "Minimum amount",
    ":",
    "Debit 1 USD.",
    "Maximum amount",
    ":",
    "Debit 5000 USD",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "BNPL",
    "TRX without CVV",
    ":",
    "No",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Yes, you can complete partial captures during a single authorization period. For PayPal payment authorizations, you must enable this feature on your PayPal account.",
    "Maximum time to capture an authorization",
    ":",
    "While an authorization places a hold on the funds and is valid for 29 days, we recommend that you capture the funds within the three-day honor period.",
    "Captures over the amount of authorization",
    ":",
    "Yes",
    "Maximum amount",
    ":",
    "You can reauthorize it for up to 115% of the originally authorized amount or an increase of $75 USD (whichever is the lesser amount).",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days after transaction date.",
    "Time to process refund",
    ":",
    "5 business days.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "180 days or more after an order’s been placed.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "10 days.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Client ID, Secret.",
    "Test cards",
    ":",
    "For testing cards in PayPal Sandbox use the",
    "Credit Card Generator for Testing",
    ".",
    "Limitations/ Specifications for testing",
    ":",
    "To simulate a successful credit card capture, you can test using a test card number.",
    "To simulate credit card failures, pass a rejection trigger in the First Name or Name on Card field in your existing advanced credit and debit card payment integration. You must use a Visa test card number. All failure test simulations show that the card is globally unavailable (AVS) and not processed (CVV), but the response-code value changes based on the test trigger you use. See For testing cards in PayPal Sandbox use the",
    "rejection triggers",
    ".",
    "To ensure you handle errors correctly, use negative testing to force flows through specific error conditions. The sandbox is a positive test environment by default, to use negative testing, you must",
    "enable it",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to the PayPal Developer Portal using the same credentials you use for PayPal.",
    "Select Dashboard.",
    "Click Create App under REST API apps. Any previously created REST API apps will appear in the table under the Create App button.",
    "Enter the name of your REST API app in the App Name field, and select a Sandbox developer account to associate with your account.",
    "Once your Live and Sandbox REST API credentials are created, including",
    "Client ID",
    "and",
    "Secret",
    ", click the Sandbox and Live buttons to switch between each set of credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "PayPal",
    ".",
    "Click",
    "Connect",
    ".",
    "Select",
    "Cash",
    "in Payment Methods.",
    "Introduce",
    "Name",
    ",",
    "Secret ID",
    "and",
    "Client ID",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Log in to the PayPal Developer Portal using the same credentials you use for PayPal.",
    "Select Dashboard.",
    "Select the application of your choice.",
    "In the bottom of the page, you can view the Webhooks section. Click in “Add Webhook”.",
    "Enter the webhook url.",
    "Specify the events.",
    "Save",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "-",
    "Conciliation configuration",
    ":",
    "SFTP",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payu-cards": [
    "PayU - Cards",
    "Suggest Edits",
    "This page presents all information about the PayU connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "nationality",
    "telephone_number",
    "country (transaction)",
    "cards.soft_descriptor",
    "tax_amount",
    "tax_percentage",
    "General information",
    "Countries",
    ":",
    "Argentina",
    "Brazil",
    "Chile",
    "Costa Rica",
    "Colombia",
    "El Salvador",
    "Guatemala",
    "Honduras",
    "Mexico",
    "Panama",
    "Peru",
    "South Africa",
    "Currencies",
    ":",
    "ARS, BRL, CRC, CLP, COP, GTQ, HNL, MXN, NIO, PAB, PEN, USD, ZAR",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Generally defined by issuer bank, if an specific amount is required the configuration would be validated by\n            PayU.",
    "Maximum amount",
    ":",
    "Generally defined by issuer bank, if an specific amount is required the configuration would be validated by\n            PayU.",
    "TRX limit",
    ":",
    "No",
    "Support of international BIN",
    ":",
    "Yes, accepted in all countries.",
    "Activation of functionality",
    ":",
    "Yes, must be set up in Pay U's side.",
    "TRX without CVV",
    ":",
    "Supported for all countries except Panama. By default, processing credit cards without security code is not\n            enabled, available under customized commercial agreements.",
    "Purchase TRX in 1-Step",
    ":",
    "Supported in all countries.",
    "Purchase TRX in 2-Step",
    ":",
    "Argentina: Supported",
    "Brazil: Supported",
    "Chile: Supported, under request only",
    "Colombia: Supported, under request only",
    "Mexico: Supported",
    "Panama: Not supported",
    "Peru: Supported",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization, feature is available under customized commercial agreements.",
    "Webhooks",
    ":",
    "Yes",
    "Supported businesses",
    ":",
    "PayU doesn’t support crypto businesses.",
    "Captures",
    "Partial capture",
    ":",
    "Supported for all countries except Panama.",
    "Multiple captures",
    ":",
    "Argentina: Supported for local currency, must be enabled in your provider configuration.",
    "Brazil: Supported for local currency, must be enabled in your provider configuration.",
    "Chile: Supported.",
    "Colombia: Not supported.",
    "Mexico: Supported for local currency, must be enabled in your provider configuration.",
    "Panama: Not supported.",
    "Peru: Supported for local currency, must be enabled in your provider configuration.",
    "Maximum time to capture an authorization",
    ":",
    "Argentina: 14 days.",
    "Brazil: 7 days.",
    "Chile: 7 days.",
    "Colombia: 10 days.",
    "Mexico: 30 days.",
    "Peru: 7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes, supported for all countries.",
    "Partial refunds",
    ":",
    "Argentina: Supported for the following payment methods: VISA, MASTERCARD, AMEX, DINERS, Argencard.",
    "Brazil: Supported for the following payment methods: VISA, MASTERCARD, AMEX, DINERS.",
    "Chile: Supported.",
    "Colombia: Supported.",
    "Mexico: Supported for the following payment methods: VISA, MASTERCARD.",
    "Panama: Not supported.",
    "Peru: Not supported.",
    "Multiple refunds",
    ":",
    "Yes, not supported for Colombia or Panama.",
    "Time to request refund",
    ":",
    "Argentina: 10 min - 365 days (180 days for partial refunds)",
    "Brazil: 10 min (1 day for partial refunds) - 90 or 120 days*",
    "Chile: 10 min - 90 days",
    "Colombia: 10 min - 2 years",
    "Mexico: 10 min - 45 or 180 days*",
    "Panama: 10 min - 180 days",
    "Peru: 10 min -180 days",
    "*Depending on the network",
    "Time to process refund",
    ":",
    "Argentina: 1-30 working days",
    "Brazil: 1-15 working days",
    "Chile: 8-20 working days",
    "Colombia: 1-30 working days",
    "Mexico: 1-30 working days",
    "Panama: 1-8 working days",
    "Peru: 15-25 working days",
    "Voids",
    "Void support",
    ":",
    "Argentina: Supported (to support multiple and partial voids, you must enable multiple captures in your\n            provider configuration).",
    "Brazil: Supported (to support multiple and partial voids, you must enable multiple captures in your provider\n            configuration).",
    "Chile: Supported (multiple and partial voids not applicable).",
    "Colombia: Not supported.",
    "Mexico: Supported (to support multiple and partial voids, you must enable multiple captures in your provider\n            configuration).",
    "Panama: Not supported.",
    "Peru: Supported (to support multiple and partial voids, you must enable multiple captures in your provider\n            configuration).",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Installments are supported for credit cards, not supported for Panama and Mexico. For Mexico, if\n              installments are required, commercial team should set the months without interests configuration or\n              integrate PayU's promotions API.",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Supported in Argentina and Mexico.",
    "Conditions or restrictions",
    ":",
    "Installments are managed per country.",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of installments (#months)",
    ":",
    "Argentina: 1",
    "Chile: 1",
    "Colombia: 1",
    "Brazil: 1",
    "Peru: 0, 2",
    "Maximum number of Installments (#months)",
    ":",
    "Argentina: 24 (except for Naranja that supports up to 12).",
    "Chile: 48",
    "Colombia: 36",
    "Brazil: 12",
    "Peru: 36",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "Up to 120 days after the transaction date for local cards and 180 days for international cards.",
    "Endpoint for disputes",
    ":",
    "No, there is an option to check them through the control panel.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Argentina: 5 working days.",
    "Brazil: 12 working days.",
    "Chile: 5 working days.",
    "Colombia: 2 working days.",
    "Mexico: 12 calendar days.",
    "Panama: 8 working days.",
    "Peru: 6 working days.",
    "Security",
    "E3DS v2",
    ":",
    "External 3DS 2.0 available for Brazil and Colombia supported for Visa and Mastercard.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "If you want to perform tests through PayU, you need to use the following credentials in the request,\n              depending on the country of your account:",
    "Merchant ID",
    "508029",
    "API Login",
    "pRRXKOl8ikMmt9u",
    "API Key",
    "4Vj8eK4rloUd272L48hsrarnUA",
    "Public Key",
    "PKaC6H4cEDJD919n705L544kSU",
    "Account ID",
    "Argentina: 512322",
    "Brazil: 512327",
    "Chile: 512325",
    "Colombia: 512321",
    "Mexico: 512324",
    "Panama: 512326",
    "Peru: 512323",
    "Test cards Argentina:",
    "Card",
    "Number",
    "AMEX Credit Card",
    "376414000000009",
    "ARGENCARD Credit Card",
    "5011050000000001",
    "CABAL Credit Card",
    "5896570000000008",
    "CENCOSUD Credit Card",
    "6034930000000005 - 5197670000000002",
    "DINERS Credit Card",
    "36481400000006",
    "MASTERCARD Credit Card",
    "5399090000000009",
    "NARANJA Credit Card",
    "5895620000000002",
    "SHOPPING Credit Card",
    "6034880000000051",
    "VISA Credit Card",
    "4850110000000000 - 4036820000000001",
    "VISA Debit Card",
    "4517730000000000",
    "Test cards Brazil:",
    "Card",
    "Number",
    "AMEX Credit Card",
    "36213800000009",
    "DINERS Credit Card",
    "36213800000009",
    "ELO Credit Card",
    "5067310000000002",
    "HIPERCARD Credit Card",
    "6062825624254001",
    "MASTERCARD Credit Card",
    "5123740000000002",
    "VISA Credit Card",
    "4422120000000008 - 4984460000000008",
    "Test cards Chile:",
    "Card",
    "Number",
    "Cardholder",
    "CVV",
    "Expiration date",
    "AMEX Credit Card",
    "377825000000005",
    "Follow the testing values according to the expected result",
    "DINERS Credit Card",
    "36525200000002",
    "Follow the testing values according to the expected result",
    "MASTERCARD Credit Card",
    "5457210001000019",
    "BKN_DMC_001",
    "300",
    "12/25",
    "MASTERCARD Debit Card",
    "5204730000001003",
    "BKN_MCS_001",
    "100",
    "12/25",
    "MASTERCARD Prepaid Card",
    "5185540320000012",
    "BKN_DMC_001",
    "001",
    "12/25",
    "VISA Credit Card",
    "4761340000000035",
    "VISA_GLOBAL_3",
    "846",
    "12/27",
    "VISA International Card",
    "4005520000000129",
    "VISA_ECOMMERCE_03",
    "921",
    "12/27",
    "VISA Dedit Card",
    "4761340000000050",
    "VISA_GLOBAL_5",
    "846",
    "12/27",
    "Test cards Colombia:",
    "Card",
    "Number",
    "AMEX Credit Card",
    "377813000000001 - 377847626810864 - 376402004977124 - 376414000000009",
    "CODENSA Credit Card",
    "5907120000000009",
    "CRM Credit Card",
    "5282096712463427",
    "DAVIVIENDA Credit Card",
    "5247081012761500",
    "DINERS Credit Card",
    "36032400000007 - 36032404150519 - 36032440201896",
    "MASTERCARD Credit Card",
    "5471300000000003 - 5120697176068275",
    "NEQUI Credit Card",
    "4093551018099251",
    "VISA Credit Card",
    "4097440000000004 - 4037997623271984 - 4111111111111111",
    "VISA Debit Card",
    "4509420000000008",
    "Test cards Mexico:",
    "Card",
    "Number",
    "AMEX Credit Card",
    "376675000000005",
    "MASTERCARD Credit Card",
    "5491380000000001",
    "MASTERCARD Debit Card",
    "5256780000000007",
    "VISA Credit Card",
    "4268070000000002",
    "VISA Debit Card",
    "4415490000000004",
    "Test cards Panama:",
    "Card",
    "Number",
    "MASTERCARD Credit Card",
    "5455040000000005",
    "VISA Credit Card",
    "4723030000000005",
    "Test cards Peru:",
    "Card",
    "Number",
    "AMEX Credit Card",
    "377753000000009",
    "DINERS Credit Card",
    "36239200000000",
    "MASTERCARD Credit Card",
    "5491610000000001",
    "MASTERCARD Debit Card",
    "5236930000000003",
    "VISA Credit Card",
    "4907840000000005 - 4634010000000005",
    "VISA Debit Card",
    "4557880000000004",
    "Limitations/ Specifications for testing",
    ":",
    "To get approved transactions",
    ":",
    "Send APPROVED in the name of the cardholder.",
    "Send 777 in the CVV of the card (for AMEX, use 7777).",
    "The test parameter and the description also define the state. If it doesn't work with test set as false,\n            change its value to true.",
    "Send the month of the expiration date of the card less than 6 and the year must be 2023 or higher.\n            Example:\n            05/2025.",
    "To get declined transactions",
    ":",
    "Send REJECTED in the name of the cardholder.",
    "Send 666 in the CVV of the card (for AMEX, use 6666).",
    "The test parameter and the description also define the state. If it doesn’t work with test set as false,\n            change its value to true.",
    "Send the month of the expiration date of the card higher than 6 and the year must be 2023 or higher.\n            Example: 07/2027.",
    "Aditional information",
    ":",
    "For the card number you must enter a valid number, corresponding to the franchise sent in the request. You\n            can use an online card generator for testing purposes or use one of the cards available for your country\n            mentioned before.",
    "To test cards in Chile, use the cardholder name, CVV and expiration date displayed in the example cards.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "There are two dashboards to obtain PayU credentials. PayU Latam to obtain the administrative module\n            credentials and PayU Hub/PaymentsOS where Latam credentials are configured and users can follow-up payments:",
    "PayU Latam's module",
    ":",
    "Log in to",
    "https://merchants.payulatam.com/",
    ".",
    "Click",
    "Settings",
    "and then select",
    "Technical configuration",
    ".",
    "In this window, you find the",
    "Public Key",
    ",",
    "API key",
    "and",
    "API Login",
    "which allows you to\n              authenticate your commerce during the integration procedure.",
    "PayU Hub/PaymentsOS",
    ":",
    "Log in to",
    "https://control.paymentsos.com/",
    ".",
    "Navigate to",
    "Accounts",
    "and",
    "Business Units",
    ".",
    "Select your created",
    "Business Unit",
    "and get your",
    "App ID",
    ",",
    "Public Key",
    "and",
    "Private\n                  Key",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "PayU",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    "and credentials:",
    "App ID",
    ",",
    "Public Key",
    "and",
    "Private Key",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "PayU Hub/PaymentsOS",
    "Login to the",
    "PaymentsOS Control Center",
    "and\n                open the Webhooks configuration page (Accounts > Webhooks).",
    "Select the test or live relevant environment.",
    "Enter an endpoint (the HTTPS URL), that Webhooks notifications should be sent to.",
    "Select the events to track from the Payment Event Alerts list.",
    "Select the business units to associate with the endpoint from the Associated Business Units list.",
    "*Maximum Number of Webhooks: For each business unit in the live environment, you can configure maximum 10\n              webhooks per event. In the test environment, this is limited to 5 webhooks per event.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payvalida-payment-link": [
    "Payvalida - Payment Link",
    "Suggest Edits",
    "This page presents all information related to the Payvalida connection using Payment Link as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "payment_description",
    "tax_amount",
    "tax_percentage",
    "General information",
    "Payvalida does not accept decimals",
    "The Payvalida system does not support decimals. Therefore, you should not use decimals when defining the payment",
    "amount",
    ". Otherwise, your payment may fail.",
    "Countries",
    ":",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "Guatemala",
    "Peru",
    "Currencies",
    ":",
    "COP, CRC, GTQ, PEN, USD",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Bank Transfer",
    "Wallet",
    "Cash",
    "Minimum amount",
    ":",
    "The amount depends on the networks.",
    "Maximum amount",
    ":",
    "The amount depends on the networks.",
    "TRX limit",
    ":",
    "For cards, the amount depends on the networks.",
    "Support of international BIN",
    ":",
    "No",
    "TRX without CVV",
    ":",
    "Yes, for MasterCard.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "If the order is recurrent it doesn't expire and can be payed multiple times from the user. Recurrency only applies for cash payments.",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "In process.",
    "Multiple refunds",
    ":",
    "In process.",
    "Time to request refund",
    ":",
    "15 working days from the specific causes defined by Payvalida. In any case can a refund be requested of transactions processed in more than 6 months before the request date.",
    "Time to process refund",
    ":",
    "15 working days.",
    "Cancellation",
    "Cancellation support",
    ":",
    "Yes. Order goes from pending to cancelled.",
    "Voids",
    "Voids support",
    ":",
    "No",
    "Installments",
    "Installments support",
    ":",
    "Yes",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Conditions or restrictions",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Deferral date availability",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Grace period",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Minimum number of installments (#months)",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Maximum number of installments (#months)",
    ":",
    "Managed by the issuing bank and the user. Payvalida doesn't participate.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "15 working days from the specific causes defined by Payvalida. In any case can a chargeback be requested of transactions processed in more than 6 months before the request date.",
    "Endpoint for disputes",
    ":",
    "No, an email request should be sent.",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 working days.",
    "Security",
    "Address verification service",
    ":",
    "No",
    "Support for 0Auth",
    ":",
    "No",
    "3DS V2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields",
    ":",
    "Merchant ID, Client Secret and Notification Secret.",
    "Test cards",
    ":",
    "Number",
    "Verification Code",
    "Expiration Date",
    "Franchise",
    "Notes",
    "377813402429063",
    "3551",
    "07/26",
    "AmEx",
    "5303710409428783",
    "355",
    "05/26",
    "MasterCard",
    "4513076106055348",
    "159",
    "06/26",
    "VISA",
    "36032429319768",
    "9052",
    "12/26",
    "DinersClub",
    "5529030604551745",
    "124",
    "11/26",
    "MasterCard",
    "Insufficient Funds",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Go to Payvalida's developer dashboard (",
    "Sandbox",
    "and",
    "Production",
    ").",
    "Go to the section",
    "API",
    ".",
    "Get your keys.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "PayValida",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Merchant ID",
    ",",
    "Client Secret",
    ", and",
    "Notification Secret",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Go to Payvalida's developer dashboard (",
    "Sandbox",
    "and",
    "Production",
    ").",
    "Go to the section",
    "Configure",
    ".",
    "Go to Account Profile.",
    "Set the webhook url in the field",
    "Notification URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No, the conditions are administrative. The comercial agent facilitates the access to production after finalizing the implementation.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/payzen-pse": [
    "Payzen - PSE",
    "Suggest Edits",
    "This page presents all information related to the Payzen connection using Bank Transfer as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "Amounts are subject to the client's configuration from their channel.",
    "Type of integration",
    ":",
    "Redirection to the Bank Page",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "User",
    "Password",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Login to the Payzen dashboard. In the menu navigate to",
    "Settings and Store",
    ".",
    "Select your store and go to the",
    "REST API Keys",
    "tab.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Payzen Lyra",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "User",
    "and",
    "Password",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to",
    "Payzen dashboard",
    ".",
    "Open the menu:",
    "Settings",
    "and then",
    "Notification rules",
    ".",
    "Right click on the",
    "notification URL",
    "line at the end of the payment.",
    "Select",
    "Manage Rule",
    ".",
    "In the",
    "General Settings",
    "section, enter the e-mail address(es) to notify in case of failure. To specify multiple email addresses, separate them with a semicolon.",
    "In the",
    "Notification URL",
    "section, enter the URL of your page in the",
    "URL to call in TEST mode",
    "and",
    "URL to call in PRODUCTION mode",
    "fields.",
    "Save your changes.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, there is a flow, channels, SLA, Data Entry required to make the integration.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/place-to-pay-cards": [
    "Place to Pay - Cards",
    "Suggest Edits",
    "This page presents all information related to the Place To Pay connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "document_number",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Belize",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "Honduras",
    "Mexico",
    "Panamá",
    "Peru",
    "Puerto Rico",
    "Uruguay",
    "Currencies",
    ":",
    "BZD, CLP, COP, CRC, HNL, MXN, PEN, USD, UYU",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Placetopay adjusts to the maximum of the processor and, at the same time, to the maximum of the country.",
    "Maximum amount",
    ":",
    "Placetopay adjusts to the maximum of the processor and, at the same time, to the maximum of the country.",
    "TRX limit",
    ":",
    "No",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, the functionality must be activated merchant-level.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes, notification URLs are supported for WebCheckout connection. Nevertheless, a consultation Gateway API process is supported.",
    "Captures",
    "Partial capture",
    ":",
    "No",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "1 month.",
    "Captures over the amount of authorization",
    ":",
    "Yes, depends on the processor.",
    "Maximum amount",
    ":",
    "Depends on the limits established by merchants and the processor.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "No",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "Must be made the same day that the transaction is processed and before the cut of each processor network.",
    "Time to process refund",
    ":",
    "Depends on the processor, generally 6 months.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes, informationRequest method via API returns permitted installments.",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "Yes",
    "Grace period",
    ":",
    "Yes",
    "Minimum number of Installments (#months)",
    ":",
    "Depends on each processor network, limited by the bank, BIN and country.",
    "Maximum number of Installments (#months)",
    ":",
    "Depends on each processor network, limited by the bank, BIN and country.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Defined period to make a chargeback",
    ":",
    "There is not a limit, Placetopay adjusts to each country's regulation.",
    "Endpoint for disputes",
    ":",
    "No",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Depends on the secutiry configuration of each merchant and the management of the issuing banks.",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Login and secretKey.",
    "Test cards Diners",
    ":",
    "Number",
    "Response",
    "36545400000008",
    "Approves",
    "36545400000248",
    "Rejects",
    "36545400000701",
    "Leaves transaction in manual processing and if it is processed it is approved",
    "36545407030701",
    "Leaves transaction in pending state and resolves to rejection",
    "36545407032814",
    "Throws an exception in the process",
    "36545400000438",
    "Takes 180 seconds to respond and is approved",
    "36545407032780",
    "Leaves transaction in manual processing and if it is processed it is approved",
    "36545407032806",
    "Leaves transaction in pending state and resolves to approved",
    "36545407032848",
    "Approves",
    "Test cards Visa:",
    "Number",
    "Response",
    "4110760000000008",
    "Approves 3DS-C",
    "4110760000000016",
    "Rejects",
    "4110760000000032",
    "Leaves transaction in pending state and resolves to approved 3DS-C",
    "4110760000000040",
    "Leaves transaction in pending state and resolves to rejection 3DS-A",
    "4048370000000037",
    "Leaves transaction in pending state and resolves to rejection",
    "4110760000000073",
    "Leaves transaction in pending state and resolves to approved",
    "4110760000000065",
    "Throws an exception in the process 3DS-N",
    "4110760000000024",
    "Takes 180 seconds to respond and is approved",
    "4110760000000115",
    "Takes 180 seconds to respond and is rejected",
    "4110760000000057",
    "Approves if the amount is inferior to 200USD, if not rejects",
    "4110760000000081",
    "Approves",
    "4012888888881881",
    "Approves if the expiraction is 11/28 and cvv 917, if not rejects",
    "4381080000000003",
    "Leaves transaction in pending state and resolves to rejection",
    "4005580000000040",
    "Rejects",
    "4110770010002837",
    "Approves",
    "4111111111111111",
    "Approves 3DS-Y",
    "4509564638437551",
    "Leaves transaction in pending state and resolves to approved",
    "4864921336824366",
    "Leaves transaction in pending state and resolves to rejection",
    "4931974429847108",
    "Leaves transaction in pending state and resolves to rejection",
    "4716375184092180",
    "Rejects",
    "4532034637206853",
    "Leaves transaction in manual processing and if it is processed it is rejected",
    "4212121212121214",
    "Leaves transaction in manual processing and if it is processed it is approved",
    "4666666666666669",
    "Takes 180 seconds to respond and is approved",
    "4381080000000029",
    "Approves",
    "4381080000000011",
    "Rejects",
    "Test cards Mastercard:",
    "Number",
    "Response",
    "5180300000000005",
    "Approves 3DS-Y",
    "5180300000000039",
    "Rechaza 3DS-N",
    "5180300000000047",
    "Leaves transaction in pending state and resolves to approved 3DS-C",
    "5180300000000054",
    "Leaves transaction in pending state and resolves to rejection 3DS-A",
    "5292594382060745",
    "Approves 3DS-C",
    "5367680000000005",
    "Approves",
    "5367680000000013",
    "Rejects",
    "Test cards American Express:",
    "Number",
    "Response",
    "376651001281274",
    "Approves if the expiraction is 06/22 and cvv 4637, if not rejects",
    "Test cards Discover:",
    "Number",
    "Response",
    "6550590000000001",
    "Approves",
    "6550590000000019",
    "Rejects",
    "6550590000000027",
    "Leaves transaction in pending state and resolves to approved",
    "6550590000000035",
    "Leaves transaction in pending state and resolves to rejection",
    "6557351234543156",
    "Approves",
    "6557351234543164",
    "Rejects",
    "Test cards Maestro:",
    "Number",
    "Response",
    "6759649826438453",
    "Approves",
    "Test cards Somos:",
    "Number",
    "Response",
    "8810060001592705",
    "Approves",
    "Test cards Exito:",
    "Number",
    "Response",
    "5903090000000000",
    "Approves",
    "Test cards Alkosto:",
    "Number",
    "Response",
    "5903120000000000",
    "Approves",
    "Test cards Comfandi:",
    "Number",
    "Response",
    "9391111111111111",
    "Approves",
    "9395555555555555",
    "Rejects",
    "Test cards Mefia:",
    "Number",
    "Response",
    "6377470102391155",
    "Approves if expiration is 12/24",
    "6377470107014851",
    "Rejects",
    "6377470106963215",
    "Approves",
    "6377470100506457",
    "Approves",
    "6377470105684614",
    "Leaves transaction in pending state and resolves to approved",
    "6377470106813436",
    "Leaves transaction in pending state and resolves to rejection",
    "6377470106672139",
    "Rejects",
    "Test cards Tarjeta ATH:",
    "Number",
    "Response",
    "0215020177972730",
    "Approves",
    "2215714777972730",
    "Approves",
    "0215025888083941",
    "Leaves transaction in pending state and resolves to rejection",
    "2215716999194052",
    "Leaves transaction in pending state and resolves to approved",
    "0215027111105163",
    "Leaves transaction in pending state and resolves to rejection",
    "2215719446775653",
    "Throws an exception in the process",
    "0215026116775785",
    "Rejects",
    "Limitations/ Specifications for testing",
    ":",
    "ZIP codes for AVS test",
    ":",
    "ZIP code",
    "Response",
    "55555",
    "Approved transaction with succesful AVS (Y)",
    "44444",
    "Approved transaction with failed AVS (A) and reverses transaction",
    "33333",
    "Approved transaction with failed AVS (A) and rejects reverse. When consulted the reverse is succesful",
    "OTP for test cases (Ecuador)",
    ":",
    "For the OTP to be succesful, any other code is rejected.",
    "123456",
    "000000",
    "OTP in 3DS (Ecuador)",
    ":",
    "When the auhentication in 3DS requires challenge (OTP) the accepted code is 12345.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Sandbox and Production credentials are obtained via email from PlaceToPay's team.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "PlaceToPay",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Login",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "The merchant shares the notification URL to PlaceToPay and this is configured in PlaceToPay's system.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Yes, each merchant should make a test for an amount not greater than 1USD, credentials are enabled and the merchant must confirm via email. If more attention is required, a space with specialist is reserved to take evidence of the test, nevertheless, this citation is dependent of the merchant, who must confirm the conciliation process the next day.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/rede-cards": [
    "Rede - Cards",
    "Suggest Edits",
    "This page presents all information related to the Rede connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Apple Pay",
    "Google Pay",
    "Minimum amount",
    ":",
    "Rede doesn't set a limit, the merchant can set it.",
    "Maximum amount",
    ":",
    "Rede doesn't set a limit, the merchant can set it.",
    "TRX limit",
    ":",
    "No limit.",
    "Support of international BIN",
    ":",
    "Yes",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes, for cancellations. The notifications URL (callback) allows the data of a transaction to be returned via POST after processing the cancellations performed on D+1.",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Not supported.",
    "Maximum time to capture an authorization",
    ":",
    "Maximum period depends on the branch of the establishment.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to process refund",
    ":",
    "If it is a sale reversed on the same day of capture, the deadline for releasing the limit on the card is up to 72 business hours, which may take longer according to the rules established between the customer's issuers. As for orders captured on D+1, the refund amount may return before the closing of the invoice or on the next invoice after cancellation.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "In the Userede portal it is possible to cancel the \"cancellation\" within the 24 hours after it was requested. If you exceed this deadline, you can ask for the total reprocessing of the sale, for example, where a ticket can be opened to be processed again.",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsable for the financiation of installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "2",
    "Maximum number of Installments (#months)",
    ":",
    "12",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes, rede notifies the establishment through the following channels: Registered e-mail and SMS, Telephone (for customers who have disputed sales in excess of R$ 1,000.00) and Portal, so that the unit can present its defense to the reversal analysis.",
    "Defined period to make a chargeback",
    ":",
    "The cardholder has a period of 120 days to contact the issuing bank claiming that he/she does not recognize the transaction. In case of disagreement (ex: product was delivered different from the advertisement or with defect) it is 120 days after delivery of the product/service.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "When a sale is disputed, the portal makes available to attach the defense documentation, a process number is generated and the delivery period is informed, which can vary between 10 to 15 days.",
    "Security",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Affiliation Number and Integration Key.",
    "Test cards",
    ":",
    "Flag",
    "Type",
    "Card",
    "Validity",
    "Security code",
    "MasterCard",
    "Debit",
    "5277696455399730",
    "Jan/35",
    "123",
    "MasterCard",
    "Credit",
    "5448280000000000",
    "Jan/35",
    "123",
    "Mastercard (BIN 2)",
    "Debit",
    "2223000148400010",
    "Jan/35",
    "123",
    "Mastercard (BIN 2)",
    "Credit",
    "2223020000000000",
    "Jan/35",
    "123",
    "Visa",
    "Debit",
    "4761120000000140",
    "Jan/35",
    "123",
    "Visa",
    "Credit",
    "4235647728025680",
    "Jan/35",
    "123",
    "hypercard",
    "Credit",
    "6062825624254000",
    "Jan/35",
    "123",
    "Hyper",
    "Credit",
    "6370950847866500",
    "Jan/35",
    "123",
    "Diners",
    "Credit",
    "36490101441625",
    "Jan/35",
    "123",
    "JCB",
    "Credit",
    "3569990012290930",
    "Jan/35",
    "123",
    "JCB (19 dig)",
    "Credit",
    "3572000100200140000",
    "Jan/35",
    "123",
    "Credz",
    "Credit",
    "6367600001405010",
    "Jan/35",
    "123",
    "Link",
    "Credit",
    "4389351648020050",
    "Jan/35",
    "123",
    "amex",
    "Credit",
    "371341553758128",
    "Jan/35",
    "1234",
    "cabal",
    "Credit",
    "6042034400069940",
    "Jan/35",
    "123",
    "Sorocred",
    "Credit",
    "6364142000000120",
    "Jan/35",
    "123",
    "credit system",
    "Credit",
    "6280281038975330",
    "Jan/35",
    "123",
    "Banescard",
    "Credit",
    "6031828795629270",
    "Jan/35",
    "123",
    "Visa",
    "Credit",
    "4895370010000000",
    "Jan/35",
    "123",
    "Visa",
    "Debit",
    "4824810010000000",
    "Jan/35",
    "123",
    "Mastercard (BIN 2)",
    "Credit",
    "2223000250000000",
    "Jan/35",
    "123",
    "Mastercard (BIN 2)",
    "Debit",
    "5204970000000000",
    "Jan/35",
    "123",
    "Limitations/Specifications for testing",
    ":",
    "If a transaction is submitted using a card that differs from the ones provided, the sandbox will generate an error with code 58: \"Unauthorized. Contact issuer.\"",
    "To simulate error codes, you can easily replicate them by sending transactions with the corresponding values associated with each error code.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Rede dashboard",
    ".",
    "Navigate to Sell, E-Commerce and Integration key.",
    "Get your keys.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Rede",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Affiliation Number",
    ", and",
    "Integration Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "The notifications URL (callback) enables the retrieval of transaction data through a POST request following the processing of cancellations performed on D+1. You can provide the URL either directly in the API or by accessing the Rede portal at: para vender > e-commerce > notificação automática. It is important to note that if the URL is provided in both channels, the API-informed URL will always take priority for sending notifications.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Contact your TAM, send requested evidences and generate a token in Rede's portal.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/safetypay-payment-link": [
    "SafetyPay - Payment Link",
    "Suggest Edits",
    "This page presents all information related to the SafetyPay connection using Payment Link as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "document_type",
    "country(transaction)",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Ecuador",
    "El Salvador",
    "Guatemala",
    "Mexico",
    "Panama",
    "Peru",
    "Currencies",
    ":",
    "ARS, BOB, BRL, CLP, COP, CRC, DOP, USD, GTQ, HNL, MXN, PYG, PEN, UYU",
    "Payment methods",
    ":",
    "Cash",
    "Bank Transfer",
    "Local Payment Methods",
    "Minimum amount Chile",
    ":",
    "Bank-active:",
    "BCI: CLP 500.000",
    "Banco Estado: CLP 250.000",
    "Minimum amount Colombia",
    ":",
    "Cash-active: COP 0",
    "Minimum amount Panama",
    ":",
    "Cash-active:",
    "Western Union (standalone location): USD 6",
    "Maximum amount Brazil",
    ":",
    "Bank-active: BRL 46.000",
    "Cash-active: BRL 2.680",
    "Boleto: BRL 46.000",
    "QR Code: BRL 5.000",
    "Maximum amount Chile",
    ":",
    "Bank-active: CLP 6.700.000",
    "Cash-active: CLP 6.700.000",
    "QR Code: CLP 500.000",
    "Maximum amount Costa Rica",
    ":",
    "Bank-active: CRC 1.790.000",
    "Cash-active: CRC 1.790.000",
    "Maximum amount Colombia",
    ":",
    "Bank-active: COP 32.000.000",
    "Cash-active: COP 6.000.000",
    "Baloto: COP 1.080.000",
    "Maximum amount Ecuador",
    ":",
    "Bank-active: USD 10.000",
    "Cash-active:",
    "USD 500",
    "Banco Guayaquil/Banco Pichincha: USD 10.000",
    "Maximum amount El Salvador",
    ":",
    "Cash-active: USD 500",
    "Maximum amount Guatemala",
    ":",
    "Bank-active: GTQ 65.000",
    "Cash-active:",
    "GTQ 3.800",
    "Banco Industrial: GTQ 65.000",
    "Maximum amount Mexico",
    ":",
    "Bank-active: MXN 190.000",
    "Cash-active: Depending on the methods, maximum limit ranges from MXN 5.000 to MXN 190.000.",
    "Maximum amount Nicaragua",
    ":",
    "Cash-active: NIO 17.500",
    "Maximum amount Panama",
    ":",
    "Cash-active:",
    "Western Union Agents: 1.500 USD",
    "Western Union (standalone locations): No Limit",
    "Maximum amount Peru",
    ":",
    "Bank-active: PEN 30.000",
    "Cash-active: PEN 30.000 / PEN 1.080",
    "Loan money: PEN 7.200",
    "TRX limit",
    ":",
    "No",
    "International purchases",
    ":",
    "All the transactions are made in local currency. SafetyPay makes the exchange transaction and informs the shopper, who confirms or not.",
    "Purchase TRX",
    ":",
    "Once the client is redirected to the Gateway, he would be able to follow the instructions and complete the payment. SafetyPay will send Email and SMS payment instructions to the shopper and a payment reminder to ensure that the client completes the payment.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "Up to 90 days after the date of the transaction.",
    "Time to process refund",
    ":",
    "5-7 days.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Chargebacks",
    "Chargebacks avaiability",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Limitations/Specifications for testing",
    ":",
    "Open this URL:",
    "http://sandbox-demobank.safetypay.com/Default/Login.aspx",
    "Log in with the following credentials:",
    "User: test",
    "password: test",
    "Complete the information:",
    "Enter the transaction information:",
    "Currency",
    ",",
    "Payment Code",
    "and",
    "Amount",
    ".",
    "Leave Account No as is.",
    "Confirm Payment: Click in",
    "Accept",
    "and then",
    "Confirm",
    ".",
    "Successful Payment: After you click on",
    "Confirm",
    "you will get a message indicating the operation was successfully paid.",
    "Testing steps",
    "SafetyPay is a non-card payment method. They enable cash payments, bank transfers, and international online transactions for a global consumer market. To perform a payment using the SafetyPay, you should follow the steps:",
    "Create Customer",
    "Create Checkout Session",
    "Retrieve Payment Methods for Checkout",
    "(Optional)",
    "Create One Time Token / Get the token from SDK",
    "Create Payment",
    "After creating the payment (step 5), the API response will provide a redirect URL (transactions.payment_method.detail.bank_transfer.redirect_url). The URL redirects to the SafetyPay Gateway, where you will find information about the payment, such as the payment code and the total amount, as shown next:",
    "In the above example, the",
    "Payment Code",
    "is 219131, and the",
    "Total Amount",
    "is 3922. To approve and complete the payment process, you must follow the instructions:",
    "Open",
    "SafetyPay DemoBank",
    ".",
    "Log in with the following credentials:",
    "User",
    ": test",
    "Password:",
    "test",
    "Enter the transaction information: Currency, Payment Code, and Amount. Do not change Account No. After, click on the",
    "Accept",
    "button.",
    "Click on",
    "Conﬁrm",
    "button.",
    "After confirming the payment, you’ll get a message indicating the operation was successfully paid. A table with the transaction summary will be displayed.",
    "Subsequently confirming the payment, you can check the payment status using the",
    "Retrieve Payment by ID",
    "route. The status provided by the response should be",
    "SUCCEEDED",
    ".",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "To enable your credentials, go to the section",
    "Settings",
    ", select",
    "Accounts",
    "in the",
    "Merchant Portal",
    ".",
    "Select",
    "Credentials",
    "and click on the button",
    "Generate New Credentials",
    "The",
    "API Key",
    "and",
    "Signature Key",
    "will be automatically generated.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "SafetyPay",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "API Key",
    ", and",
    "Signature Key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "You can find the options to set your",
    "Notification URL",
    "by going to",
    "Settings",
    "in the",
    "Merchant Portal",
    ". Then click on",
    "Accounts",
    "and select",
    "Notifications",
    "to set up your webhooks.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Certification of the PROD and SBX environment in an on-line call between the merchant, Yuno and SafetyPay to ensure the correct end to end operation of the transactions and notifications.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stone-cards": [
    "Stone - Cards",
    "Suggest Edits",
    "This page presents all information related to the Stone connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "card.holder_name",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "R$ 1",
    "Maximum amount",
    ":",
    "Depends on issuing bank.",
    "TRX limit",
    ":",
    "There isn't a specified transaction limit.",
    "Support of international BIN",
    ":",
    "Yes, but the transaction must be sent in BRL.",
    "Activation of functionality",
    ":",
    "International bins are enabled by default, but their usage may be restricted based on business rules set by the organization.",
    "TRX without CVV",
    ":",
    "Yes. Must be requested during setup.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Not supported.",
    "Maximum time to capture an authorization",
    ":",
    "7 days including the day of the authorization.",
    "Captures over the amount of authorization",
    ":",
    "Not supported.",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "90 days to cancel a debit card transaction (Mastercard is an exception, with a 7 working days limit) and 350 for a credit card transaction.",
    "Time to process refund",
    ":",
    "24 months.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Yes",
    "Conditions or restrictions",
    ":",
    "-",
    "Deferral date availability",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "1",
    "Maximum number of Installments (#months)",
    ":",
    "8, but 12 is the default maximum.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes, the merchant recieves chargeback notifications via e-mail.",
    "Defined period to make a chargeback",
    ":",
    "The deadline for submitting an objection varies depending on the nature of the request. In the case of disputing a transaction due to non-recognition, the cardholder has 120 days from the date of the last transaction installment to request an objection. If the dispute pertains to non-receipt of goods, the cardholder may initiate a dispute within 120 days from the agreed delivery date set by the establishment.",
    "Endpoint for disputes",
    ":",
    "No",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "After receiving the chargeback alert, the customer has 10 calendar days to send the documents.",
    "Security",
    "Address verification service",
    ":",
    "No",
    "3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Sale Affiliation Key and Stone Code.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "Date",
    "CVV",
    "VISA",
    "4705.9800.0000.7171",
    "08/26",
    "random",
    "MASTERCARD",
    "4024.0000.0000.4848",
    "08/26",
    "random",
    "ELO",
    "4389.3500.0000.7474",
    "08/26",
    "random",
    "AMEX",
    "3742.4500.0000.131",
    "08/26",
    "random",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email Stone directly at integracoes@stone.com.br and ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Stone",
    ".",
    "Introduce",
    "Name",
    ",",
    "Sale Affiliation Key",
    ", and",
    "Stone Code",
    ".",
    "Click",
    "Connect",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "To go live, tests will have to be made in order to check the integration is working well and some evidence of the experience in the merchant's application must be submitted.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stp-spei": [
    "STP - SPEI",
    "Suggest Edits",
    "This page presents all information related to the STP connection using the SPEI as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "1 cent.",
    "Maximum amount",
    ":",
    "No limit.",
    "TRX limit",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Transactions through Banxico's Interbank Electronic Payment System (SPEI).",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Contact your TAM to get Sandbox credentials and test information.",
    "Limitations/ Specifications for testing",
    ":",
    "Contact your TAM to get Sandbox credentials and test information.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your STP TAM to ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "STP",
    ".",
    "Click",
    "Connect",
    ".",
    "Select",
    "SPEI",
    "as Payment Method",
    "Introduce the",
    "Company Account",
    ",",
    "Bank Account",
    "and the",
    "Private Key",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Webhooks are configured from STP, it is necessary to send an e-mail to soporte@stpmex.com",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Making a certification, this consists in making a transaction altogether, the TAM will support the merchant on this.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stp-codi": [
    "STP - CoDi",
    "Suggest Edits",
    "This page presents all information related to the STP connection using the CoDi as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "telephone_number",
    "payment_description",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Minimum amount",
    ":",
    "No limit.",
    "Maximum amount",
    ":",
    "8000 MXN.",
    "TRX limit",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "CoDi is a way to make digital payments, with this tool you can make collections and payments from your cell phone, using a bank account assigned by STP.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Contact your TAM to get Sandbox credentials and test information.",
    "Limitations/ Specifications for testing",
    ":",
    "Contact your TAM to get Sandbox credentials and test information.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your STP TAM to ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "STP",
    ".",
    "Click",
    "Connect",
    ".",
    "Select",
    "Codi",
    "as Payment Method",
    "Introduce the",
    "Company Account",
    ",",
    "Bank Account",
    "and the",
    "Private Key",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Webhooks are configured from STP, it is necessary to send an e-mail to soporte@stpmex.com",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Making a certification, this consists in making a transaction altogether, the TAM will support the merchant on this.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/stripe-cards": [
    "Stripe - Cards",
    "Suggest Edits",
    "This page presents all information related to the Stripe connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "-",
    "General information",
    "Countries",
    ":",
    "Australia",
    "Austria",
    "Belgium",
    "Brazil",
    "Bulgaria",
    "Canada",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Finland",
    "France",
    "Germany",
    "Gibraltar",
    "Greece",
    "Hong Kong",
    "Hungary",
    "India",
    "Indonesia",
    "Ireland",
    "Italy",
    "Japan",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malaysia",
    "Malta",
    "Mexico",
    "Netherlands",
    "New Zealand",
    "Norway",
    "Philippines",
    "Poland",
    "Portugal",
    "Romania",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "Thailand",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Currencies",
    ":",
    "USD, AED, AFN*, ALL, AMD, ANG, AOA*, ARS*, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BIF, BMD, BND, BOB*,\n            BRL*, BSD, BWP BYN, BZD, CAD, CDF, CHF, CLP*, CNY, COP*, CRC*, CVE*, CZK, DJF*, DKK, DOP, DZD, EGP,\n            ETB, EUR, FJD, FKP*, GBP, GEL, GIP, GMD, GNF*, GTQ*, GYD, HKD, HNL*, HTG, HUF, IDR, ILS, INR, ISK,\n            JMD, JPY, KES, KGS, KHR, KMF, KRW, KYD, KZT, LAK*, LBP, LKR, LRD, LSL, MAD, MDL, MGA, MKD, MMK, MNT,\n            MOP, MRO, MUR*, MVR, MWK, MXN, MYR, MZN, NAD, NGN, NIO*, NOK, NPR, NZD, PAB*, PEN* ,PGK, PHP, PKR, PLN,\n            PYG*, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SEK, SGD, SHP*, SLE, SLL, SOS, SRD*, STD*, SZL, THB, TJS,\n            TOP, TRY, TTD, TWD, TZS, UAH, UGX, UYU*, UZS, VND, VUV, WST, XAF, XCD, XOF*, XPF*, YER, ZAR, ZMW",
    "Note: American Express doesn't accept the currencies marked with *",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "The minimum amount is $0.50 US or equivalent in charge currency.",
    "Maximum amount",
    ":",
    "The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
    "TRX limit",
    ":",
    "For most APIs, Stripe allows up to 100 read operations per second and 100 write operations per second in\n            live mode, and 25 operations per second for each in test mode.",
    "Support of international BIN",
    ":",
    "Yes",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Subscriptions require you to retain more information about your customers than one-time purchases do because\n            you need to charge customers in the future.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Maximum time to capture an authorization",
    ":",
    "7 by default.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to process refund",
    ":",
    "Stripe submits refunds to your customer’s bank immediately. Depending on the bank's processing time, it can take anywhere from 5-10 business days to show up on your customer’s bank account.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Note",
    ":",
    "Installments available in Mexico.",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Additional considerations of installments",
    ":",
    "Meses sin intereses only works with payment mode.",
    "Stripe only supports installments for Stripe Mexico accounts.",
    "The payment method must be a credit card issued in Mexico.",
    "The card must be a consumer card – installments don’t support corporate cards.",
    "The card must be issued by one of Stripe's supported issuers. The currency value must be MXN (pesos).",
    "The total payment amount must be above a minimum transaction amount. Stripe provides a minimum transaction amount based on the number of months in the plan selected. You can specify which installment plans you want to enable and define your own custom minimum and maximum transaction amounts by configuring custom installment settings in the Dashboard.",
    "Number of installments (#months)",
    ":",
    "3, 6, 9, 12, 18, and 24 installment plans available",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "Card networks typically allow cardholders to initiate disputes within 120 days of the original payment, but their rules allow more time in some situations.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Usually 7-21 days, depending on the card network.",
    "Security",
    "Address verification service",
    ":",
    "Yes",
    "Support for 0Auth",
    ":",
    "Yes",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Secret key.",
    "Test cards",
    ":",
    "Brand",
    "Number",
    "CVC",
    "Date",
    "Visa",
    "4242424242424242",
    "Any 3 digits",
    "Any future date",
    "Visa (debit)",
    "4000056655665556",
    "Any 3 digits",
    "Any future date",
    "Mastercard",
    "5555555555554444",
    "Any 3 digits",
    "Any future date",
    "Mastercard (2-series)",
    "2223003122003222",
    "Any 3 digits",
    "Any future date",
    "Mastercard (debit)",
    "5200828282828210",
    "Any 3 digits",
    "Any future date",
    "Mastercard (prepaid)",
    "5105105105105100",
    "Any 3 digits",
    "Any future date",
    "American Express",
    "378282246310005",
    "Any 4 digits",
    "Any future date",
    "American Express",
    "371449635398431",
    "Any 4 digits",
    "Any future date",
    "Discover",
    "6011111111111117",
    "Any 3 digits",
    "Any future date",
    "Discover",
    "6011000990139424",
    "Any 3 digits",
    "Any future date",
    "Discover (debit)",
    "6011981111111113",
    "Any 3 digits",
    "Any future date",
    "Diners Club",
    "3056930009020004",
    "Any 3 digits",
    "Any future date",
    "Diners Club (14-digit card)",
    "36227206271667",
    "Any 3 digits",
    "Any future date",
    "JCB",
    "3566002020360505",
    "Any 3 digits",
    "Any future date",
    "UnionPay",
    "6200000000000005",
    "Any 3 digits",
    "Any future date",
    "Testing installments Mexico",
    ":",
    "Number",
    "Brand",
    "CVC",
    "Date",
    "4000002500001001",
    "Cartes Bancaires / Visa",
    "Any 3 digits",
    "Any future date",
    "5555552500001001",
    "Cartes Bancaires / Mastercard",
    "Any 3 digits",
    "Any future date",
    "Limitations/ Specifications for testing",
    ":",
    "For test cards by country, declined payments, fraud prevention, invalid data, disputes, refunds, 3ds and\n            available balance see",
    "https://stripe.com/docs/testing",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Secret key",
    ":",
    "Log in into Stripe",
    "dashboard",
    ".",
    "Validate it is in the right environment (Test Mode ON/OFF).",
    "Go to",
    "Developers section",
    ".",
    "Go to",
    "API keys",
    "on the left menu.",
    "Copy the content of the column",
    "TOKEN",
    "for",
    "Secret key",
    "(Reveal key option) and copy.",
    "Set it on the",
    "Secret key",
    "field on the Yuno dashboard.",
    "Configuration of webhooks in partner",
    ":",
    "Stripe supports two endpoint types, Account and Connect. Create an endpoint for Account unless you’ve created a Connect application. Use the following steps to register a webhook endpoint in the Developers Dashboard.",
    "Open the",
    "Webhooks",
    "page.",
    "Click",
    "Add endpoint",
    ".",
    "Add your webhook endpoint’s HTTPS URL in",
    "Endpoint URL",
    ".",
    "If you have a Stripe Connect account, enter a description and select",
    "Listen to events on Connected accounts",
    ".",
    "Select the event types you’re currently receiving in your local webhook endpoint in",
    "Select events",
    ".",
    "Click",
    "Add endpoint",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "-",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/t1pagos-cards": [
    "T1Pagos - Cards",
    "Suggest Edits",
    "This page presents all information related to the T1Pagos connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Mexico",
    "Currencies",
    ":",
    "MXN",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Webhooks",
    ":",
    "Yes. Some processes are automatically executed, like suscription charges, to maintain the systems synchronized, an endpoint can be configured to receive notifications of some events such as new charges, suscription renovations and others.",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "Conditions or restrictions",
    ":",
    "Installments can be 3, 6, 9, 12, 15, 18, or 24.",
    "Supports different payment plans:",
    "normal",
    "msi",
    "mci",
    "diferido",
    "diferido_msi",
    "diferido_mci",
    "Deferral date availability",
    ":",
    "Yes",
    "Minimum number of Installments (#months)",
    ":",
    "3",
    "Maximum number of Installments (#months)",
    ":",
    "24",
    "Security",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Access Token.",
    "General observations for testing cards",
    ":",
    "You can use",
    "random",
    "transactions IDs (transactionId) for all testing cases.",
    "Test cards",
    ":",
    "Case",
    "PAN",
    "Status",
    "Code",
    "Description",
    "Use of 3DS",
    "5555555555554444",
    "Accepted or Rejected",
    "Variable",
    "Reply with profile \"3d_secure\" to make use of profile selector.",
    "Rejected card",
    "4222222222222220",
    "Rejected",
    "do_not_honor",
    "The transaction was declined for an unknown reason.",
    "Stolen card",
    "4000000000000119",
    "Rejected",
    "tarjeta_robada",
    "The bank has reported the card as stolen.",
    "Test cards Amex",
    ":",
    "Case",
    "PAN",
    "Status",
    "Code",
    "Description",
    "Approved",
    "341111111111111",
    "Completed",
    "cargo_exitoso",
    "The charge was successful.",
    "Rejected",
    "340000000000009",
    "Rejected",
    "do_not_honor",
    "The transaction was declined for an unknown reason.",
    "Insufficient funds",
    "370000000000002",
    "Rejected",
    "fondos_insuficientes",
    "The card does not have enough balance to complete the purchase.",
    "Stolen card",
    "342969003866921",
    "Rejected",
    "Ciber card",
    "343434343434343",
    "Completed",
    "Test cards Mastercard",
    ":",
    "Case",
    "PAN",
    "Status",
    "Code",
    "Description",
    "Approved",
    "5105105105105100",
    "Completed",
    "cargo_exitoso",
    "The charge was successful.",
    "Rejected",
    "5559156876003462",
    "Rejected",
    "Insufficient funds",
    "5175152167874418",
    "Rejected",
    "Stolen card",
    "5294369875991708",
    "Rejected",
    "Test cards Visa",
    ":",
    "Case",
    "PAN",
    "Status",
    "Code",
    "Description",
    "Approved",
    "4111111111111111",
    "Completed",
    "cargo_exitoso",
    "The charge was successful.",
    "Inssuficient funds",
    "4444444444444448",
    "Rejected",
    "fondos_insuficientes",
    "The card does not have enough balance to complete the purchase.",
    "Ciber card",
    "4000000000000044",
    "Completed",
    "Ciber card",
    "4242424242424242",
    "Completed",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "In the Admin system (",
    "Sandbox",
    "and",
    "Production",
    "), in the left menu, click",
    "Tokens",
    ". See to your list of",
    "Access Tokens",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "T1Pagos",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    "and",
    "Access Token",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "The register is made from the Admin system (",
    "Sandbox",
    "and",
    "Production",
    "), in the left menu, click",
    "Webhooks",
    ". More than one endpoint can be included and notifications can be channeled to each new route.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "-",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transbank-cards": [
    "Transbank - Cards",
    "Suggest Edits",
    "This page presents all information related to the Transbank connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Credit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Maximum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, activated in merchant level.",
    "TRX without CVV",
    ":",
    "Yes, must be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "Yes",
    "Minimum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Maximum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Security",
    "3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant Code, Secret Key.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "Date",
    "CVV",
    "Result",
    "VISA",
    "4051 8856 0044 6623",
    "Any expiration date",
    "123",
    "Approved",
    "AMEX",
    "3700 0000 0002 032",
    "Any expiration date",
    "123",
    "Approved",
    "MASTERCARD",
    "5186 0595 5959 0568",
    "Any expiration date",
    "123",
    "Rejected",
    "Prepaid VISA",
    "4051 8860 0005 6590",
    "Any expiration date",
    "123",
    "Approved",
    "Prepaid MASTERCARD",
    "5186 1741 1062 9480",
    "Any expiration date",
    "123",
    "Rejected",
    "Limitations/Specifications for testing",
    ":",
    "Transbank has a set of",
    "credentials",
    "for the 'integration environment'.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Transbank TAM. Ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Transbank",
    ".",
    "Select your",
    "Integration Type",
    ".",
    "Select Cards as your",
    "Payment Method",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant Code",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transbank-cards-mall": [
    "Transbank Mall - Cards",
    "Suggest Edits",
    "This page presents all information related to the Transbank connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Maximum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, activated in merchant level.",
    "TRX without CVV",
    ":",
    "Yes, must be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "Yes",
    "Minimum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Maximum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Security",
    "3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant Code Mall, Merchant Code, Secret Key.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "Date",
    "CVV",
    "Result",
    "VISA",
    "4051 8856 0044 6623",
    "Any expiration date",
    "123",
    "Approved",
    "AMEX",
    "3700 0000 0002 032",
    "Any expiration date",
    "123",
    "Approved",
    "MASTERCARD",
    "5186 0595 5959 0568",
    "Any expiration date",
    "123",
    "Rejected",
    "Prepaid VISA",
    "4051 8860 0005 6590",
    "Any expiration date",
    "123",
    "Approved",
    "Prepaid MASTERCARD",
    "5186 1741 1062 9480",
    "Any expiration date",
    "123",
    "Rejected",
    "Limitations/Specifications for testing",
    ":",
    "Transbank has a set of",
    "credentials",
    "for the 'integration environment'.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Transbank TAM. Ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Transbank",
    ".",
    "Select your",
    "Integration Type",
    ".",
    "Select Cards as your",
    "Payment Method",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant Code Mall",
    ",",
    "Merchant Code",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transbank-webpay": [
    "Transbank - Webpay",
    "Suggest Edits",
    "This page presents all information related to the Transbank connection using Webpay as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Maximum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, activated in merchant level.",
    "TRX without CVV",
    ":",
    "Yes, must be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Minimum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Maximum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Endpoint for disputes",
    ":",
    "No",
    "Security",
    "3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant Code, Secret Key.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "Date",
    "CVV",
    "Result",
    "VISA",
    "4051 8856 0044 6623",
    "Any expiration date",
    "123",
    "Approved",
    "AMEX",
    "3700 0000 0002 032",
    "Any expiration date",
    "123",
    "Approved",
    "MASTERCARD",
    "5186 0595 5959 0568",
    "Any expiration date",
    "123",
    "Rejected",
    "Prepaid VISA",
    "4051 8860 0005 6590",
    "Any expiration date",
    "123",
    "Approved",
    "Prepaid MASTERCARD",
    "5186 1741 1062 9480",
    "Any expiration date",
    "123",
    "Rejected",
    "Limitations/Specifications for testing",
    ":",
    "Transbank has a set of",
    "credentials",
    "for the 'integration environment'.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Transbank TAM. Ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Transbank",
    ".",
    "Select your",
    "Integration Type",
    ".",
    "Select cards as your",
    "Payment Method",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant Code",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transbank-webpay-mall": [
    "Transbank Mall - WebPay",
    "Suggest Edits",
    "This page presents all information related to the Transbank connection using Webpay as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Chile",
    "Currencies",
    ":",
    "CLP",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Minimum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Maximum amount",
    ":",
    "Defined with Transbank according to the merchant.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Yes, activated in merchant level.",
    "TRX without CVV",
    ":",
    "Yes, must be activated.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "180 days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "No",
    "Deferral date availability",
    ":",
    "No",
    "Minimum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Maximum number of installments (#months)",
    ":",
    "Depends on BIN.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Endpoint for disputes",
    ":",
    "No",
    "Security",
    "3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant Code Mall, Merchant Code and Secret Key.",
    "Test cards",
    ":",
    "Card Brand",
    "PAN",
    "Date",
    "CVV",
    "Result",
    "VISA",
    "4051 8856 0044 6623",
    "Any expiration date",
    "123",
    "Approved",
    "AMEX",
    "3700 0000 0002 032",
    "Any expiration date",
    "123",
    "Approved",
    "MASTERCARD",
    "5186 0595 5959 0568",
    "Any expiration date",
    "123",
    "Rejected",
    "Prepaid VISA",
    "4051 8860 0005 6590",
    "Any expiration date",
    "123",
    "Approved",
    "Prepaid MASTERCARD",
    "5186 1741 1062 9480",
    "Any expiration date",
    "123",
    "Rejected",
    "Limitations/Specifications for testing",
    ":",
    "Transbank has a set of",
    "credentials",
    "for the 'integration environment'.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Email your Transbank TAM. Ask for your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Transbank",
    ".",
    "Select your",
    "Integration Type",
    ".",
    "Select cards as your",
    "Payment Method",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant Code Mall",
    ",",
    "Merchant Code",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/transfeera-pix": [
    "Transfeera - PIX",
    "Suggest Edits",
    "This page presents all information related to the Transfeera connection using Pix as payment method. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "No mandatory fields are required. However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Brazil",
    "Currencies",
    ":",
    "BRL.",
    "Payment methods",
    ":",
    "Bank Transfer",
    "Purchase TRX in 1-Step",
    ":",
    "Shoppers can pay with Pix when shopping online.",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "90 days.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Void to authorization",
    ":",
    "No",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Client ID, Client Secret and Pix key.",
    "Pix testing Keys",
    ":",
    "Email",
    "Key Error",
    "chave.pix15@transfeera.com",
    "PIX key not found.",
    "chave.pix16@transfeera.com",
    "It is not possible to make PIX for salary.",
    "account.chave.pix25@transfeera.com",
    "After a few attempts we were unable to send the transfer to the destination.",
    "bank.chave.pix35@transfeera.com",
    "CPF/CNPJ entered for payment differs from the CPF/CNPJ of the key holder.",
    "Random Key",
    "Key Error",
    "3718a543-bd10-4488-8b6b-f71aef289815",
    "PIX key not found.",
    "3718a543-bd10-4488-8b6b-f71aef289816",
    "It is not possible to make PIX for salary account.",
    "3718a543-bd10-4488-8b6b-f71aef289825",
    "After a few attempts we were unable to send the transfer to the destination bank.",
    "3718a543-bd10-4488-8b6b-f71aef289835",
    "CPF/CNPJ entered for payment differs from the CPF/CNPJ of the key holder.",
    "Telephone",
    "Key Error",
    "+5511912341215",
    "PIX key not found.",
    "+5511912341216",
    "It is not possible to make PIX for salary account.",
    "+5511912341225",
    "After a few attempts we were unable to send the transfer to the destination bank.",
    "+5511912341235",
    "CPF/CNPJ entered for payment differs from the CPF/CNPJ of the key holder.",
    "CPF",
    "Key Error",
    "784.933.530-94",
    "PIX key not found.",
    "827.188.890-04",
    "It is not possible to make PIX for salary account.",
    "962.348.940-46",
    "After a few attempts we were unable to send the transfer to the destination bank.",
    "CNPJ",
    "Key Error",
    "98.702.951/0001-07",
    "PIX key not found.",
    "65.142.521/0001-29",
    "It is not possible to make PIX for salary account.",
    "63.071.277/0001-25",
    "After a few attempts we were unable to send the transfer to the destination bank.",
    "Limitations/Specifications for testing",
    ":",
    "Documents (CPF, CNPJ) mapped for certain errors:",
    "CPF",
    "CNPJ",
    "Error",
    "784.933.530-94",
    "98.702.951/0001-07",
    "Account not found.",
    "827.188.890-04",
    "65.142.521/0001-29",
    "Payee account does not exist or has been closed.",
    "962.348.940-46",
    "63.071.277/0001-25",
    "Blocked account.",
    "926.942.600-98",
    "85.654.686/0001-97",
    "Closed checking or savings account.",
    "113.190.500-85",
    "55.008.244/0001-02",
    "Recipient account with no credit limit.",
    "780.562.600-64",
    "66.165.355/0001-49",
    "Credit to this recipient not allowed.",
    "907.046.230-30",
    "47.095.043/0001-61",
    "Current account not found. Recipient only has a savings account.",
    "376.775.520-30",
    "52.746.896/0001-56",
    "Savings account closed.",
    "994.646.220-67",
    "55.165.068/0001-12",
    "Incorrect recipient data.",
    "182.962.650-79",
    "64.385.962/0001-99",
    "Informed data not found in the target database.",
    "210.578.740-19",
    "65.410.909/0001-63",
    "CPF/CNPJ entered for payment differs from the holder's CPF/CNPJ at the Bank.",
    "855.326.670-20",
    "94.607.997/0001-96",
    "Document informed CPF/CNPJ has blockage and cannot receive payments.",
    "806.449.500-80",
    "67.876.823/0001-56",
    "Invalid account type and/or that does not allow to receive transfers/payments from third parties.",
    "404.165.650-85",
    "72.804.989/0001-05",
    "TED returned by the bank.",
    "810.629.890-66",
    "74.809.620/0001-02",
    "TED returned by the bank, CPF/CNPJ divergence.",
    "649.336.250-42",
    "75.513.791/0001-52",
    "Rejected by the recipient's bank.",
    "239.039.420-57",
    "47.173.392/0001-54",
    "Agency not found.",
    "654.431.590-70",
    "28.764.389/0001-60",
    "Agency not found or disabled.",
    "955.974.820-33",
    "90.470.704/0001-10",
    "Receiver agency disabled.",
    "566.514.660-97",
    "68.229.197/0001-79",
    "Transaction not allowed, credit amount returned by the recipient's bank.",
    "793.802.200-49",
    "94.554.773/0001-63",
    "Transaction not allowed, amount returned by the recipient's bank.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Credentials:",
    "Log in to",
    "Transfeera dashboard",
    ".",
    "Click on the menu at the upper right corner.",
    "In the dropdown menu select “Área do desenvolvedor”.",
    "Generate the credentials in the section “Credenciais para API Pagamentos”.",
    "Pix Key:",
    "Log in to",
    "Transfeera dashboard",
    ".",
    "Go to “Configurações“.",
    "Add your PIX Key in the section “Suas chaves Pix cadastradas na Transfeera”.",
    "Follow the steps to register\"\".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Transfeera",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Client ID",
    ",",
    "Client Secret",
    "and",
    "Pix key",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Ask your Transfeera's TAM to configure webhooks."
  ],
  "https://docs.y.uno/docs/unlimint-cards": [
    "Unlimint - Cards",
    "Suggest Edits",
    "This page presents all information related to the Unlimint connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "IP",
    "card_holder_name>",
    "*However, there is a possibility that the provider requests additional fields according to the merchant or to improve the approval rate",
    "General information",
    "Countries",
    ":",
    "For low risk all countries are supported for Visa/MC",
    "except",
    "Cuba, Iran, The Sudan, Syria, Venezuela, Myanmar, Korea (the Democratic People's Republic), Western Sahara, Kosovo, Nicaragua, Afghanistan, Yemen, Mali, Zimbabwe and South Sudan. For each high risk category the list of countries is different.",
    "Currencies",
    ":",
    "Shopper can pay in any currency, but card must be linked to EUR or USD (Unlimint issuing Visa / MasterCard cards in EUR or USD currencies).",
    "For all card transactions in a currency other than Card currency, conversion of the amount takes place at the prevailing exchange rate of the relevant Card Association with a 3% mark up (currency exchange fee). The variable Card Association rate and currency exchange fee is applied without notice at the date and time when the relevant Card Association processes the transaction, which may be different from the transaction date.",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "Maximum amount",
    ":",
    "25000 EUR/USD",
    "TRX limit",
    ":",
    "No limit.",
    "International BIN",
    ":",
    "On local acquiring BRL only BRL Bins area accepted, on Mexican only MXN. Generally, on international acquiring, opened BINs depend on business vertical.",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Supported recurrent payments:",
    "One-click payments",
    "Scheduled payments",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "No",
    "Multiple captures",
    ":",
    "No",
    "Maximum time to capture an authorization",
    ":",
    "If merchant doesn't send complete, payment will be completed automatically in 7 calendar days by default. However, it is configurable with Unlimint.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to request refund",
    ":",
    "No restrictions.",
    "Time to process refund",
    ":",
    "From Unlimint, the request for a refund goes away instantly, and the rest depends on the client's bank.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes. Important: To enable Installment payments please contact Unlimint support/manager",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Yes",
    "Conditions or restrictions",
    ":",
    "Important",
    ": countries in description below - are card issuer countries",
    "Mexico",
    "Installment payments type in use: Issuer financed (IF).",
    "Supported cards:",
    "Brand: MasterCard, Visa, Amex, Carnet (and subbrands)",
    "Type: credit cards",
    "Available Installment payments numbers: 3, 6, 9, 12, or 18",
    "Brazil",
    "Installment payments type in use: Merchant financed (MF_HOLD).",
    "Supported cards: Only credit cards.",
    "Available Installment payments numbers: 2-12",
    "Grace period",
    ":",
    "Available for suscriptions.",
    "Minimum number of Installments (#months)",
    ":",
    "Mexico: 3",
    "Brasil: 2",
    "Maximum number of Installments (#months)",
    ":",
    "Mexico: 18",
    "Brasil: 12",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "It depends on the type of chargeback and card scheme, but for consumer disputes, it's usually 120 days from the transaction/delivery date (the maximum timeframe is 540 days from the transaction date).",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Merchant has 10 days to provide Unlimint with a decision regarding the received chargeback via Dashboard.",
    "Security",
    "Address verification service",
    ":",
    "AVS (address verification service) is applicable to UK and US billing addresses only.",
    "Support for 0Auth",
    ":",
    "No",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Terminal ID, Terminal Password and Callback Secret.",
    "Visa test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "4000000000000085",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "4580000000000059",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "4000000000000093",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "4000000000000051",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "4000000000000077",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "4444444444444455",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "4444444444449777",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "Maestro test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "5000000000000025",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "5000000000000033",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "5666666666666955",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "Discover test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "6500000000000895",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "6500000000000069",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "6011000000000053",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "6011000000000251",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "6011000000000087",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "6445222222222275",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "6445222222221277",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "JCB test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "3528000000000015",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "3528000000000023",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "3528000000000049",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "3528000000000551",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "3528000000000007",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "3535555555555185",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "3535555555553677",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "UnionPay test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "6222020000000085",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "8171000000000000079",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "6200000000000053",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "6200000000000000",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "6222020000000037",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "8171111111111111195",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "6200000000001111",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "MIR test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "2201380000000785",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "2201380000000819",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "2201000000000000093",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "2201380000000751",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "2201000000000557",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "2200222222222295",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "2200222222221677",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "Amex test cards",
    ":",
    "Card PAN",
    "3-D Secure result",
    "Transaction result",
    "370000000000085",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has CONFIRMED status",
    "340000000000033",
    "3-D secure version 2, frictionless flow, success",
    "Payment has CONFIRMED status",
    "340000000000009",
    "3-D secure version 2, frictionless flow, attempt",
    "Payment has CONFIRMED status",
    "370000000000051",
    "No 3-D Secure",
    "Payment has AUTHORIZED status",
    "340000000000017",
    "No 3-D Secure",
    "Payment has CONFIRMED status",
    "371111111111155",
    "3-D secure version 2, challenge flow, full authentication",
    "Payment has DECLINED status",
    "341111111111137",
    "No 3-D Secure",
    "Payment has DECLINED status",
    "Additional card testing information",
    ":",
    "If merchant receives non-financial error codes or technical error codes, he needs to contact Unlimint manager.",
    "Merchant uses any cardholder name, expiry date and CVV2/CVC2/CAV2 (Secure code) with these PANs.",
    "For successful Address verification request (AVS code =",
    "-1",
    ") should be used following values of the parameters:",
    "billing_address.country:",
    "GB",
    "billing_address.city:",
    "London",
    "billing_address.addr_line_1:",
    "221b, Baker Street",
    "billing_address.addr_line_2:",
    "empty",
    "billing_address.zip:",
    "NW1 6XE",
    "(see",
    "AVS request",
    "page).",
    "*For declined Address Verification request should be used any other billing_address field values.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to Unlimint dashboard (",
    "Sandbox Dashboard",
    "/",
    "Production Dashboard",
    ").",
    "Click on your profile in the upper right and click on",
    "Settings",
    ".",
    "Go to",
    "Wallet settings",
    "in the left menu.",
    "Select the terminal you need to get details from by selecting the",
    "ID",
    ".",
    "Go to the",
    "Credentials",
    "section and copy the",
    "Terminal Password",
    "and",
    "Callback Secret",
    ".",
    "Be aware of: Credentials for this terminal will be shown ONLY ONCE upon \"Show credentials\" control activation.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Unlimint",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Terminal Password",
    "and",
    "Callback Secret",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to Unlimint dashboard (",
    "Sandbox Dashboard",
    "/",
    "Production Dashboard",
    ").",
    "Click on your profile in the upper right and click on",
    "Settings",
    ".",
    "Go to",
    "Wallet settings",
    "in the left menu.",
    "Select the terminal you need to get details from by selecting the",
    "ID",
    ".",
    "Go to the",
    "Callbacks",
    "section and complete with the URL that corresponds to the environment you are setting up.",
    "Click on",
    "Confirm",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "After you have done the testing carefully on Sandbox and are ready to go live, you can request production wallets and then go live. No need for a UAT test between your system and Unlimint in production.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/unlimint-checkout": [
    "Unlimint - Checkout",
    "Suggest Edits",
    "This page presents all information related to the Unlimint connection using Checkout as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "document_type",
    "document_number",
    "General information",
    "Countries",
    ":",
    "Colombia",
    "Argentina",
    "Mexico",
    "Peru",
    "Currencies",
    ":",
    "ARS, COP, MXN, PEN, USD",
    "Payment methods",
    ":",
    "Efecty",
    "PSE",
    "SPEI",
    "Pago Efectivo",
    "Paycash",
    "Paynet",
    "Purchase TRX",
    ":",
    "Bank Transfers and Cash",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Terminal ID, Terminal Password and Callback Secret.",
    "Limitations/Specifications for testing",
    ":",
    "Here is how Merchant can emulate payment case for",
    "Convenience store",
    ",",
    "SPEI",
    ",",
    "Efecty",
    ":",
    "payment (customer.email parameter, see",
    "Customer",
    "structure):",
    "decline@decline.com: DECLINED",
    "any valid: CONFIRMED",
    "Here is how Merchant can emulate payout case for",
    "Convenience store",
    ":",
    "payout (ewallet_account.id parameter, see",
    "EWalletAccount",
    "structure):",
    "883000000000-00: DECLINED",
    "any valid: CONFIRMED",
    "Here is how Merchant can emulate payout case for",
    "SPEI",
    ":",
    "payout (customer.email parameter, see",
    "Customer",
    "structure):",
    "decline@decline.com: DECLINED",
    "any valid: CONFIRMED",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to Unlimint dashboard (",
    "Sandbox Dashboard",
    "/",
    "Production Dashboard",
    ").",
    "Click on your profile in the upper right and click on",
    "Settings",
    ".",
    "Go to",
    "Wallet settings",
    "in the left menu.",
    "Select the terminal you need to get details from by selecting the",
    "ID",
    ".",
    "Go to the",
    "Credentials",
    "section and copy the",
    "Terminal Password",
    "and",
    "Callback Secret",
    ".",
    "Be aware of: Credentials for this terminal will be shown ONLY ONCE upon \"Show credentials\" control activation.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Unlimint",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Terminal Password",
    "and",
    "Callback Secret",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to Unlimint dashboard (",
    "Sandbox Dashboard",
    "/",
    "Production Dashboard",
    ").",
    "Click on your profile in the upper right and click on",
    "Settings",
    ".",
    "Go to",
    "Wallet settings",
    "in the left menu.",
    "Select the terminal you need to get details from by selecting the",
    "ID",
    ".",
    "Go to the",
    "Callbacks",
    "section and complete with the URL that corresponds to the environment you are setting up.",
    "Click on",
    "Confirm",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "After you have done the testing carefully on Sandbox and are ready to go live, you can request production wallets and then go live. No need for a UAT test between your system and Unlimint in production.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wibond-bnpl": [
    "Wibond - BNPL",
    "Suggest Edits",
    "This page presents all information about the Wibond connection using Buy Now, and Pay Later as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Cancellation",
    "Installments",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "country(transaction)",
    "General Information",
    "Countries",
    ":",
    "Argentina",
    "Chile",
    "Currencies",
    ":",
    "ARS, CLP",
    "Minimum amount",
    ":",
    "Everything depends on the available limits of each person. People can access from a 50.000 loan to a 1.000.000 loan, depending on their credit profile.",
    "Maximum amount",
    ":",
    "Everything depends on the available limits of each person. People can access from a 50.000 loan to a 1.000.000 loan, depending on their credit profile.",
    "TRX Limit",
    ":",
    "Users can make 3 transactions per month.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Cancelation",
    "Cancelation support",
    ":",
    "The shopper must:",
    "Notify the merchant and/or Wibond their decision via e-mail hola@wibond.co.",
    "In case the product has been received, it must be returned to the commerce in the same conditions.",
    "The merchant must:",
    "Accept the return and asume the charges that this carries, including the delivery costs.",
    "Give the money of the product or service immediately to the shopper or Wibond, as appropiate.",
    "Installments",
    "Note",
    ":",
    "Refering to the installments the shopper pays to Wibond.",
    "Capability to define the installments when creating the payment",
    ":",
    "No, you will POST all the information required to create the Payment Link, then you will receive a URL to redirect your customer to Wibond where he will select the payment plan that best adapts.",
    "Conditions or restrictions",
    ":",
    "In Wibond you will be able to pay and find possibilities to do it right away, in 1, 3, 6 and up to 12 installments. Depends on eeach purchase. There is not a fixed credit amount as with credit cards. The system presents payment plans according to the merchant, the product and the shopper's profile in real time, this is why results are always different. Payments are 100% custom-made and subject to approval.",
    "Minimum number of installments (#months)",
    ":",
    "1",
    "Maximum number of installments (#months)",
    ":",
    "12",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Tenant ID, Wallet ID and Secret Key.",
    "Testing steps",
    "The Wibond sandbox environment works the same as the one in production. To make a test payment, you need to go through a verification process first in order to get your account.",
    "Once you have your Wibond account, you will need to enter Wibond's checkout and proceed with the payment using any random information. To finish, select to pay with installments.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to Wibond's",
    "dashboard",
    ".",
    "Go to",
    "Account/Wallet",
    "in the left menu.",
    "Click on",
    "Account",
    ".",
    "Click on",
    "Developer",
    ".",
    "Get your credentials.",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wibond",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Tenant ID",
    ",",
    "Wallet ID",
    "and",
    "Secret Key",
    ".",
    "Click",
    "Connect",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "The notification URL must be sent in the payment link.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "In the preprod environment a merchant and buyer account can be created to make tests. It is important to notify Wibond's commercial team to assign the available limit for the shopper account, so tests can be made.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi-bancolombia": [
    "Wompi - Bancolombia",
    "Suggest Edits",
    "This page presents all information related to the Wompi connection using the Bancolombia as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "country(transaction)",
    "General Information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "15.000.000 COP daily per client.",
    "TRX Limit",
    ":",
    "150 transactions per second.",
    "Purchase TRX",
    ":",
    "Allows your customers to pay using their savings or checking account from Bancolombia.",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "No",
    "Particularities",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No, in case of requiring a refund, the merchant must make a new transfer from its account to the shopper's.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public key, private key and Eventos.",
    "Limitations/ Specifications for testing",
    ":",
    "For button Bancolombia payments, in the case of API integrations, you must send a",
    "sandbox_status",
    "within",
    "payment_method",
    ", when creating a transaction (using",
    "POST/ transactions",
    "endpoint).",
    "In the Widget, the following options will be available:",
    "Transacción APROBADA:",
    "For approved transactions.",
    "Transacción DECLINADA:",
    "For declined transactions.",
    "Transacción con ERROR:",
    "For transactions with an error.",
    "Testing steps",
    "Bancolombia Transfer does not have a sandbox environment to interact with the end user. The payment is directly approved after sending the request to the provider in the first instance.",
    "In order to make a payment using Bancolombia Transfer, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Create One Time Token / Get the token from SDK. The total amount should be bigger than COP 1500.",
    "Create Payment",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Get your API keys (",
    "public key",
    "and",
    "private key",
    ") and Secrets (",
    "Eventos",
    "and",
    "Integridad",
    ") for technical integration.",
    "There are a pair of keys for each execution environment one for Sandbox and another for Production, the keys shown correspond to the activated environment:",
    "- For Sandbox the keys have a prefix pub_test_ and prv_test_",
    "- For Production the keys have a prefix pub_prod_ and prv_prod_",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wompi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Public Key",
    ",",
    "Private Key",
    ",",
    "Eventos",
    "and the company's",
    "NIT",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Set up your",
    "Event URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi-cards": [
    "Wompi - Cards",
    "Suggest Edits",
    "This page presents all information related to the Wompi connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General Information",
    "Countries available",
    ":",
    "Colombia",
    "Panama",
    "Currencies available",
    ":",
    "COP, USD",
    "Payment methods available",
    ":",
    "Credit card",
    "Debit card",
    "Minimum payment amount",
    ":",
    "1.500 COP",
    "Maximum payment amount",
    ":",
    "Subject to credit limit, the maximum amount to process a transaction is 99.000.000 COP.",
    "TRX Limit",
    ":",
    "150 transactions per second.",
    "Support of international BIN",
    ":",
    "Yes",
    "Activation of functionality",
    ":",
    "Not necessary",
    "TRX without CVV",
    ":",
    "Yes, clients who activate this functionality must have their own security monitoring.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization only available on API integration.",
    "Webhooks availability",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Yes",
    "Maximum time to capture an authorization",
    ":",
    "Generally 5 days but depends on issuing bank.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund Support",
    ":",
    "Yes, for credit cards.",
    "Partial refunds",
    ":",
    "No",
    "Multiple refunds",
    ":",
    "No",
    "Time to request refund",
    ":",
    "The refund must be requested directly from the merchant to Wompi. They have 180 days after the purchase. No",
    "Time to process refund",
    ":",
    "Approximately 10 working days.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "No",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "No",
    "Possibility to choose who will be responsible for financing the installments",
    ":",
    "No",
    "Conditions or restrictions",
    ":",
    "The merchant will indicate the installments. However, the shopper must consent with the number of installments.",
    "Deferral date availability",
    ":",
    "No",
    "Grace period",
    ":",
    "Varies depending on the issuing bank.",
    "Minimum number of installments (#months)",
    ":",
    "Varies depending on the issuing bank and credit card provider.",
    "Maximum number of installments (#months)",
    ":",
    "Varies depending on the issuing bank and credit card provider.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "120 working days for national credit cards and 180 working days for international credit cards.",
    "Endpoint for disputes",
    ":",
    "No",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "5 working days.",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public key, private key and Eventos.",
    "Test cards",
    ":",
    "4242 4242 4242 4242",
    "for an approved transaction (APPROVED). Any future expiry date and 3 digit CVC is valid.",
    "4111 1111 1111 1111",
    "for a declined transaction (DECLINED). Any future expiry date and 3 digit CVC is valid.",
    "*If you use any other card that is not one of the aforementioned ones, the final state of you transaction will be ERROR.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Get your API keys (",
    "public key",
    "and",
    "private key",
    ") and Secrets (",
    "Eventos",
    "and",
    "Integridad",
    ") for technical integration.",
    "There are a pair of keys for each execution environment one for Sandbox and another for Production, the keys shown correspond to the activated environment:",
    "- For Sandbox the keys have a prefix pub_test_ and prv_test_",
    "- For Production the keys have a prefix pub_prod_ and prv_prod_",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wompi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Public Key",
    ",",
    "Private Key",
    ",",
    "Eventos",
    "and the company's",
    "NIT",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Set up your",
    "Event URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi-nequi": [
    "Wompi - Nequi",
    "Suggest Edits",
    "This page presents all information related to the Wompi connection using the Nequi as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "telephone_number",
    "country(transaction)",
    "General Information",
    "Countries",
    ":",
    "Colombia",
    "Panama",
    "Currencies",
    ":",
    "COP, USD",
    "Minimum amount",
    ":",
    "No",
    "Maximum amount",
    ":",
    "$9.280.000, 8 minimum wages in Colombia. If it is an account without limits (traditional) there is not a maximum amount.",
    "TRX Limit",
    ":",
    "150 transactions per second.",
    "Purchase TRX",
    ":",
    "Allows your customers to pay with Nequi using their cellphone to complete the payment.",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization only available on API integration.",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public key, private key and Eventos.",
    "To create an approved or declined transaction in Sandbox mode you only need use the following numbers:",
    "- 3991111111 for an approved transaction (APPROVED)",
    "- 3992222222 for a declined transaction (DECLINED)",
    "Take into account that any other number which you use will result in a transaction with a final state of ERROR.",
    "Testing steps",
    "Nequi works as an enrolled payment method, meaning you'll need to enroll it before making a payment. The payment gets automatically approved, but you can test different scenarios for enrollment.",
    "In order to make a payment using Nequi, you should complete the following steps:",
    "Create Customer",
    "To perform approved or rejected ENROLLMENTS in Nequi's Sandbox environment, you have to assign the following phone numbers to the customer:",
    "3991111111",
    "to automatically enroll and generate an approved transaction (",
    "APPROVED",
    ")",
    "3992222222",
    "to generate a declined transaction (",
    "DECLINED",
    ")",
    "📘",
    "Note",
    "Keep in mind that any other number you use will result in a transaction with a final status of",
    "ERROR",
    ".",
    "Create Customer Session",
    "Retrieve Payment Methods Available",
    "(Optional)",
    "Enroll Payment Method",
    ". The Enroll Payment Method response will provide the status READY_TO_ENROLL.",
    "Retrieve Payment Method by Customer Session",
    ". As explained in step 1, the response will automatically provide the status  ENROLLED if the",
    "3991111111",
    "phone number was used.",
    "Create Checkout Session",
    "Retrieve Payment Methods for Checkout",
    ". The response will provide a list of payment methods available. You should find the Nequi object, which will contain the",
    "vaulted_token",
    "to be used to create the payment.",
    "Create Payment",
    "using the",
    "vaulted_token",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Get your API keys (",
    "public key",
    "and",
    "private key",
    ") and Secrets (",
    "Eventos",
    "and",
    "Integridad",
    ") for technical integration.",
    "There are a pair of keys for each execution environment one for Sandbox and another for Production, the keys shown correspond to the activated environment:",
    "- For Sandbox the keys have a prefix pub_test_ and prv_test_",
    "- For Production the keys have a prefix pub_prod_ and prv_prod_",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wompi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Public Key",
    ",",
    "Private Key",
    ",",
    "Eventos",
    "and the company's",
    "NIT",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Set up your",
    "Event URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi-pse": [
    "Wompi - PSE",
    "Suggest Edits",
    "This page presents all information related to the Wompi connection using the PSE as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "email",
    "document_type",
    "document_number",
    "telephone_number",
    "telephone_country_code",
    "bank_id",
    "General Information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "Amounts are subject to the client's configuration from their channel.",
    "TRX Limit",
    ":",
    "150 transactions per second.",
    "TRX without CVV",
    ":",
    "No",
    "Purchase TRX",
    ":",
    "Allows your customers to pay with PSE using the savings or checking account from any Colombian bank.",
    "Support for recurrency",
    ":",
    "No",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No",
    "Voids",
    "Void support",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public key, private key and Eventos.",
    "Limitations/ Specifications for testing",
    ":",
    "In the case of API integrations, you must send a specific",
    "financial_institution_code",
    "within",
    "payment_method",
    ", when creating a transaction (using",
    "POST /transactions",
    "endpoint).",
    "In the Widget, only two banks will be available, which will return specific transaction results:",
    "Banco que aprueba:",
    "This will return an approved PSE transaction.",
    "Banco que rechaza:",
    "This will return a rejected PSE transaction.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Get your API keys (",
    "public key",
    "and",
    "private key",
    ") and Secrets (",
    "Eventos",
    "and",
    "Integridad",
    ") for technical integration.",
    "There are a pair of keys for each execution environment one for Sandbox and another for Production, the keys shown correspond to the activated environment:",
    "- For Sandbox the keys have a prefix pub_test_ and prv_test_",
    "- For Production the keys have a prefix pub_prod_ and prv_prod_",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wompi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Public Key",
    ",",
    "Private Key",
    ",",
    "Eventos",
    "and the company's",
    "NIT",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Set up your",
    "Event URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wompi-tokenbox": [
    "Wompi - TokenBox",
    "Suggest Edits",
    "This page presents all information related to the Wompi connection using the TokenBox as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Refunds",
    "Voids",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "email",
    "country(transaction)",
    "General Information",
    "Countries",
    ":",
    "Colombia",
    "Currencies",
    ":",
    "COP",
    "Minimum amount",
    ":",
    "1.500 COP",
    "Maximum amount",
    ":",
    "Depends on the transactional limits of the shoppers in accordance with what is stablished in their digital channels.",
    "TRX Limit",
    ":",
    "150 transactions per second.",
    "Purchase TRX in 1-Step",
    ":",
    "Allows your customers to pay using their savings or checking account from Bancolombia in an easy and fast way through tokenization.",
    "Purchase TRX in 2-Step",
    ":",
    "No",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Tokenization",
    "Webhooks",
    ":",
    "Yes",
    "Refunds",
    "Refund Support",
    ":",
    "No, in case of requiring a refund, the merchant must make a new transfer from its account to the shopper's.",
    "Voids",
    "Void support",
    ":",
    "No",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "No",
    "Security",
    "E3DS v2",
    ":",
    "No",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Public key, private key and Eventos.",
    "Limitations/ Specifications for testing",
    ":",
    "In the token authorization flow",
    ":",
    "Username can take any value.",
    "There are a series of buttons to test differents flows.",
    "The only valid value for the dynamic key is 123456.",
    "There are listed accounts in testing, choosing any of them will result in a succesful authorization.",
    "Testing steps",
    "Bancolombia Tokenbox works as an enrolled payment method. Therefore, you will need to start enrolling it before making a payment. Similar to the Bancolombia transfer, the payment gets automatically approved. However, with Bancolombia, you can test different scenarios for enrollment.",
    "In order to make a payment using Bancolombia Tokenbox, you should complete the following steps:",
    "Create Customer",
    "Create Checkout Session",
    "Retrieve Payment Methods\n      Available",
    "Enroll Payment Method",
    "Retrieve Payment\n      Method by Customer Session",
    "To complete the enrollment in the Banbox environment, use the redirect URL (provider.redirect.init_url) to\n      follow the next steps and complete the enrollment:",
    "User",
    ": This can be any email with the correct format. For example: test@y.uno.",
    "4-digit password",
    ": This can be any 4-digit password. For example: 1234. At that stage, you can choose\n        the result of your enrollment.",
    "Dynamic key",
    ": Can be any 6-digit number. For example: 123456.",
    "Select account",
    ": This could be any of the accounts already available for testing.",
    "Create Checkout Session",
    "Retrieve Payment Methods Available for Checkout",
    "Create Payment",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Get your API keys (",
    "public key",
    "and",
    "private key",
    ") and Secrets (",
    "Eventos",
    "and",
    "Integridad",
    ") for technical integration.",
    "There are a pair of keys for each execution environment one for Sandbox and another for Production, the keys shown correspond to the activated environment:",
    "- For Sandbox the keys have a prefix pub_test_ and prv_test_",
    "- For Production the keys have a prefix pub_prod_ and prv_prod_",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Wompi",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Public Key",
    ",",
    "Private Key",
    ",",
    "Eventos",
    "and the company's",
    "NIT",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Via dashboard",
    ":",
    "Log in to",
    "Wompi dashboard",
    ".",
    "Navigate to",
    "Developers",
    ".",
    "Set up your",
    "Event URL",
    ".",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "No",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/worldpay-cards": [
    "Worldpay - Cards",
    "Suggest Edits",
    "This page presents all information related to the Worldpay connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "card_holder_name",
    "ip_address",
    "*However, the provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Albania",
    "Åland Islands",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Brazil",
    "British Indian Ocean Territory",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cabo Verde",
    "Cameroon",
    "Canada",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos Islands",
    "Colombia",
    "Comoros",
    "Cook Islands",
    "Costa Rica",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Djibouti",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Estonia",
    "Ethiopia",
    "Falkland Islands",
    "Faroe Islands",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Holy See",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Ireland",
    "Isle",
    "Israel",
    "Italy",
    "Jamaica",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Kyrgyzstan",
    "Laos",
    "Latvia",
    "Lesotho",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Réunion",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Solomon Islands",
    "South Africa",
    "Spain",
    "Sri Lanka",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Currencies",
    ":",
    "ARS, AUD, BRL, CAD, CHF, CLP, CNY, COP, CZK, DKK, EUR, GBP, HKD, HUF, IDR, ISK, JPY, KES, KRW, MXN, MYR,\n        NOK, NZD, PHP, PLN, SEK, SGD, THB, TWD, USD, VND, ZAR",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Prepaid card",
    "TRX without CVV",
    ":",
    "Yes",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Yes",
    "Particularities",
    ":",
    "Can only be performed as a follow up from an original card on file payment when your customer was\n            authenticated and agreed to a standing instruction.",
    "You must declare the intent for all recurring payments, either: subscription, instalment or\n            unscheduled.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "In general only one capture (partial or full) can be done for each authorised payment. You may have a special arrangement with Worldpay, which enables you to perform multiple partial captures on a single order.",
    "Maximum time to capture an authorization",
    ":",
    "14 days (a setting of no more than four days is highly recommended).",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes",
    "Time to process refund",
    ":",
    "3-6 weeks to be processed depending on the acquirer.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "Additional considerations of installments",
    ":",
    "If you're allowing your shoppers to pay in installments, you can choose a different first installment amount. This is useful if you want to add a shipping or processing fee. This is not available with all acquirers in Latin America. Please consult your Implementation Manager before using this feature.",
    "Number of installments (#months)",
    ":",
    "Depends on agreement of merchant with acquirer. In LATAM:",
    "Brazil and Argentina: Up to 12 instalments.",
    "Mexico: Up to 18 sequential instalments: 3, 6, 9, 10, 12, 15, 18.",
    "Colombia: Up to 12 instalments without interest. Up to 48 instalments with interest. Sequential instalments: 3,6,9,10,12,18,24,36,48.",
    "Peru and Central America: Up to 48 sequential instalments: 3, 6, 9, 10, 12, 18, 24, 36, 48.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes",
    "Defined period to make a chargeback",
    ":",
    "A shopper can dispute a payment up to six months (sometimes longer) after the payment.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "Normally you have 12 days to defend the chargeback.",
    "Security",
    "Address verification service",
    ":",
    "Yes",
    "Support for 0Auth",
    ":",
    "Yes",
    "E3DS v2",
    ":",
    "Yes",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant Code, Username and Password",
    "Test cards",
    ":",
    "Card type",
    "Test card number",
    "Airplus",
    "122000000000003",
    "American Express",
    "343434343434343",
    "Cartebleue",
    "5555555555554444",
    "China Union Pay",
    "6221260062379699",
    "Dankort",
    "5019717010103742",
    "Diners",
    "36700102000000",
    "36148900647913",
    "Discover card",
    "6011000400000000",
    "JCB",
    "3528000700000000",
    "Maestro",
    "6759649826438453",
    "MasterCard",
    "5555555555554444",
    "5454545454545454",
    "2221000000000009",
    "MasterCard Debit",
    "5163613613613613",
    "Visa",
    "4444333322221111",
    "4911830000000",
    "4917610000000000",
    "Visa Debit",
    "4462030000000000",
    "4917610000000000003",
    "Visa Electron (UK only)",
    "4917300800000000",
    "Visa Purchasing",
    "4484070000000000",
    "Brazil test cards",
    ":",
    "Card type",
    "Test card number",
    "ELO",
    "4514 1600 0000 0003",
    "6550 0000 0000 0001",
    "Hipercard",
    "3841 0011 1122 2233 334",
    "6062 8288 8866 6688",
    "Aura",
    "As the Aura card is paired with Mastercard, and because it shares the same payment method mask, you will be able to submit",
    "Mastercard test card numbers",
    "to test your integration.",
    "Argentina test cards",
    ":",
    "Card type",
    "Test card number",
    "Argencard",
    "5010 9100 0000 0007",
    "5010 9500 0000 0006",
    "5011 0500 0000 0009",
    "5011 0800 0000 0005",
    "5011 1000 0000 0009",
    "Cabal",
    "5896 5700 0000 0004",
    "6035 2200 0000 0006",
    "6042 0000 0000 0004",
    "6043 0100 0000 0008",
    "Cencosud",
    "6034 9300 0000 0002",
    "Coope Plus",
    "6274 0100 0000 0007",
    "Credimas",
    "5045 2000 0000 0002",
    "Italcred",
    "5043 3800 0000 0005",
    "Naranja",
    "5895 6200 0000 0002",
    "Nativa",
    "4870 1700 0000 0004",
    "Nevada",
    "5043 6300 0000 0007",
    "Nexo",
    "6049 4000 0000 0003",
    "6281 6100 0000 0008",
    "Tarjeta Shopping",
    "5894 0700 0000 0004",
    "Limitations/ Specifications for testing",
    ":",
    "With these cards you can specify an expiry date up to seven years in the future. These cards do not have an issue number, a registered address or a card verification code (use the following CVC/CVV):",
    "Testing CVC/CVV",
    ":",
    "Magic value",
    "CVC/CVV result code",
    "CVC/CVV result description",
    "[Left blank]",
    "B - CVV/CVC not supplied by shopper/merchant",
    "NOT SUPPLIED BY SHOPPER",
    "111",
    "C - CVV/CVC not checked",
    "NOT SENT TO ACQUIRER",
    "222",
    "C - CVV/CVC not checked",
    "NO RESPONSE FROM ACQUIRER",
    "333",
    "C - CVV/CVC not checked",
    "NOT CHECKED BY ACQUIRER",
    "444",
    "D - CVV/CVC not matched",
    "FAILED",
    "555",
    "A - CVV/CVC matched",
    "APPROVED",
    "Testing CVC/CVV for American Express",
    ":",
    "Magic value",
    "CVC/CVV result code",
    "CVC/CVV result description",
    "[Left blank]",
    "B - CVV/CVC not supplied by shopper/merchant",
    "NOT SUPPLIED BY SHOPPER",
    "1111",
    "C - CVV/CVC not checked",
    "NOT SENT TO ACQUIRER",
    "2222",
    "C - CVV/CVC not checked",
    "NO RESPONSE FROM ACQUIRER",
    "3333",
    "C - CVV/CVC not checked",
    "NOT CHECKED BY ACQUIRER",
    "4444",
    "D - CVV/CVC not matched",
    "FAILED",
    "5555",
    "C - CVV/CVC not checked",
    "UNKNOWN",
    "6666",
    "A - CVV/CVC matched",
    "APPROVED",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Merchant Code: Your Implementation Manager (or support contact) at Wordlpay should have given you a merchantCode.",
    "Other credentials:",
    "Log in to the Merchant Administration Interface (",
    "Sandbox",
    "and",
    "Production",
    ").",
    "Click",
    "ACCOUNT",
    ", then select",
    "Profile",
    "from the top menu.",
    "Note your",
    "New Username",
    "for the connection.",
    "Click the pencil icon next to",
    "XML Password",
    ".",
    "Enter your new password and click",
    "Save XML Password",
    ".",
    "Configuration of webhooks in partner",
    ":",
    "Log in to the production Merchant Administration Interface (",
    "Production",
    ").",
    "*Note: To set up notifications in both the test and production environments, you need to log in to the production MAI",
    ".",
    "Click",
    "INTEGRATION",
    ", then select",
    "Merchant Channel",
    "from the top menu.",
    "In the",
    "Merchant Channels",
    "(Production and Test) areas:",
    "Activate the",
    "http",
    "channel and select xml under",
    "Content",
    ".",
    "Enter the",
    "Address",
    "to receive test and production notifications.",
    "In the",
    "Merchant Channel Events",
    "(Production and Test) areas, select the payment statuses you want to receive notifications on.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/worldline-cards": [
    "Worldline - Cards",
    "Suggest Edits",
    "This page presents all information related to the Worldline connection using Cards as payment. Use the following buttons to navigate to the desired section.",
    "General Information",
    "Captures",
    "Refunds",
    "Voids",
    "Installments",
    "Chargebacks",
    "Security",
    "Testing Guidelines",
    "Integration Configuration",
    "Production Environment",
    "Connecting with Yuno",
    "Mandatory fields when integrating via Yuno",
    ":",
    "first_name",
    "last_name",
    "country (transaction)",
    "*The provider may request additional fields according to the merchant or to improve the approval rate.",
    "General information",
    "Countries",
    ":",
    "Available in",
    "243 countries",
    "Currencies",
    ":",
    "Over 150 currencies",
    "Payment methods",
    ":",
    "Credit card",
    "Debit card",
    "Minimum amount",
    ":",
    "Depends on acquirer, normally 1 USD.",
    "Maximum amount",
    ":",
    "Depends on how the risk team categorizes the account.",
    "TRX limit",
    ":",
    "No",
    "Support of international BIN",
    ":",
    "Your consumers can pay in their own currency, as you can use our platform to process payments in over 150 currencies. You can choose in which currency/currencies you prefer to be settled, depending on the payment product used by your consumer.",
    "Activation of functionality",
    ":",
    "The merchant should arrange the functionality and the available currencies with Worldline's team.",
    "TRX without CVV",
    ":",
    "Yes. To use this service the merchant should make the necessary arrangements with the Acquirer/Issuer.",
    "Purchase TRX in 1-Step",
    ":",
    "Yes",
    "Purchase TRX in 2-Step",
    ":",
    "Yes",
    "Support for recurrency",
    ":",
    "Available for Colombia, Brasil and Mexico.",
    "Particularities",
    ":",
    "To use this service the merchant should make the necessary arrangements with the Acquirer/Issuer to enable this functionality.",
    "Webhooks",
    ":",
    "Yes",
    "Captures",
    "Partial capture",
    ":",
    "Yes",
    "Multiple captures",
    ":",
    "Yes, but there are some acquirers that don't.",
    "Maximum time to capture an authorization",
    ":",
    "Depends on acquirer, an average time would be 5 to 7 days.",
    "Captures over the amount of authorization",
    ":",
    "No",
    "Refunds",
    "Refund support",
    ":",
    "Yes",
    "Partial refunds",
    ":",
    "Yes",
    "Multiple refunds",
    ":",
    "Yes. Be aware that local card acquiring channels in Argentina, Brazil, Mexico and Colombia impose restrictions on multiple refunds.",
    "Time to request refund",
    ":",
    "180 days.",
    "Time to process refund",
    ":",
    "Few business days depending on the country and the payment product used to credit the consumer’s account.",
    "Voids",
    "Void support",
    ":",
    "Yes",
    "Void to authorization",
    ":",
    "Yes",
    "Void to refund",
    ":",
    "Yes",
    "Installments",
    "Capability to define the installments when creating the payment",
    ":",
    "Yes",
    "GET endpoint available for retrieving the permitted BIN for the installments",
    ":",
    "Yes",
    "Possibility to choose who will be responsible for financing installments",
    ":",
    "Yes, depending on installment plans (see below).",
    "Conditions or restrictions",
    ":",
    "Installment plans",
    "available for Argentina, Brazil, Chile, Colombia, Mexico, Peru and Uruguay.",
    "Deferral date availability",
    ":",
    "Yes. Some Issuers lets you apply a deferral date for the first installment; the remaining payments will be applied monthly after the first installment.",
    "Grace period",
    ":",
    "No",
    "Minimum number of Installments (#months)",
    ":",
    "Limit varies from acquirer.",
    "Maximum number of Installments (#months)",
    ":",
    "Limit varies from acquirer.",
    "Chargebacks",
    "Notifications of chargebacks",
    ":",
    "Yes, for the full service model.",
    "Defined period to make a chargeback",
    ":",
    "In average 4-6 months.",
    "Endpoint for disputes",
    ":",
    "Yes",
    "Maximum time to dispute a chargeback (provide evidence)",
    ":",
    "10 calendar days.",
    "Security",
    "E3DS v2",
    ":",
    "Available for Argentina, Brazil, Chile, Mexico and Peru.",
    "Testing guidelines for sandbox environment",
    "Necessary fields for testing",
    ":",
    "Merchant ID, API Key, Secret API Key, Webhook Key ID and Webhook Secret ID.",
    "Test cards",
    ":",
    "Test cards in the following links:",
    "Visa",
    "Mastercard",
    "American Express",
    "Mastercard Debit",
    "Diners Club",
    "Visa Debit",
    "For other type of cards go to",
    "payment methods",
    ", select the type and click on testing.",
    "Integration configuration",
    "Credentials and steps to obtain them",
    ":",
    "Log in to worldline's",
    "dashboard",
    "(testing:",
    "sandbox dashboard",
    ").",
    "Go to API keys section.",
    "Copy",
    "API Key ID",
    "and the",
    "Secret API Key",
    ".",
    "Log in to worldline's",
    "dashboard",
    "(testing:",
    "sandbox dashboard",
    ").",
    "Go to Merchant IDs section.",
    "Copy the number under",
    "Merchant ID",
    "column.",
    "Log in to worldline's",
    "dashboard",
    "(testing:",
    "sandbox dashboard",
    ").",
    "Go to Webhooks Keys section.",
    "Copy",
    "Key ID",
    "and the",
    "Secret Key",
    ".",
    "Dashboard configuration",
    ":",
    "Log in to",
    "dashboard.y.uno",
    ".",
    "Click",
    "Connections",
    "and then select",
    "Worldline",
    ".",
    "Click",
    "Connect",
    ".",
    "Introduce",
    "Name",
    ",",
    "Merchant ID",
    ",",
    "API Key",
    ",",
    "Secret API Key",
    ",",
    "Webhook Key ID",
    "and",
    "Webhook Secret ID",
    ".",
    "Click",
    "Connect",
    "Configuration of webhooks in partner",
    ":",
    "Log in to worldline's",
    "dashboard",
    "(testing:",
    "sandbox dashboard",
    ").",
    "Go to Webhooks Keys section.",
    "Click on add endpoint and configure the URL.",
    "Production environment",
    "Specific procedure for a merchant to go live",
    ":",
    "Tests in STAGING. When ready in STAGING, PRODUCTION is created and Worldline's integration team monitors the first transactions (1 week). After that, the merchant is officially integrated.",
    "Send feedback"
  ],
  "https://docs.y.uno/docs/wallets": [
    "Wallets",
    "Suggest Edits",
    "Here you find the complete list of Wallets' connections available on Yuno. Wallets let your customers use the stored cards they have with different providers. Select the desired wallet to access more information.",
    "Apple Pay",
    "Google Pay",
    "Click to  Pay"
  ],
  "https://docs.y.uno/docs/apple-pay": [
    "Apple Pay",
    "Suggest Edits",
    "Apple Pay is a cutting-edge mobile payment solution designed exclusively for iOS devices. With its proprietary technologies, Apple Pay offers a seamless, end-to-end payment experience that differentiates it from traditional payment methods. Before integrating with Yuno, it's crucial to grasp the workflow of this innovative system.",
    "Yuno presents an effortless way to incorporate Apple Pay as a payment method in your app. You have two integration options:",
    "Utilize our user-friendly SDK;",
    "Directly integrate with our API.",
    "Yuno streamlines the process of accepting Apple Pay payments and provides the flexibility to route payments to any payment service provider. By incorporating Apple Pay, you can elevate the customer experience and boost conversions within your app.",
    "Providers",
    "To incorporate Apple Pay into your system using Yuno, first, select one provider supporting this payment method. On Yuno, you have the following option:",
    "Adyen",
    "Cielo",
    "You must have credentials to connect to the selected provider using",
    "Yuno dashboard",
    "before integrating Apple Pay.",
    "Integration",
    "You need to cover some steps to integrate Apple Pay into your system using Yuno.",
    "First, create a Merchant ID in your",
    "Apple Developer account",
    "and generate a",
    "merchant identifier",
    ". The merchant identifier serves as your unique digital identity of a merchant eligible to receive payments through the Apple Pay platform. If you use Adyen, refer to the",
    "necessary additional configuration",
    ".",
    "Create a payment processing certificate following the",
    "Apple documentation",
    ".",
    "Within the",
    "Yuno dashboard",
    ", select the",
    "Connections",
    "tab. Find the provider you choose and click",
    "Connect",
    ". Fulfill the side panel fields with your credentials and the previously created Merchant ID. Below you will find examples of connecting panels for Adyen and Cielo.",
    "Create a route in Yuno's dashboard using the provider you have connected to. Access the",
    "Configure dynamic routing",
    "guide page for further information on creating routes.",
    "Additional configurations when using Adyen",
    "If you are using Adyen as your provider, you will need to consider some additional points when integrating Apple Pay.",
    "First, in step 1, described previously, you will have different merchant identifiers for test transactions and live transaction",
    "Live merchant identifier: Your merchant identifier must include the prefix",
    "merchant.com.adyen",
    ". For example,",
    "merchant.com.adyen.merchantAccount",
    ".",
    "Test merchant identifier: Create a merchant identifier with",
    ".test",
    "at the end for test transactions. For example,",
    "merchant.com.adyen.merchantAccount.test",
    ".,",
    "In addition, in step 2, you will need to create the payment processing certificate using the CSR (Certificate Signing Request) provided by Adyen.",
    "Enable and test Apple Pay with Yuno",
    "After performing the integration on Yuno, you can enable Apple Pay with Yuno and perform integration tests using the following steps:",
    "First, integrate",
    "Yuno's SDK",
    "into your app to ensure a smooth connection between your application and Yuno's platform.",
    "Enable Apple Pay",
    "within your app using Xcode:",
    "Add the Apple Pay capability to your project in Xcode.",
    "Select the Merchant ID that you previously created. It will automatically appear if you are logged in to your developer account.",
    "Once you have successfully integrated Yuno's SDK and enabled Apple Pay in your project, it's time to conduct tests using Apple's test credit cards.",
    "Open the Wallet app on your iOS device.",
    "Add one of the test cards available on the",
    "Apple Developer website's sandbox testing cards page",
    ".",
    "Navigate through the payment flow just as you would with any other payment method. You will see a",
    "Transaction approved",
    "message at the end",
    "By conducting this test, you can ensure that Apple Pay is seamlessly integrated into your app and functioning perfectly."
  ],
  "https://docs.y.uno/docs/google-pay": [
    "Google Pay",
    "Suggest Edits",
    "Google Pay, a cutting-edge digital wallet and online payment system, revolutionizes how users make payments by securely storing credit card information. Unlike conventional payment methods, Google Pay ensures enhanced security and privacy throughout the payment process.",
    "When utilizing Google Pay, your confidential credit or debit card details are never directly shared with the merchant. Instead, a unique token is generated, serving as a representation of your payment information. This token is utilized for processing the payment, providing an extra layer of protection, and preventing unauthorized access to your personal data.",
    "Considering the distinct mechanism of Google Pay, it is essential to grasp its working principles before seamlessly integrating it with Yuno.",
    "Familiarizing yourself with how Google Pay operates and understanding the process of creating tokens is vital to ensure a successful and secure integration with the Yuno platform. By harnessing the power of Google Pay and its advanced security features, you can elevate your payment experience and provide your customers with a safe and efficient payment solution.",
    "Requirements",
    "Before start looking how to integrate Google Pay into you system, it is essemtial to be sure that this payment method is available on your country. Use the",
    "Google Pay suport page",
    "to check if it is supports the countries where you operate.",
    "After, it is time to look which processors are available. Check the",
    "participating processors",
    "on Google's page.",
    "Providers",
    "To incorporate Google Pay into your system using Yuno, first, select one provider supporting this payment method. On Yuno, you have the following option:",
    "Adyen",
    "Cielo",
    "You must have credentials to connect to the selected provider using",
    "Yuno dashboard",
    "before integrating Google Pay.",
    "Integration",
    "You need to cover some steps to integrate Google Pay into your system using Yuno.",
    "First, you will review Google’s approval process for",
    "Android devices",
    "or",
    "Google Pay on the Web",
    ".",
    "Start by checking the Terms of Service and Acceptable Use Policy.",
    "Complete the tutorials and integration checklist.",
    "Complete the integration checklist for",
    "Android",
    "or",
    "Web",
    "before requesting production credentials from Google.",
    "Finally, you will request your production access.",
    "Get the developer credentials from the provider you choose to start using with Yuno.",
    "Adyen connection",
    "For Adyen, merchants need to create a",
    "testing account",
    "and get a",
    "MerchantAccount",
    "and a",
    "x-api-key",
    ".",
    "Within the",
    "Yuno dashboard",
    ", select the",
    "Connections",
    "tab. Find the provider you choose and click",
    "Connect",
    ". Fulfill the side panel fields with your credentials. Below you will find examples of connecting panels for Adyen and Cielo.",
    "Create a route in Yuno's dashboard using the gateway you have connected. Access the",
    "Configure dynamic routing",
    "guide page for further information on creating routes.",
    "Enable and test Google Pay with Yuno",
    "After performing the integration on Yuno, you can enable Google Pay with Yuno and perform integration tests using the following steps:",
    "First, integrate",
    "Yuno's SDK",
    "into your app to ensure a smooth connection between your application and Yuno's platform.",
    "Create a Google Wallet Test Account:",
    "Visit the",
    "Google Wallet Test Account Sign-In",
    "page.",
    "If you don't have a Google account, you'll need to create one to proceed.",
    "Once signed in, you'll be redirected to the Google Wallet business console.",
    "Access the Google Wallet API Section:",
    "In the Google Wallet business console, navigate to the section related to API management or integration. It is found in the developer or integration settings.",
    "Select",
    "Create a Pass",
    "to Enable",
    "Demo Mode",
    ":",
    "Within the Google Wallet API section, locate the option labeled",
    "Create a Pass",
    ".",
    "Click on this option to enable",
    "Demo mode",
    ". This mode allows you to simulate and test pass creation and interactions without making real transactions.",
    "Download the Google Wallet App from the Play Store.",
    "Navigate through the payment flow to test the integration.",
    "Following these steps you can ensure that Google Pay is integrated into your app and functioning perfectly."
  ],
  "https://docs.y.uno/docs/click-to-pay": [
    "Click To Pay",
    "Suggest Edits",
    "\"Click to Pay\" is an online payment solution designed to streamline and secure online transactions. It's based on the EMVCo secure payment standard, a global consortium comprising major card companies like Visa, MasterCard, American Express, and Discover.",
    "Networks available in Yuno",
    ":",
    "MasterCard",
    "Key Features and benefits:",
    "Ease of Use",
    ": It enables consumers to make online purchases with a single click, eliminating the need to manually enter credit card details for each purchase.",
    "Enhanced Security",
    ": Utilizes modern authentication standards to minimize fraud risk. This may include methods such as two-factor authentication or payment tokens.",
    "Consistent Across Various Sites",
    ": Offers a similar payment experience across all websites that support this technology, meaning consumers don’t have to learn different processes for each online store.",
    "Integration with Card Brands",
    ": Being backed by major card brands, \"Click to Pay\" is widely accepted and trusted.",
    "Mobile and Desktop Compatibility",
    ": Designed to work across a variety of devices, it facilitates online shopping on both desktops and mobile devices.",
    "This feature not only enhances the customer experience but also aligns with modern digital payment trends, potentially increasing conversion rates and customer loyalty. By incorporating \"Click to Pay,\" you can offer a seamless checkout experience, reducing friction and addressing security concerns in online transactions.",
    "Integration",
    "In order to integrate and start offering Click to pay to your customers, follow these 3 simple steps:",
    "Create a",
    "connection",
    "in Yuno dashboard using your Click to Pay credentials.",
    "Define the payment method route in the",
    "Routing",
    "section in order to be able to enable it in the Checkout Builder.",
    "Enable Click to Pay in the",
    "Checkout builder",
    ".",
    "Define the Card route: Taking in consideration that Click to pay is a wallet that stores credit card information, the",
    "route",
    "where you will need to define the providers for each scenario is the same as the",
    "'Card' payment method",
    ".",
    "That's it! Thanks to Yuno's SDK you don't need to do anything else to support payments using Click to pay integration."
  ],
  "https://docs.y.uno/docs/yuno-connections": [
    "Coverage",
    "Suggest Edits",
    "Any third-party integration can be a connection, from processors and acquirers to fraud prevention and communication platforms.",
    "Yuno's API provides several connections. You can easily enable connections with any provider available in Yuno from the Yuno Merchant Dashboard.",
    "We add new connections on a monthly basis",
    "Connections are not limited to the types specified here. We're always adding new ones based on market demand and merchant input.",
    "Country range",
    "Yuno has a worldwide range of integrated partners. Select a country to have access to all information regarding available processors, acquirers, payment methods, and fraud solutions.",
    "Regions",
    "You can also check a full country list for each region using the buttons below:",
    "Africa",
    "America",
    "Asia Pacific",
    "Europe",
    "Africa country list",
    "Algeria",
    "Angola",
    "Benin",
    "Botswana",
    "Burkina Faso",
    "Burundi",
    "Cameroon",
    "Cape Verde",
    "Central African Republic",
    "Chad",
    "Comoros",
    "Democratic Republic of the Congo",
    "Djibouti",
    "Egypt",
    "Equatorial Guinea",
    "Eritrea",
    "Ethiopia",
    "French Southern Territories",
    "Gabon Republic",
    "Gambia",
    "Ghana",
    "Guinea",
    "Guinea-Bissau",
    "Heard Island and McDonald Islands",
    "Ivory Coast",
    "Kenya",
    "Lesotho",
    "Liberia",
    "Libyan",
    "Madagascar",
    "Malawi",
    "Mali",
    "Morocco",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mozambique",
    "Namibia",
    "Niger",
    "Nigeria",
    "Republic of the Congo",
    "Reunion",
    "Rwanda",
    "Saint Helena",
    "Sao Tome and Principe",
    "Senegal",
    "Seychelles",
    "Sierra Leone",
    "Somalia",
    "South Africa",
    "South Sudan",
    "Sudan",
    "Swaziland",
    "Tanzania",
    "Togo",
    "Tunisia",
    "Uganda",
    "Western Sahara",
    "Zambia",
    "Zimbabwe",
    "America country list",
    "Anguilla",
    "Antigua and Barbuda",
    "Argentina",
    "Aruba",
    "Bahamas",
    "Barbados",
    "Belize",
    "Bermuda",
    "Bolivia",
    "Brazil",
    "British Virgin Islands",
    "Canada",
    "Cayman Islands",
    "Chile",
    "Colombia",
    "Costa Rica",
    "Cuba",
    "Curacao",
    "Dominica",
    "Dominican Republic",
    "Ecuador",
    "El Salvador",
    "Falkland Islands (Malvinas)",
    "French Guiana",
    "Grenada",
    "Guadeloupe",
    "Guatemala",
    "Guyana",
    "Haiti",
    "Honduras",
    "Jamaica",
    "Martinique",
    "Mexico",
    "Montserrat",
    "Nicaragua",
    "Panama",
    "Paraguay",
    "Peru",
    "Puerto Rico",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Maarten",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Suriname",
    "Trinidad and Tobago",
    "Turks and Caicos",
    "United States of America",
    "Uruguay",
    "Venezuela",
    "Asia country list",
    "Afghanistan",
    "Armenia",
    "Australia",
    "Bahrain",
    "Bangladesh",
    "Bhutan",
    "Brunei",
    "Cambodia",
    "China",
    "Christmas Island",
    "Cocos (Keeling) Islands",
    "Cook Islands",
    "Fiji",
    "French Polynesia",
    "Guam",
    "Hong Kong",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Israel",
    "Japan",
    "Jordan",
    "Kazakhstan",
    "Kiribati",
    "Kuwait",
    "Kyrgyztan",
    "Laos",
    "Lebanon",
    "Macao",
    "Malaysia",
    "Maldives",
    "Marshall Islands",
    "Micronesia",
    "Mongolia",
    "Myanmar",
    "Nauru",
    "Nepal",
    "New Caledonia",
    "New Zealand",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestinian Territory",
    "Papua New Guinea",
    "Philippines",
    "Pitcairn Islands",
    "Qatar",
    "Samoa",
    "Saudi Arabia",
    "Singapore",
    "Solomon Islands",
    "South Korea",
    "Sri Lanka",
    "Syria",
    "Taiwan",
    "Tajikistan",
    "Thailand",
    "Timor-Leste",
    "Tokelau",
    "Tonga",
    "Turkmenistan",
    "Tuvalu",
    "United Arab Emirates",
    "Uzbekistan",
    "Vanuatu",
    "Vietnam",
    "Wallis and Futuna",
    "Yemen",
    "Europe country list",
    "Albania",
    "Andorra",
    "Austria",
    "Azerbaijan Republic",
    "Belarus",
    "Belgium",
    "Bosnia and Hezergovina",
    "Bulgaria",
    "Croatia",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Estonia",
    "Faroe Islands",
    "Finland",
    "France",
    "Georgia",
    "Germany",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Guernsey",
    "Hungary",
    "Iceland",
    "Ireland",
    "Isle of Man",
    "Italy",
    "Jersey",
    "Kosovo",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Moldova",
    "Monaco",
    "Montenegro",
    "Netherlands",
    "North Macedonia",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Russia",
    "San Marino",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Svalbard and Jan Mayen",
    "Sweden",
    "Switzerland",
    "Turkey",
    "Ukraine",
    "United Kingdom",
    "Vatican City",
    "Åland Islands",
    "Send feedback"
  ]
}